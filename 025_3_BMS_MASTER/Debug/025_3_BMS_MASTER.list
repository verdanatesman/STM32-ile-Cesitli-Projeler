
025_3_BMS_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007ce0  08007ce0  00017ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008174  08008174  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800817c  0800817c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000558  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000734  20000734  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c25c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9c  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d8  00000000  00000000  0002e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022581  00000000  00000000  0002f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af23  00000000  00000000  000516e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0a72  00000000  00000000  0005c604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d076  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003398  00000000  00000000  0012d0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cc4 	.word	0x08007cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007cc4 	.word	0x08007cc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	b0e1      	sub	sp, #388	; 0x184
 8000f46:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f001 fb12 	bl	8002570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 fdd4 	bl	8001af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 ffa4 	bl	8001e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f54:	f000 ff6c 	bl	8001e30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 ff16 	bl	8001d88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f5c:	f000 fe36 	bl	8001bcc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f60:	f000 ff3c 	bl	8001ddc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // ik 4 gerilim, 5. sıcaklık , 6-7-8-9-10 sıcaklık değeri
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 11);
 8000f64:	220b      	movs	r2, #11
 8000f66:	496a      	ldr	r1, [pc, #424]	; (8001110 <main+0x1d0>)
 8000f68:	486a      	ldr	r0, [pc, #424]	; (8001114 <main+0x1d4>)
 8000f6a:	f001 fbdb 	bl	8002724 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2140      	movs	r1, #64	; 0x40
 8000f72:	4869      	ldr	r0, [pc, #420]	; (8001118 <main+0x1d8>)
 8000f74:	f002 fdc2 	bl	8003afc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7e:	4867      	ldr	r0, [pc, #412]	; (800111c <main+0x1dc>)
 8000f80:	f002 fdbc 	bl	8003afc <HAL_GPIO_WritePin>
	  //SICAKLIK KISMI
	  for(i=6; 11 > i; i++)
 8000f84:	4b66      	ldr	r3, [pc, #408]	; (8001120 <main+0x1e0>)
 8000f86:	2206      	movs	r2, #6
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e07b      	b.n	8001084 <main+0x144>
	  {

		  temp[j]=adc_value[i];
 8000f8c:	4b64      	ldr	r3, [pc, #400]	; (8001120 <main+0x1e0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a5f      	ldr	r2, [pc, #380]	; (8001110 <main+0x1d0>)
 8000f92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <main+0x1e4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	ee07 2a90 	vmov	s15, r2
 8000f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa2:	4a61      	ldr	r2, [pc, #388]	; (8001128 <main+0x1e8>)
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	edc3 7a00 	vstr	s15, [r3]

		  temp[j]=temp[j]/4095 * Vdda * 100;
 8000fac:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <main+0x1e4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a5d      	ldr	r2, [pc, #372]	; (8001128 <main+0x1e8>)
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800112c <main+0x1ec>
 8000fbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <main+0x1f0>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <main+0x1e4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001134 <main+0x1f4>
 8000fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <main+0x1e8>)
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	edc3 7a00 	vstr	s15, [r3]
		  if(temp[j]>40)
 8000fe2:	4b50      	ldr	r3, [pc, #320]	; (8001124 <main+0x1e4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <main+0x1e8>)
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001138 <main+0x1f8>
 8000ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	dd32      	ble.n	8001064 <main+0x124>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	4844      	ldr	r0, [pc, #272]	; (8001118 <main+0x1d8>)
 8001006:	f002 fd79 	bl	8003afc <HAL_GPIO_WritePin>
			  if(temp[j]>60)
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <main+0x1e4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a46      	ldr	r2, [pc, #280]	; (8001128 <main+0x1e8>)
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800113c <main+0x1fc>
 800101c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	dd18      	ble.n	8001058 <main+0x118>
			  {
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	483b      	ldr	r0, [pc, #236]	; (8001118 <main+0x1d8>)
 800102c:	f002 fd66 	bl	8003afc <HAL_GPIO_WritePin>
				  if(temp[j]>70)
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <main+0x1e4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <main+0x1e8>)
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001140 <main+0x200>
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dd11      	ble.n	8001070 <main+0x130>
				  {
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	4831      	ldr	r0, [pc, #196]	; (8001118 <main+0x1d8>)
 8001052:	f002 fd53 	bl	8003afc <HAL_GPIO_WritePin>
 8001056:	e00b      	b.n	8001070 <main+0x130>
				  }

			  }
			  else
			  {
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <main+0x1d8>)
 800105e:	f002 fd4d 	bl	8003afc <HAL_GPIO_WritePin>
 8001062:	e005      	b.n	8001070 <main+0x130>
			  }
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <main+0x1d8>)
 800106c:	f002 fd46 	bl	8003afc <HAL_GPIO_WritePin>
		  }
		  //*100;
		  j++;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <main+0x1e4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <main+0x1e4>)
 8001078:	6013      	str	r3, [r2, #0]
	  for(i=6; 11 > i; i++)
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <main+0x1e0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <main+0x1e0>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <main+0x1e0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b0a      	cmp	r3, #10
 800108a:	f77f af7f 	ble.w	8000f8c <main+0x4c>
	  }
	  j=0;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <main+0x1e4>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]


	  //ADC kısmı
	  test = adc_value[0];
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <main+0x1d0>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <main+0x204>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
	  Vdda = (float) 3.3 * (*VREFIN_CAL) / test;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <main+0x208>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800114c <main+0x20c>
 80010b6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <main+0x204>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <main+0x1f0>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
	  for(i=1; 4 >= i; i++)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <main+0x1e0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e015      	b.n	80010fe <main+0x1be>
	  {
		  V_CEL[i-1] = adc_value[i];
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <main+0x1e0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <main+0x1d0>)
 80010d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <main+0x1e0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	ee07 2a90 	vmov	s15, r2
 80010e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ea:	4a19      	ldr	r2, [pc, #100]	; (8001150 <main+0x210>)
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	edc3 7a00 	vstr	s15, [r3]
	  for(i=1; 4 >= i; i++)
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <main+0x1e0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <main+0x1e0>)
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <main+0x1e0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b04      	cmp	r3, #4
 8001104:	dde5      	ble.n	80010d2 <main+0x192>
	  }
	  for(i=0; 3 >= i; i++)
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <main+0x1e0>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e055      	b.n	80011ba <main+0x27a>
 800110e:	bf00      	nop
 8001110:	20000414 	.word	0x20000414
 8001114:	2000042c 	.word	0x2000042c
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	20000254 	.word	0x20000254
 8001124:	20000258 	.word	0x20000258
 8001128:	20000400 	.word	0x20000400
 800112c:	457ff000 	.word	0x457ff000
 8001130:	200002e8 	.word	0x200002e8
 8001134:	42c80000 	.word	0x42c80000
 8001138:	42200000 	.word	0x42200000
 800113c:	42700000 	.word	0x42700000
 8001140:	428c0000 	.word	0x428c0000
 8001144:	200002ec 	.word	0x200002ec
 8001148:	1fff7a2a 	.word	0x1fff7a2a
 800114c:	40533333 	.word	0x40533333
 8001150:	2000070c 	.word	0x2000070c
	  {
		  hucre[i] = V_CEL[i] / 4095 * Vdda;
 8001154:	4bbc      	ldr	r3, [pc, #752]	; (8001448 <main+0x508>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4abc      	ldr	r2, [pc, #752]	; (800144c <main+0x50c>)
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eddf 6abb 	vldr	s13, [pc, #748]	; 8001450 <main+0x510>
 8001166:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800116a:	4bba      	ldr	r3, [pc, #744]	; (8001454 <main+0x514>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	4bb5      	ldr	r3, [pc, #724]	; (8001448 <main+0x508>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	4ab7      	ldr	r2, [pc, #732]	; (8001458 <main+0x518>)
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edc3 7a00 	vstr	s15, [r3]
		  V_CEL[i] = V_CEL[i] / 4095 * Vdda;
 8001182:	4bb1      	ldr	r3, [pc, #708]	; (8001448 <main+0x508>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4ab1      	ldr	r2, [pc, #708]	; (800144c <main+0x50c>)
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8001450 <main+0x510>
 8001194:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001198:	4bae      	ldr	r3, [pc, #696]	; (8001454 <main+0x514>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	4baa      	ldr	r3, [pc, #680]	; (8001448 <main+0x508>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	4aa9      	ldr	r2, [pc, #676]	; (800144c <main+0x50c>)
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	edc3 7a00 	vstr	s15, [r3]
	  for(i=0; 3 >= i; i++)
 80011b0:	4ba5      	ldr	r3, [pc, #660]	; (8001448 <main+0x508>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4aa4      	ldr	r2, [pc, #656]	; (8001448 <main+0x508>)
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4ba3      	ldr	r3, [pc, #652]	; (8001448 <main+0x508>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	ddc8      	ble.n	8001154 <main+0x214>
	  }

	  V_CEL[0] = V_CEL[0] * (22000+680) / 680 * (1.70299/1.719); // GERİLİM BÖLÜCÜ 22K-680K
 80011c2:	4ba2      	ldr	r3, [pc, #648]	; (800144c <main+0x50c>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800145c <main+0x51c>
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001460 <main+0x520>
 80011d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d8:	ee16 0a90 	vmov	r0, s13
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	a391      	add	r3, pc, #580	; (adr r3, 8001428 <main+0x4e8>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcd9 	bl	8000ba8 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a94      	ldr	r2, [pc, #592]	; (800144c <main+0x50c>)
 80011fa:	6013      	str	r3, [r2, #0]
	  V_CEL[1] = V_CEL[1] * (22000+680) / 680 * (1.80493/1.815); // GERİLİM BÖLÜCÜ 22K-680K
 80011fc:	4b93      	ldr	r3, [pc, #588]	; (800144c <main+0x50c>)
 80011fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001202:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800145c <main+0x51c>
 8001206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001460 <main+0x520>
 800120e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001212:	ee16 0a90 	vmov	r0, s13
 8001216:	f7ff f997 	bl	8000548 <__aeabi_f2d>
 800121a:	a385      	add	r3, pc, #532	; (adr r3, 8001430 <main+0x4f0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9ea 	bl	80005f8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fcbc 	bl	8000ba8 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	4a86      	ldr	r2, [pc, #536]	; (800144c <main+0x50c>)
 8001234:	6053      	str	r3, [r2, #4]
	  V_CEL[2] = V_CEL[2] * (22000+680) / 680 * (1.90687/1.897); // GERİLİM BÖLÜCÜ 22K-680K
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <main+0x50c>)
 8001238:	edd3 7a02 	vldr	s15, [r3, #8]
 800123c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800145c <main+0x51c>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001460 <main+0x520>
 8001248:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800124c:	ee16 0a90 	vmov	r0, s13
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	a378      	add	r3, pc, #480	; (adr r3, 8001438 <main+0x4f8>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fc9f 	bl	8000ba8 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4a77      	ldr	r2, [pc, #476]	; (800144c <main+0x50c>)
 800126e:	6093      	str	r3, [r2, #8]
	  V_CEL[3] = V_CEL[3] * (22000+680) / 680 * (2.00582/2.041); // GERİLİM BÖLÜCÜ 22K-680K
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <main+0x50c>)
 8001272:	edd3 7a03 	vldr	s15, [r3, #12]
 8001276:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800145c <main+0x51c>
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001460 <main+0x520>
 8001282:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001286:	ee16 0a90 	vmov	r0, s13
 800128a:	f7ff f95d 	bl	8000548 <__aeabi_f2d>
 800128e:	a36c      	add	r3, pc, #432	; (adr r3, 8001440 <main+0x500>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9b0 	bl	80005f8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc82 	bl	8000ba8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a69      	ldr	r2, [pc, #420]	; (800144c <main+0x50c>)
 80012a8:	60d3      	str	r3, [r2, #12]

	  CEL_20[16]=V_CEL[0]-cel15;
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <main+0x50c>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <main+0x524>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ba:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <main+0x528>)
 80012bc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  CEL_20[17]=V_CEL[1]-V_CEL[0];
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <main+0x50c>)
 80012c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c6:	4b61      	ldr	r3, [pc, #388]	; (800144c <main+0x50c>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d0:	4b65      	ldr	r3, [pc, #404]	; (8001468 <main+0x528>)
 80012d2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	  CEL_20[18]=V_CEL[2]-V_CEL[1];
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <main+0x50c>)
 80012d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <main+0x50c>)
 80012de:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e6:	4b60      	ldr	r3, [pc, #384]	; (8001468 <main+0x528>)
 80012e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	  CEL_20[19]=V_CEL[3]-V_CEL[2];
 80012ec:	4b57      	ldr	r3, [pc, #348]	; (800144c <main+0x50c>)
 80012ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80012f2:	4b56      	ldr	r3, [pc, #344]	; (800144c <main+0x50c>)
 80012f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fc:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <main+0x528>)
 80012fe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//	  HAL_Delay(2000);

	  // UART DAN GELEN VERİYİ KAYDETME KISMI
	 	  HAL_UART_Receive_DMA(&huart2, (uint8_t*)al, 89);
 8001302:	2259      	movs	r2, #89	; 0x59
 8001304:	4959      	ldr	r1, [pc, #356]	; (800146c <main+0x52c>)
 8001306:	485a      	ldr	r0, [pc, #360]	; (8001470 <main+0x530>)
 8001308:	f003 f965 	bl	80045d6 <HAL_UART_Receive_DMA>
	 	//  HAL_Delay(200);
	 	  for(i=0; 89>i;i++)
 800130c:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <main+0x508>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e0c3      	b.n	800149c <main+0x55c>
	 	  {
	 		  pil[i]=al[i];
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <main+0x508>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a54      	ldr	r2, [pc, #336]	; (800146c <main+0x52c>)
 800131a:	5cd2      	ldrb	r2, [r2, r3]
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <main+0x508>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4611      	mov	r1, r2
 8001322:	4a54      	ldr	r2, [pc, #336]	; (8001474 <main+0x534>)
 8001324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 		  switch(pil[i])
 8001328:	4b47      	ldr	r3, [pc, #284]	; (8001448 <main+0x508>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <main+0x534>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	3b2a      	subs	r3, #42	; 0x2a
 8001334:	2b0f      	cmp	r3, #15
 8001336:	f200 80ab 	bhi.w	8001490 <main+0x550>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <main+0x400>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	0800140d 	.word	0x0800140d
 8001344:	08001491 	.word	0x08001491
 8001348:	08001479 	.word	0x08001479
 800134c:	08001491 	.word	0x08001491
 8001350:	0800141b 	.word	0x0800141b
 8001354:	08001491 	.word	0x08001491
 8001358:	08001381 	.word	0x08001381
 800135c:	0800138f 	.word	0x0800138f
 8001360:	0800139d 	.word	0x0800139d
 8001364:	080013ab 	.word	0x080013ab
 8001368:	080013b9 	.word	0x080013b9
 800136c:	080013c7 	.word	0x080013c7
 8001370:	080013d5 	.word	0x080013d5
 8001374:	080013e3 	.word	0x080013e3
 8001378:	080013f1 	.word	0x080013f1
 800137c:	080013ff 	.word	0x080013ff
	 		  {

	 		  case 48:
	 		 	  pil[i]=0;
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <main+0x508>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a3b      	ldr	r2, [pc, #236]	; (8001474 <main+0x534>)
 8001386:	2100      	movs	r1, #0
 8001388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 		 	  break;
 800138c:	e081      	b.n	8001492 <main+0x552>
	 		  case 49:
	 			  pil[i]=1;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <main+0x508>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a38      	ldr	r2, [pc, #224]	; (8001474 <main+0x534>)
 8001394:	2101      	movs	r1, #1
 8001396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 800139a:	e07a      	b.n	8001492 <main+0x552>
	 		  case 50:
	 			  pil[i]=2;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <main+0x508>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a34      	ldr	r2, [pc, #208]	; (8001474 <main+0x534>)
 80013a2:	2102      	movs	r1, #2
 80013a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013a8:	e073      	b.n	8001492 <main+0x552>
	 		  case 51:
	 			  pil[i]=3;
 80013aa:	4b27      	ldr	r3, [pc, #156]	; (8001448 <main+0x508>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a31      	ldr	r2, [pc, #196]	; (8001474 <main+0x534>)
 80013b0:	2103      	movs	r1, #3
 80013b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013b6:	e06c      	b.n	8001492 <main+0x552>
	 		  case 52:
	 			  pil[i]=4;
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <main+0x508>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <main+0x534>)
 80013be:	2104      	movs	r1, #4
 80013c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013c4:	e065      	b.n	8001492 <main+0x552>
	 		  case 53:
	 			  pil[i]=5;
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <main+0x508>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <main+0x534>)
 80013cc:	2105      	movs	r1, #5
 80013ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013d2:	e05e      	b.n	8001492 <main+0x552>
	 		  case 54:
	 			  pil[i]=6;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <main+0x508>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <main+0x534>)
 80013da:	2106      	movs	r1, #6
 80013dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013e0:	e057      	b.n	8001492 <main+0x552>
	 		  case 55:
	 			  pil[i]=7;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <main+0x508>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <main+0x534>)
 80013e8:	2107      	movs	r1, #7
 80013ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013ee:	e050      	b.n	8001492 <main+0x552>
	 		  case 56:
	 			  pil[i]=8;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <main+0x508>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <main+0x534>)
 80013f6:	2108      	movs	r1, #8
 80013f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 80013fc:	e049      	b.n	8001492 <main+0x552>
	 		  case 57:
	 			  pil[i]=9;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <main+0x508>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <main+0x534>)
 8001404:	2109      	movs	r1, #9
 8001406:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 800140a:	e042      	b.n	8001492 <main+0x552>
	 		  case 42: //* işareti
	 			  pil[i]=0;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <main+0x508>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <main+0x534>)
 8001412:	2100      	movs	r1, #0
 8001414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 8001418:	e03b      	b.n	8001492 <main+0x552>
	 		  case 46:// . işareti
	 			  pil[i]=0;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <main+0x508>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <main+0x534>)
 8001420:	2100      	movs	r1, #0
 8001422:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 8001426:	e034      	b.n	8001492 <main+0x552>
 8001428:	0f8f3f2f 	.word	0x0f8f3f2f
 800142c:	3fefb3b4 	.word	0x3fefb3b4
 8001430:	8fc70a26 	.word	0x8fc70a26
 8001434:	3fefd28c 	.word	0x3fefd28c
 8001438:	b0ccf37e 	.word	0xb0ccf37e
 800143c:	3ff0154f 	.word	0x3ff0154f
 8001440:	20b115d4 	.word	0x20b115d4
 8001444:	3fef72cc 	.word	0x3fef72cc
 8001448:	20000254 	.word	0x20000254
 800144c:	2000070c 	.word	0x2000070c
 8001450:	457ff000 	.word	0x457ff000
 8001454:	200002e8 	.word	0x200002e8
 8001458:	200003f0 	.word	0x200003f0
 800145c:	46b13000 	.word	0x46b13000
 8001460:	442a0000 	.word	0x442a0000
 8001464:	2000071c 	.word	0x2000071c
 8001468:	20000474 	.word	0x20000474
 800146c:	200001f8 	.word	0x200001f8
 8001470:	200006c8 	.word	0x200006c8
 8001474:	200004c4 	.word	0x200004c4
	 		  case 44:// , işareti
	 			  pil[i]=0;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <main+0x548>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <main+0x54c>)
 800147e:	2100      	movs	r1, #0
 8001480:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 			  break;
 8001484:	e005      	b.n	8001492 <main+0x552>
 8001486:	bf00      	nop
 8001488:	20000254 	.word	0x20000254
 800148c:	200004c4 	.word	0x200004c4
	 		  default:
	 			  break;
 8001490:	bf00      	nop
	 	  for(i=0; 89>i;i++)
 8001492:	4bcf      	ldr	r3, [pc, #828]	; (80017d0 <main+0x890>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4acd      	ldr	r2, [pc, #820]	; (80017d0 <main+0x890>)
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4bcc      	ldr	r3, [pc, #816]	; (80017d0 <main+0x890>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b58      	cmp	r3, #88	; 0x58
 80014a2:	f77f af37 	ble.w	8001314 <main+0x3d4>
	 		  }
	 	  }


	 		 cel[0]=pil[0]*100+pil[2]*10+pil[3];
 80014a6:	4bcb      	ldr	r3, [pc, #812]	; (80017d4 <main+0x894>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	fb02 f103 	mul.w	r1, r2, r3
 80014b0:	4bc8      	ldr	r3, [pc, #800]	; (80017d4 <main+0x894>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	18ca      	adds	r2, r1, r3
 80014be:	4bc5      	ldr	r3, [pc, #788]	; (80017d4 <main+0x894>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	4bc2      	ldr	r3, [pc, #776]	; (80017d8 <main+0x898>)
 80014ce:	edc3 7a00 	vstr	s15, [r3]
	 		 cel[1]=pil[5]*100+pil[6]*10+pil[7];
 80014d2:	4bc0      	ldr	r3, [pc, #768]	; (80017d4 <main+0x894>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2264      	movs	r2, #100	; 0x64
 80014d8:	fb02 f103 	mul.w	r1, r2, r3
 80014dc:	4bbd      	ldr	r3, [pc, #756]	; (80017d4 <main+0x894>)
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	18ca      	adds	r2, r1, r3
 80014ea:	4bba      	ldr	r3, [pc, #744]	; (80017d4 <main+0x894>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	4bb7      	ldr	r3, [pc, #732]	; (80017d8 <main+0x898>)
 80014fa:	edc3 7a01 	vstr	s15, [r3, #4]
	 		 cel[2]=pil[10]*100+pil[12]*10+pil[13];
 80014fe:	4bb5      	ldr	r3, [pc, #724]	; (80017d4 <main+0x894>)
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	2264      	movs	r2, #100	; 0x64
 8001504:	fb02 f103 	mul.w	r1, r2, r3
 8001508:	4bb2      	ldr	r3, [pc, #712]	; (80017d4 <main+0x894>)
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	18ca      	adds	r2, r1, r3
 8001516:	4baf      	ldr	r3, [pc, #700]	; (80017d4 <main+0x894>)
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	4413      	add	r3, r2
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	4bac      	ldr	r3, [pc, #688]	; (80017d8 <main+0x898>)
 8001526:	edc3 7a02 	vstr	s15, [r3, #8]
	 		 cel[3]=pil[15]*100+pil[17]*10+pil[18];
 800152a:	4baa      	ldr	r3, [pc, #680]	; (80017d4 <main+0x894>)
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	fb02 f103 	mul.w	r1, r2, r3
 8001534:	4ba7      	ldr	r3, [pc, #668]	; (80017d4 <main+0x894>)
 8001536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	18ca      	adds	r2, r1, r3
 8001542:	4ba4      	ldr	r3, [pc, #656]	; (80017d4 <main+0x894>)
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	4413      	add	r3, r2
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <main+0x898>)
 8001552:	edc3 7a03 	vstr	s15, [r3, #12]
	 		 cel[4]=pil[20]*100+pil[22]*10+pil[23];
 8001556:	4b9f      	ldr	r3, [pc, #636]	; (80017d4 <main+0x894>)
 8001558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	fb02 f103 	mul.w	r1, r2, r3
 8001560:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <main+0x894>)
 8001562:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	18ca      	adds	r2, r1, r3
 800156e:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <main+0x894>)
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	4413      	add	r3, r2
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <main+0x898>)
 800157e:	edc3 7a04 	vstr	s15, [r3, #16]
	 		 cel[5]=pil[25]*100+pil[27]*10+pil[28];
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <main+0x894>)
 8001584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001586:	2264      	movs	r2, #100	; 0x64
 8001588:	fb02 f103 	mul.w	r1, r2, r3
 800158c:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <main+0x894>)
 800158e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	18ca      	adds	r2, r1, r3
 800159a:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <main+0x894>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4413      	add	r3, r2
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a8:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <main+0x898>)
 80015aa:	edc3 7a05 	vstr	s15, [r3, #20]
	 		 cel[6]=pil[30]*100+pil[32]*10+pil[33];
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <main+0x894>)
 80015b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	fb02 f103 	mul.w	r1, r2, r3
 80015b8:	4b86      	ldr	r3, [pc, #536]	; (80017d4 <main+0x894>)
 80015ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	18ca      	adds	r2, r1, r3
 80015c8:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <main+0x894>)
 80015ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ce:	4413      	add	r3, r2
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d8:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <main+0x898>)
 80015da:	edc3 7a06 	vstr	s15, [r3, #24]
	 		 cel[7]=pil[35]*100+pil[37]*10+pil[38];
 80015de:	4b7d      	ldr	r3, [pc, #500]	; (80017d4 <main+0x894>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e4:	2264      	movs	r2, #100	; 0x64
 80015e6:	fb02 f103 	mul.w	r1, r2, r3
 80015ea:	4b7a      	ldr	r3, [pc, #488]	; (80017d4 <main+0x894>)
 80015ec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	18ca      	adds	r2, r1, r3
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <main+0x894>)
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001600:	4413      	add	r3, r2
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	4b73      	ldr	r3, [pc, #460]	; (80017d8 <main+0x898>)
 800160c:	edc3 7a07 	vstr	s15, [r3, #28]
	 		 cel[8]=pil[40]*100+pil[42]*10+pil[43];
 8001610:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <main+0x894>)
 8001612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001616:	2264      	movs	r2, #100	; 0x64
 8001618:	fb02 f103 	mul.w	r1, r2, r3
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <main+0x894>)
 800161e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	18ca      	adds	r2, r1, r3
 800162c:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <main+0x894>)
 800162e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001632:	4413      	add	r3, r2
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <main+0x898>)
 800163e:	edc3 7a08 	vstr	s15, [r3, #32]
	 		 cel[9]=pil[45]*100+pil[47]*10+pil[48];
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <main+0x894>)
 8001644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001648:	2264      	movs	r2, #100	; 0x64
 800164a:	fb02 f103 	mul.w	r1, r2, r3
 800164e:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <main+0x894>)
 8001650:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	18ca      	adds	r2, r1, r3
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <main+0x894>)
 8001660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001664:	4413      	add	r3, r2
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <main+0x898>)
 8001670:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 		 cel[10]=pil[50]*100+pil[52]*10+pil[53];
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <main+0x894>)
 8001676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800167a:	2264      	movs	r2, #100	; 0x64
 800167c:	fb02 f103 	mul.w	r1, r2, r3
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <main+0x894>)
 8001682:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	18ca      	adds	r2, r1, r3
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <main+0x894>)
 8001692:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001696:	4413      	add	r3, r2
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <main+0x898>)
 80016a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	 		 cel[11]=pil[55]*100+pil[57]*10+pil[58];
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <main+0x894>)
 80016a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016ac:	2264      	movs	r2, #100	; 0x64
 80016ae:	fb02 f103 	mul.w	r1, r2, r3
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <main+0x894>)
 80016b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	18ca      	adds	r2, r1, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <main+0x894>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c8:	4413      	add	r3, r2
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <main+0x898>)
 80016d4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	 		 cel[12]=pil[60]*100+pil[62]*10+pil[63];
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <main+0x894>)
 80016da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016de:	2264      	movs	r2, #100	; 0x64
 80016e0:	fb02 f103 	mul.w	r1, r2, r3
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <main+0x894>)
 80016e6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	18ca      	adds	r2, r1, r3
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <main+0x894>)
 80016f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80016fa:	4413      	add	r3, r2
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <main+0x898>)
 8001706:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 		 cel[13]=pil[65]*100+pil[67]*10+pil[68];
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <main+0x894>)
 800170c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001710:	2264      	movs	r2, #100	; 0x64
 8001712:	fb02 f103 	mul.w	r1, r2, r3
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <main+0x894>)
 8001718:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	18ca      	adds	r2, r1, r3
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <main+0x894>)
 8001728:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800172c:	4413      	add	r3, r2
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <main+0x898>)
 8001738:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	 		 cel[14]=pil[70]*100+pil[72]*10+pil[73];
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <main+0x894>)
 800173e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	fb02 f103 	mul.w	r1, r2, r3
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <main+0x894>)
 800174a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	18ca      	adds	r2, r1, r3
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <main+0x894>)
 800175a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800175e:	4413      	add	r3, r2
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <main+0x898>)
 800176a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	 		 cel[15]=pil[75]*100+pil[77]*10+pil[78];
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <main+0x894>)
 8001770:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001774:	2264      	movs	r2, #100	; 0x64
 8001776:	fb02 f103 	mul.w	r1, r2, r3
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <main+0x894>)
 800177c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	18ca      	adds	r2, r1, r3
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <main+0x894>)
 800178c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001790:	4413      	add	r3, r2
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <main+0x898>)
 800179c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	 		 cel15=pil[80]*100000+pil[81]*10000+pil[83]*1000+pil[84]*100+pil[85]*10+pil[86];
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <main+0x894>)
 80017a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <main+0x89c>)
 80017a8:	fb02 f203 	mul.w	r2, r2, r3
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <main+0x894>)
 80017ae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80017b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	441a      	add	r2, r3
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <main+0x894>)
 80017be:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80017c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	441a      	add	r2, r3
 80017cc:	e008      	b.n	80017e0 <main+0x8a0>
 80017ce:	bf00      	nop
 80017d0:	20000254 	.word	0x20000254
 80017d4:	200004c4 	.word	0x200004c4
 80017d8:	20000688 	.word	0x20000688
 80017dc:	000186a0 	.word	0x000186a0
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <main+0x8f0>)
 80017e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80017e6:	2164      	movs	r1, #100	; 0x64
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	18d1      	adds	r1, r2, r3
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <main+0x8f0>)
 80017f0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	18ca      	adds	r2, r1, r3
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <main+0x8f0>)
 8001800:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8001804:	4413      	add	r3, r2
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <main+0x8f4>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
	 		 cel15=cel15/10000;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <main+0x8f4>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001838 <main+0x8f8>
 800181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <main+0x8f4>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
	 		 for(i=0; 15 >= i;i++)
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <main+0x8fc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e01e      	b.n	800186e <main+0x92e>
 8001830:	200004c4 	.word	0x200004c4
 8001834:	2000071c 	.word	0x2000071c
 8001838:	461c4000 	.word	0x461c4000
 800183c:	20000254 	.word	0x20000254
	 		 {
	 			CEL_20[i]=cel[i]/100;
 8001840:	4ba3      	ldr	r3, [pc, #652]	; (8001ad0 <main+0xb90>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4aa3      	ldr	r2, [pc, #652]	; (8001ad4 <main+0xb94>)
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	4ba0      	ldr	r3, [pc, #640]	; (8001ad0 <main+0xb90>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8001ad8 <main+0xb98>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	4aa0      	ldr	r2, [pc, #640]	; (8001adc <main+0xb9c>)
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	edc3 7a00 	vstr	s15, [r3]
	 		 for(i=0; 15 >= i;i++)
 8001864:	4b9a      	ldr	r3, [pc, #616]	; (8001ad0 <main+0xb90>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a99      	ldr	r2, [pc, #612]	; (8001ad0 <main+0xb90>)
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b98      	ldr	r3, [pc, #608]	; (8001ad0 <main+0xb90>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	dde4      	ble.n	8001840 <main+0x900>
	 		 }
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
	 				  "%.2f,%.1f,%.2f,%.2f,%.2f,%.2f,%.2f,0.0*", CEL_20[0], CEL_20[1],
 8001876:	4b99      	ldr	r3, [pc, #612]	; (8001adc <main+0xb9c>)
 8001878:	681b      	ldr	r3, [r3, #0]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
	 				  "%.2f,%.1f,%.2f,%.2f,%.2f,%.2f,%.2f,0.0*", CEL_20[0], CEL_20[1],
 8001884:	4b95      	ldr	r3, [pc, #596]	; (8001adc <main+0xb9c>)
 8001886:	685b      	ldr	r3, [r3, #4]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 8001892:	4b92      	ldr	r3, [pc, #584]	; (8001adc <main+0xb9c>)
 8001894:	689b      	ldr	r3, [r3, #8]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018a0:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <main+0xb9c>)
 80018a2:	68db      	ldr	r3, [r3, #12]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe4f 	bl	8000548 <__aeabi_f2d>
 80018aa:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018ae:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <main+0xb9c>)
 80018b0:	691b      	ldr	r3, [r3, #16]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018bc:	4b87      	ldr	r3, [pc, #540]	; (8001adc <main+0xb9c>)
 80018be:	695b      	ldr	r3, [r3, #20]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <main+0xb9c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018d8:	4b80      	ldr	r3, [pc, #512]	; (8001adc <main+0xb9c>)
 80018da:	69db      	ldr	r3, [r3, #28]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe33 	bl	8000548 <__aeabi_f2d>
 80018e2:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018e6:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <main+0xb9c>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <main+0xb9c>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <main+0xb9c>)
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 8001910:	4b72      	ldr	r3, [pc, #456]	; (8001adc <main+0xb9c>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe17 	bl	8000548 <__aeabi_f2d>
 800191a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
	 				 CEL_20[2], CEL_20[3], CEL_20[4], CEL_20[5], CEL_20[6], CEL_20[7], CEL_20[8], CEL_20[9], CEL_20[10], CEL_20[11], CEL_20[12],
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <main+0xb9c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe10 	bl	8000548 <__aeabi_f2d>
 8001928:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <main+0xb9c>)
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe09 	bl	8000548 <__aeabi_f2d>
 8001936:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 800193a:	4b68      	ldr	r3, [pc, #416]	; (8001adc <main+0xb9c>)
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe02 	bl	8000548 <__aeabi_f2d>
 8001944:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <main+0xb9c>)
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdfb 	bl	8000548 <__aeabi_f2d>
 8001952:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <main+0xb9c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 8001964:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <main+0xb9c>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	e9c7 0108 	strd	r0, r1, [r7, #32]
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 8001972:	4b5a      	ldr	r3, [pc, #360]	; (8001adc <main+0xb9c>)
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fde6 	bl	8000548 <__aeabi_f2d>
 800197c:	e9c7 0106 	strd	r0, r1, [r7, #24]
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <main+0xb9c>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddf 	bl	8000548 <__aeabi_f2d>
 800198a:	e9c7 0104 	strd	r0, r1, [r7, #16]
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 800198e:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <main+0xba0>)
 8001990:	68db      	ldr	r3, [r3, #12]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd8 	bl	8000548 <__aeabi_f2d>
 8001998:	e9c7 0102 	strd	r0, r1, [r7, #8]
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <main+0xba4>)
 800199e:	895b      	ldrh	r3, [r3, #10]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019a0:	461e      	mov	r6, r3
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 80019a2:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <main+0xba8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdce 	bl	8000548 <__aeabi_f2d>
 80019ac:	e9c7 0100 	strd	r0, r1, [r7]
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <main+0xba8>)
 80019b2:	685b      	ldr	r3, [r3, #4]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdc7 	bl	8000548 <__aeabi_f2d>
 80019ba:	4682      	mov	sl, r0
 80019bc:	468b      	mov	fp, r1
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <main+0xba8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	4680      	mov	r8, r0
 80019ca:	4689      	mov	r9, r1
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 80019cc:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <main+0xba8>)
 80019ce:	68db      	ldr	r3, [r3, #12]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
					 CEL_20[13], CEL_20[14], CEL_20[15], CEL_20[16], CEL_20[17], CEL_20[18], CEL_20[19], V_CEL[3],adc_value[5],temp[0],temp[1],temp[2],temp[3],temp[4]);
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <main+0xba8>)
 80019dc:	691b      	ldr	r3, [r3, #16]
	 		  sprintf(aksgonder, "#,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,"
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb2 	bl	8000548 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
 80019ec:	e9cd 4530 	strd	r4, r5, [sp, #192]	; 0xc0
 80019f0:	e9cd 892e 	strd	r8, r9, [sp, #184]	; 0xb8
 80019f4:	e9cd ab2c 	strd	sl, fp, [sp, #176]	; 0xb0
 80019f8:	ed97 7b00 	vldr	d7, [r7]
 80019fc:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8001a00:	9628      	str	r6, [sp, #160]	; 0xa0
 8001a02:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a06:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8001a0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a0e:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8001a12:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a16:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8001a1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a1e:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8001a22:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001a26:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8001a2a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001a2e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8001a32:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a36:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8001a3a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001a3e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001a42:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001a46:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001a4a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001a4e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001a52:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001a56:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001a5a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001a5e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001a62:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001a66:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001a6a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001a6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001a72:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001a76:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001a7a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a82:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a8a:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8001a8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a92:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8001a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a9a:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8001a9e:	ed8d 7b00 	vstr	d7, [sp]
 8001aa2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001aa6:	4911      	ldr	r1, [pc, #68]	; (8001aec <main+0xbac>)
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <main+0xbb0>)
 8001aaa:	f003 fedf 	bl	800586c <siprintf>

 	 		  if(HAL_UART_Transmit(&huart3, (uint8_t*)aksgonder, 140, 5000)!=HAL_OK)
 8001aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ab2:	228c      	movs	r2, #140	; 0x8c
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <main+0xbb0>)
 8001ab6:	480f      	ldr	r0, [pc, #60]	; (8001af4 <main+0xbb4>)
 8001ab8:	f002 fcfb 	bl	80044b2 <HAL_UART_Transmit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <main+0xb86>
	 	//strlen(gonder)
	 		  {
	 			  Error_Handler();
 8001ac2:	f000 fa83 	bl	8001fcc <Error_Handler>
	 		  }
//,temp[0],temp[1],temp[2],temp[3],temp[4]
//%.2f,%.2f,%.2f,%.2f,%.2f
	 	  HAL_Delay(200);
 8001ac6:	20c8      	movs	r0, #200	; 0xc8
 8001ac8:	f000 fdc4 	bl	8002654 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001acc:	f7ff ba54 	b.w	8000f78 <main+0x38>
 8001ad0:	20000254 	.word	0x20000254
 8001ad4:	20000688 	.word	0x20000688
 8001ad8:	42c80000 	.word	0x42c80000
 8001adc:	20000474 	.word	0x20000474
 8001ae0:	2000070c 	.word	0x2000070c
 8001ae4:	20000414 	.word	0x20000414
 8001ae8:	20000400 	.word	0x20000400
 8001aec:	08007ce0 	.word	0x08007ce0
 8001af0:	2000025c 	.word	0x2000025c
 8001af4:	2000036c 	.word	0x2000036c

08001af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b094      	sub	sp, #80	; 0x50
 8001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2230      	movs	r2, #48	; 0x30
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fa3e 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <SystemClock_Config+0xcc>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <SystemClock_Config+0xcc>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <SystemClock_Config+0xcc>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <SystemClock_Config+0xd0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <SystemClock_Config+0xd0>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <SystemClock_Config+0xd0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b60:	2302      	movs	r3, #2
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b6c:	23a8      	movs	r3, #168	; 0xa8
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 ffd7 	bl	8003b30 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b88:	f000 fa20 	bl	8001fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2105      	movs	r1, #5
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fa38 	bl	8004020 <HAL_RCC_ClockConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bb6:	f000 fa09 	bl	8001fcc <Error_Handler>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3750      	adds	r7, #80	; 0x50
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000

08001bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001be0:	4a67      	ldr	r2, [pc, #412]	; (8001d80 <MX_ADC1_Init+0x1b4>)
 8001be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001be6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bec:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bf8:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c0c:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c0e:	4a5d      	ldr	r2, [pc, #372]	; (8001d84 <MX_ADC1_Init+0x1b8>)
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c12:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8001c18:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c1a:	220b      	movs	r2, #11
 8001c1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2c:	4853      	ldr	r0, [pc, #332]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c2e:	f000 fd35 	bl	800269c <HAL_ADC_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c38:	f000 f9c8 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001c3c:	2311      	movs	r3, #17
 8001c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001c44:	2304      	movs	r3, #4
 8001c46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	484b      	ldr	r0, [pc, #300]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c4e:	f000 fe97 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c58:	f000 f9b8 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4844      	ldr	r0, [pc, #272]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c6a:	f000 fe89 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c74:	f000 f9aa 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c80:	463b      	mov	r3, r7
 8001c82:	4619      	mov	r1, r3
 8001c84:	483d      	ldr	r0, [pc, #244]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001c86:	f000 fe7b 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c90:	f000 f99c 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4836      	ldr	r0, [pc, #216]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001ca2:	f000 fe6d 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001cac:	f000 f98e 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	482f      	ldr	r0, [pc, #188]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001cbe:	f000 fe5f 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001cc8:	f000 f980 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4828      	ldr	r0, [pc, #160]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001cda:	f000 fe51 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001ce4:	f000 f972 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ce8:	2305      	movs	r3, #5
 8001cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4821      	ldr	r0, [pc, #132]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001cf6:	f000 fe43 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001d00:	f000 f964 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d04:	2309      	movs	r3, #9
 8001d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	481a      	ldr	r0, [pc, #104]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001d12:	f000 fe35 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001d1c:	f000 f956 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d20:	2307      	movs	r3, #7
 8001d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001d24:	2309      	movs	r3, #9
 8001d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001d2e:	f000 fe27 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001d38:	f000 f948 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001d3c:	230e      	movs	r3, #14
 8001d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001d40:	230a      	movs	r3, #10
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001d4a:	f000 fe19 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001d54:	f000 f93a 	bl	8001fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001d5c:	230b      	movs	r3, #11
 8001d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_ADC1_Init+0x1b0>)
 8001d66:	f000 fe0b 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001d70:	f000 f92c 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000042c 	.word	0x2000042c
 8001d80:	40012000 	.word	0x40012000
 8001d84:	0f000001 	.word	0x0f000001

08001d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <MX_USART2_UART_Init+0x50>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	f002 fb2a 	bl	8004418 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dca:	f000 f8ff 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200006c8 	.word	0x200006c8
 8001dd8:	40004400 	.word	0x40004400

08001ddc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <MX_USART3_UART_Init+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e14:	f002 fb00 	bl	8004418 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f000 f8d5 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000036c 	.word	0x2000036c
 8001e2c:	40004800 	.word	0x40004800

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <MX_DMA_Init+0x68>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2010      	movs	r0, #16
 8001e74:	f001 f8ff 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f001 f918 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2038      	movs	r0, #56	; 0x38
 8001e84:	f001 f8f7 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e88:	2038      	movs	r0, #56	; 0x38
 8001e8a:	f001 f910 	bl	80030ae <HAL_NVIC_EnableIRQ>

}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_GPIO_Init+0x124>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <MX_GPIO_Init+0x128>)
 8001f46:	f001 fdd9 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	21c0      	movs	r1, #192	; 0xc0
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <MX_GPIO_Init+0x12c>)
 8001f50:	f001 fdd4 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5a:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <MX_GPIO_Init+0x12c>)
 8001f5c:	f001 fdce 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <MX_GPIO_Init+0x128>)
 8001f7a:	f001 fc23 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <MX_GPIO_Init+0x12c>)
 8001f96:	f001 fc15 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_GPIO_Init+0x12c>)
 8001fb4:	f001 fc06 	bl	80037c4 <HAL_GPIO_Init>

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40020800 	.word	0x40020800

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <Error_Handler+0x8>
	...

08001fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_MspInit+0x4c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_MspInit+0x4c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_ADC_MspInit+0x148>)
 8002046:	4293      	cmp	r3, r2
 8002048:	f040 808d 	bne.w	8002166 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6453      	str	r3, [r2, #68]	; 0x44
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a40      	ldr	r2, [pc, #256]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6313      	str	r3, [r2, #48]	; 0x30
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_ADC_MspInit+0x14c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020bc:	23bf      	movs	r3, #191	; 0xbf
 80020be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	482a      	ldr	r0, [pc, #168]	; (8002178 <HAL_ADC_MspInit+0x150>)
 80020d0:	f001 fb78 	bl	80037c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020d4:	2330      	movs	r3, #48	; 0x30
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <HAL_ADC_MspInit+0x154>)
 80020e8:	f001 fb6c 	bl	80037c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	4820      	ldr	r0, [pc, #128]	; (8002180 <HAL_ADC_MspInit+0x158>)
 8002100:	f001 fb60 	bl	80037c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <HAL_ADC_MspInit+0x160>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800211e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002122:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800213e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002142:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800214c:	f000 ffca 	bl	80030e4 <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8002156:	f7ff ff39 	bl	8001fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
 8002160:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_ADC_MspInit+0x15c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	; 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40012000 	.word	0x40012000
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020800 	.word	0x40020800
 8002180:	40020400 	.word	0x40020400
 8002184:	20000628 	.word	0x20000628
 8002188:	40026410 	.word	0x40026410

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <HAL_UART_MspInit+0x148>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d15b      	bne.n	8002266 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a41      	ldr	r2, [pc, #260]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021e6:	2360      	movs	r3, #96	; 0x60
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f6:	2307      	movs	r3, #7
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4836      	ldr	r0, [pc, #216]	; (80022dc <HAL_UART_MspInit+0x150>)
 8002202:	f001 fadf 	bl	80037c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_UART_MspInit+0x158>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800220e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002212:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002226:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800223c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002240:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002248:	4825      	ldr	r0, [pc, #148]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800224a:	f000 ff4b 	bl	80030e4 <HAL_DMA_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002254:	f7ff feba 	bl	8001fcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_UART_MspInit+0x154>)
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_UART_MspInit+0x154>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002264:	e031      	b.n	80022ca <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_UART_MspInit+0x15c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d12c      	bne.n	80022ca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 800227a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	6313      	str	r3, [r2, #48]	; 0x30
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_UART_MspInit+0x14c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ba:	2307      	movs	r3, #7
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <HAL_UART_MspInit+0x160>)
 80022c6:	f001 fa7d 	bl	80037c4 <HAL_GPIO_Init>
}
 80022ca:	bf00      	nop
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	2000030c 	.word	0x2000030c
 80022e4:	40026088 	.word	0x40026088
 80022e8:	40004800 	.word	0x40004800
 80022ec:	40020400 	.word	0x40020400

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233c:	f000 f96a 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DMA1_Stream5_IRQHandler+0x10>)
 800234a:	f000 ffd1 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000030c 	.word	0x2000030c

08002358 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <DMA2_Stream0_IRQHandler+0x10>)
 800235e:	f000 ffc7 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000628 	.word	0x20000628

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
	return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_kill>:

int _kill(int pid, int sig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002386:	f002 fdd5 	bl	8004f34 <__errno>
 800238a:	4603      	mov	r3, r0
 800238c:	2216      	movs	r2, #22
 800238e:	601a      	str	r2, [r3, #0]
	return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_exit>:

void _exit (int status)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ae:	e7fe      	b.n	80023ae <_exit+0x12>

080023b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e00a      	b.n	80023d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023c2:	f3af 8000 	nop.w
 80023c6:	4601      	mov	r1, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	b2ca      	uxtb	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf0      	blt.n	80023c2 <_read+0x12>
	}

return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e009      	b.n	8002410 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf1      	blt.n	80023fc <_write+0x12>
	}
	return len;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_close>:

int _close(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244a:	605a      	str	r2, [r3, #4]
	return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_isatty>:

int _isatty(int file)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
	return 1;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	return 0;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f002 fd3a 	bl	8004f34 <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20020000 	.word	0x20020000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	200002f0 	.word	0x200002f0
 80024f4:	20000738 	.word	0x20000738

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002538:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002546:	f7ff ffd7 	bl	80024f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f002 fcf9 	bl	8004f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7fe fcf7 	bl	8000f40 <main>
  bx  lr    
 8002552:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002560:	08008184 	.word	0x08008184
  ldr r2, =_sbss
 8002564:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002568:	20000734 	.word	0x20000734

0800256c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC_IRQHandler>
	...

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_Init+0x40>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_Init+0x40>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x40>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 fd61 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	200f      	movs	r0, #15
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fd18 	bl	8001fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fd79 	bl	80030ca <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f000 fd41 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000000 	.word	0x20000000
 800260c:	20000008 	.word	0x20000008
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008
 8002638:	20000720 	.word	0x20000720

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000720 	.word	0x20000720

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff ffee 	bl	800263c <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffde 	bl	800263c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e033      	b.n	800271a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fcb4 	bl	8002028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026e2:	f023 0302 	bic.w	r3, r3, #2
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa68 	bl	8002bc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
 800270a:	e001      	b.n	8002710 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Start_DMA+0x1e>
 800273e:	2302      	movs	r3, #2
 8002740:	e0e9      	b.n	8002916 <HAL_ADC_Start_DMA+0x1f2>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d018      	beq.n	800278a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002768:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_ADC_Start_DMA+0x1fc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_ADC_Start_DMA+0x200>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0c9a      	lsrs	r2, r3, #18
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800277c:	e002      	b.n	8002784 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	3b01      	subs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f9      	bne.n	800277e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002798:	d107      	bne.n	80027aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 80a1 	bne.w	80028fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f023 0206 	bic.w	r2, r3, #6
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
 8002806:	e002      	b.n	800280e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_ADC_Start_DMA+0x204>)
 8002818:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_ADC_Start_DMA+0x208>)
 8002820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_ADC_Start_DMA+0x20c>)
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4a41      	ldr	r2, [pc, #260]	; (8002934 <HAL_ADC_Start_DMA+0x210>)
 8002830:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800283a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800284a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	334c      	adds	r3, #76	; 0x4c
 8002866:	4619      	mov	r1, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f000 fce8 	bl	8003240 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2b00      	cmp	r3, #0
 800287a:	d12a      	bne.n	80028d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <HAL_ADC_Start_DMA+0x214>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d015      	beq.n	80028b2 <HAL_ADC_Start_DMA+0x18e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_ADC_Start_DMA+0x218>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d105      	bne.n	800289c <HAL_ADC_Start_DMA+0x178>
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_ADC_Start_DMA+0x204>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_ADC_Start_DMA+0x21c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d136      	bne.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_ADC_Start_DMA+0x204>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d130      	bne.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d129      	bne.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e020      	b.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_ADC_Start_DMA+0x214>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d11b      	bne.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d114      	bne.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	e00b      	b.n	8002914 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000
 8002924:	431bde83 	.word	0x431bde83
 8002928:	40012300 	.word	0x40012300
 800292c:	08002dbd 	.word	0x08002dbd
 8002930:	08002e77 	.word	0x08002e77
 8002934:	08002e93 	.word	0x08002e93
 8002938:	40012000 	.word	0x40012000
 800293c:	40012100 	.word	0x40012100
 8002940:	40012200 	.word	0x40012200

08002944 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1c>
 8002998:	2302      	movs	r3, #2
 800299a:	e105      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x228>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d925      	bls.n	80029f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d9      	ldr	r1, [r3, #12]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	3b1e      	subs	r3, #30
 80029c2:	2207      	movs	r2, #7
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68d9      	ldr	r1, [r3, #12]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4403      	add	r3, r0
 80029ea:	3b1e      	subs	r3, #30
 80029ec:	409a      	lsls	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	e022      	b.n	8002a3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6919      	ldr	r1, [r3, #16]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	400a      	ands	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4403      	add	r3, r0
 8002a34:	409a      	lsls	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d824      	bhi.n	8002a90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b05      	subs	r3, #5
 8002a58:	221f      	movs	r2, #31
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	400a      	ands	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b05      	subs	r3, #5
 8002a82:	fa00 f203 	lsl.w	r2, r0, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8e:	e04c      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	d824      	bhi.n	8002ae2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b23      	subs	r3, #35	; 0x23
 8002aaa:	221f      	movs	r2, #31
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b23      	subs	r3, #35	; 0x23
 8002ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae0:	e023      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b41      	subs	r3, #65	; 0x41
 8002af4:	221f      	movs	r2, #31
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b41      	subs	r3, #65	; 0x41
 8002b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_ADC_ConfigChannel+0x234>)
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_ADC_ConfigChannel+0x238>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d109      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1cc>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_ADC_ConfigChannel+0x238>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d123      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x21e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d003      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0x1e6>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d11b      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d111      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_ADC_ConfigChannel+0x23c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_ADC_ConfigChannel+0x240>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9a      	lsrs	r2, r3, #18
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40012300 	.word	0x40012300
 8002bb8:	40012000 	.word	0x40012000
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bcc:	4b79      	ldr	r3, [pc, #484]	; (8002db4 <ADC_Init+0x1f0>)
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <ADC_Init+0x1f4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e00f      	b.n	8002cc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0202 	bic.w	r2, r2, #2
 8002cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7e1b      	ldrb	r3, [r3, #24]
 8002cdc:	005a      	lsls	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	035a      	lsls	r2, r3, #13
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e007      	b.n	8002d38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	051a      	lsls	r2, r3, #20
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7a:	025a      	lsls	r2, r3, #9
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	029a      	lsls	r2, r3, #10
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	0f000001 	.word	0x0f000001

08002dbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13c      	bne.n	8002e50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d12b      	bne.n	8002e48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d127      	bne.n	8002e48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d119      	bne.n	8002e48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0220 	bic.w	r2, r2, #32
 8002e22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fd7b 	bl	8002944 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e4e:	e00e      	b.n	8002e6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fd85 	bl	800296c <HAL_ADC_ErrorCallback>
}
 8002e62:	e004      	b.n	8002e6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff fd67 	bl	8002958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f043 0204 	orr.w	r2, r3, #4
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff fd5a 	bl	800296c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff faa4 	bl	800263c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e099      	b.n	8003234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	e00f      	b.n	8003142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7ff fa8b 	bl	800263c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d908      	bls.n	8003142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e078      	b.n	8003234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e8      	bne.n	8003122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_DMA_Init+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d117      	bne.n	8003206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa6f 	bl	80036cc <DMA_CheckFifoParam>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003202:	2301      	movs	r3, #1
 8003204:	e016      	b.n	8003234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa26 	bl	8003660 <DMA_CalcBaseAndBitshift>
 8003214:	4603      	mov	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	223f      	movs	r2, #63	; 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	f010803f 	.word	0xf010803f

08003240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Start_IT+0x26>
 8003262:	2302      	movs	r3, #2
 8003264:	e040      	b.n	80032e8 <HAL_DMA_Start_IT+0xa8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12f      	bne.n	80032da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9b8 	bl	8003604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	223f      	movs	r2, #63	; 0x3f
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0216 	orr.w	r2, r2, #22
 80032ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e005      	b.n	80032e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_DMA_IRQHandler+0x258>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a92      	ldr	r2, [pc, #584]	; (800354c <HAL_DMA_IRQHandler+0x25c>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2208      	movs	r2, #8
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01a      	beq.n	800335c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2208      	movs	r2, #8
 800334a:	409a      	lsls	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2201      	movs	r2, #1
 8003380:	409a      	lsls	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f043 0202 	orr.w	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2204      	movs	r2, #4
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2204      	movs	r2, #4
 80033b6:	409a      	lsls	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2210      	movs	r2, #16
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d043      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d03c      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2210      	movs	r2, #16
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d108      	bne.n	8003420 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	e01f      	b.n	8003460 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
 8003430:	e016      	b.n	8003460 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0208 	bic.w	r2, r2, #8
 800344e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2220      	movs	r2, #32
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 808e 	beq.w	800358e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8086 	beq.w	800358e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2220      	movs	r2, #32
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b05      	cmp	r3, #5
 8003498:	d136      	bne.n	8003508 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0216 	bic.w	r2, r2, #22
 80034a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_DMA_IRQHandler+0x1da>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0208 	bic.w	r2, r2, #8
 80034d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	223f      	movs	r2, #63	; 0x3f
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d07d      	beq.n	80035fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
        }
        return;
 8003506:	e078      	b.n	80035fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01c      	beq.n	8003550 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	2b00      	cmp	r3, #0
 800352a:	d030      	beq.n	800358e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
 8003534:	e02b      	b.n	800358e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d027      	beq.n	800358e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e022      	b.n	800358e <HAL_DMA_IRQHandler+0x29e>
 8003548:	20000000 	.word	0x20000000
 800354c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0210 	bic.w	r2, r2, #16
 800356c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	2b00      	cmp	r3, #0
 8003594:	d032      	beq.n	80035fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d022      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2205      	movs	r2, #5
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3301      	adds	r3, #1
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d307      	bcc.n	80035d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f2      	bne.n	80035ba <HAL_DMA_IRQHandler+0x2ca>
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e000      	b.n	80035fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80035fa:	bf00      	nop
    }
  }
}
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d108      	bne.n	8003644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003642:	e007      	b.n	8003654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3b10      	subs	r3, #16
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <DMA_CalcBaseAndBitshift+0x68>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d909      	bls.n	80036a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58
 80036a0:	e007      	b.n	80036b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	aaaaaaab 	.word	0xaaaaaaab
 80036c8:	08007d88 	.word	0x08007d88

080036cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11f      	bne.n	8003726 <DMA_CheckFifoParam+0x5a>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d856      	bhi.n	800379a <DMA_CheckFifoParam+0xce>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <DMA_CheckFifoParam+0x28>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003717 	.word	0x08003717
 80036fc:	08003705 	.word	0x08003705
 8003700:	0800379b 	.word	0x0800379b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d046      	beq.n	800379e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e043      	b.n	800379e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800371e:	d140      	bne.n	80037a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e03d      	b.n	80037a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372e:	d121      	bne.n	8003774 <DMA_CheckFifoParam+0xa8>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d837      	bhi.n	80037a6 <DMA_CheckFifoParam+0xda>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <DMA_CheckFifoParam+0x70>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	0800374d 	.word	0x0800374d
 8003740:	08003753 	.word	0x08003753
 8003744:	0800374d 	.word	0x0800374d
 8003748:	08003765 	.word	0x08003765
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e030      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d025      	beq.n	80037aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003762:	e022      	b.n	80037aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003772:	e01c      	b.n	80037ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d903      	bls.n	8003782 <DMA_CheckFifoParam+0xb6>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d003      	beq.n	8003788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003780:	e018      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      break;
 8003786:	e015      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e00b      	b.n	80037b2 <DMA_CheckFifoParam+0xe6>
      break;
 800379a:	bf00      	nop
 800379c:	e00a      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e008      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e006      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
    }
  } 
  
  return status; 
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e16b      	b.n	8003ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 815a 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	2b02      	cmp	r3, #2
 8003814:	d130      	bne.n	8003878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 0201 	and.w	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d017      	beq.n	80038b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d123      	bne.n	8003908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80b4 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a5f      	ldr	r2, [pc, #380]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <HAL_GPIO_Init+0x310>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_GPIO_Init+0x314>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02b      	beq.n	80039ea <HAL_GPIO_Init+0x226>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a51      	ldr	r2, [pc, #324]	; (8003adc <HAL_GPIO_Init+0x318>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d025      	beq.n	80039e6 <HAL_GPIO_Init+0x222>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <HAL_GPIO_Init+0x31c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01f      	beq.n	80039e2 <HAL_GPIO_Init+0x21e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4f      	ldr	r2, [pc, #316]	; (8003ae4 <HAL_GPIO_Init+0x320>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x21a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x216>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4d      	ldr	r2, [pc, #308]	; (8003aec <HAL_GPIO_Init+0x328>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x212>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4c      	ldr	r2, [pc, #304]	; (8003af0 <HAL_GPIO_Init+0x32c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <HAL_GPIO_Init+0x330>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x20a>
 80039ca:	2307      	movs	r3, #7
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ce:	2308      	movs	r3, #8
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x310>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2e:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a34:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae90 	bls.w	80037e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40021400 	.word	0x40021400
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40021c00 	.word	0x40021c00
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b18:	e003      	b.n	8003b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e264      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d075      	beq.n	8003c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4e:	4ba3      	ldr	r3, [pc, #652]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d00c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b9d      	ldr	r3, [pc, #628]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	4b99      	ldr	r3, [pc, #612]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x108>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d157      	bne.n	8003c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e23f      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x74>
 8003b96:	4b91      	ldr	r3, [pc, #580]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x98>
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a8a      	ldr	r2, [pc, #552]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a87      	ldr	r2, [pc, #540]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a83      	ldr	r2, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a80      	ldr	r2, [pc, #512]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe fd28 	bl	800263c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fd24 	bl	800263c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e204      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xc0>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe fd14 	bl	800263c <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe fd10 	bl	800263c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1f0      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0xe8>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c46:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1c4      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4952      	ldr	r1, [pc, #328]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <HAL_RCC_OscConfig+0x2b0>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fcc9 	bl	800263c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe fcc5 	bl	800263c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1a5      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4940      	ldr	r1, [pc, #256]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_OscConfig+0x2b0>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fca8 	bl	800263c <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fe fca4 	bl	800263c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e184      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d030      	beq.n	8003d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x2b4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe fc88 	bl	800263c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe fc84 	bl	800263c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e164      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x200>
 8003d4e:	e015      	b.n	8003d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x2b4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fe fc71 	bl	800263c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fc6d 	bl	800263c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e14d      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a0 	beq.w	8003eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d121      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fc33 	bl	800263c <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e011      	b.n	8003dfe <HAL_RCC_OscConfig+0x2ce>
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	42470000 	.word	0x42470000
 8003de4:	42470e80 	.word	0x42470e80
 8003de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fe fc26 	bl	800263c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e106      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b85      	ldr	r3, [pc, #532]	; (8004014 <HAL_RCC_OscConfig+0x4e4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2f0>
 8003e12:	4b81      	ldr	r3, [pc, #516]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x32a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x312>
 8003e28:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a7a      	ldr	r2, [pc, #488]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
 8003e34:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a77      	ldr	r2, [pc, #476]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	e00b      	b.n	8003e5a <HAL_RCC_OscConfig+0x32a>
 8003e42:	4b75      	ldr	r3, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a74      	ldr	r2, [pc, #464]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	4b72      	ldr	r3, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a71      	ldr	r2, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe fbeb 	bl	800263c <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fbe7 	bl	800263c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0c5      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCC_OscConfig+0x33a>
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8e:	f7fe fbd5 	bl	800263c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe fbd1 	bl	800263c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0af      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	4b5a      	ldr	r3, [pc, #360]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a55      	ldr	r2, [pc, #340]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 809b 	beq.w	800400a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d05c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d141      	bne.n	8003f6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fe fba5 	bl	800263c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fba1 	bl	800263c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e081      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	019b      	lsls	r3, r3, #6
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	4937      	ldr	r1, [pc, #220]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe fb7a 	bl	800263c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe fb76 	bl	800263c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e056      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x41c>
 8003f6a:	e04e      	b.n	800400a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fe fb63 	bl	800263c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fe fb5f 	bl	800263c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e03f      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x44a>
 8003f98:	e037      	b.n	800400a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e032      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d028      	beq.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d11a      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d111      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40007000 	.word	0x40007000
 8004018:	40023800 	.word	0x40023800
 800401c:	42470060 	.word	0x42470060

08004020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0cc      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90c      	bls.n	800405c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e067      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4934      	ldr	r1, [pc, #208]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7fe fa94 	bl	800263c <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fe fa90 	bl	800263c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e04f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d20c      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a6:	f000 f821 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	490a      	ldr	r1, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	5ccb      	ldrb	r3, [r1, r3]
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe f9f4 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08007d70 	.word	0x08007d70
 80041e4:	20000000 	.word	0x20000000
 80041e8:	20000004 	.word	0x20000004

080041ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004204:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d00d      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x40>
 8004210:	2b08      	cmp	r3, #8
 8004212:	f200 80bd 	bhi.w	8004390 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x34>
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x3a>
 800421e:	e0b7      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004222:	60bb      	str	r3, [r7, #8]
       break;
 8004224:	e0b7      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004228:	60bb      	str	r3, [r7, #8]
      break;
 800422a:	e0b4      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800422c:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004234:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004236:	4b5b      	ldr	r3, [pc, #364]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04d      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	461a      	mov	r2, r3
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	ea02 0800 	and.w	r8, r2, r0
 800425a:	ea03 0901 	and.w	r9, r3, r1
 800425e:	4640      	mov	r0, r8
 8004260:	4649      	mov	r1, r9
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	014b      	lsls	r3, r1, #5
 800426c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004270:	0142      	lsls	r2, r0, #5
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	ebb0 0008 	subs.w	r0, r0, r8
 800427a:	eb61 0109 	sbc.w	r1, r1, r9
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	018b      	lsls	r3, r1, #6
 8004288:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428c:	0182      	lsls	r2, r0, #6
 800428e:	1a12      	subs	r2, r2, r0
 8004290:	eb63 0301 	sbc.w	r3, r3, r1
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f04f 0100 	mov.w	r1, #0
 800429c:	00d9      	lsls	r1, r3, #3
 800429e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a2:	00d0      	lsls	r0, r2, #3
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	eb12 0208 	adds.w	r2, r2, r8
 80042ac:	eb43 0309 	adc.w	r3, r3, r9
 80042b0:	f04f 0000 	mov.w	r0, #0
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	0259      	lsls	r1, r3, #9
 80042ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042be:	0250      	lsls	r0, r2, #9
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f7fc fcba 	bl	8000c48 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e04a      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	461a      	mov	r2, r3
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	ea02 0400 	and.w	r4, r2, r0
 80042f6:	ea03 0501 	and.w	r5, r3, r1
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	014b      	lsls	r3, r1, #5
 8004308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800430c:	0142      	lsls	r2, r0, #5
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	1b00      	subs	r0, r0, r4
 8004314:	eb61 0105 	sbc.w	r1, r1, r5
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	018b      	lsls	r3, r1, #6
 8004322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004326:	0182      	lsls	r2, r0, #6
 8004328:	1a12      	subs	r2, r2, r0
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	00d9      	lsls	r1, r3, #3
 8004338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800433c:	00d0      	lsls	r0, r2, #3
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	1912      	adds	r2, r2, r4
 8004344:	eb45 0303 	adc.w	r3, r5, r3
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	0299      	lsls	r1, r3, #10
 8004352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004356:	0290      	lsls	r0, r2, #10
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f7fc fc6e 	bl	8000c48 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	60bb      	str	r3, [r7, #8]
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004392:	60bb      	str	r3, [r7, #8]
      break;
 8004394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004396:	68bb      	ldr	r3, [r7, #8]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a9b      	lsrs	r3, r3, #10
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	08007d80 	.word	0x08007d80

080043f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043f4:	f7ff ffdc 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0b5b      	lsrs	r3, r3, #13
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4903      	ldr	r1, [pc, #12]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40023800 	.word	0x40023800
 8004414:	08007d80 	.word	0x08007d80

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e03f      	b.n	80044aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fea4 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fba1 	bl	8004ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08a      	sub	sp, #40	; 0x28
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d17c      	bne.n	80045cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_Transmit+0x2c>
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e075      	b.n	80045ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Transmit+0x3e>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e06e      	b.n	80045ce <HAL_UART_Transmit+0x11c>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004506:	f7fe f899 	bl	800263c <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d108      	bne.n	8004534 <HAL_UART_Transmit+0x82>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e003      	b.n	800453c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004544:	e02a      	b.n	800459c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f992 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e036      	b.n	80045ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	3302      	adds	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e007      	b.n	800458e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	3301      	adds	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1cf      	bne.n	8004546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2140      	movs	r1, #64	; 0x40
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f962 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d11d      	bne.n	800462c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Receive_DMA+0x26>
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e016      	b.n	800462e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UART_Receive_DMA+0x38>
 800460a:	2302      	movs	r3, #2
 800460c:	e00f      	b.n	800462e <HAL_UART_Receive_DMA+0x58>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	461a      	mov	r2, r3
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f998 	bl	8004958 <UART_Start_Receive_DMA>
 8004628:	4603      	mov	r3, r0
 800462a:	e000      	b.n	800462e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d172      	bne.n	800478c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	2200      	movs	r2, #0
 80046aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	667b      	str	r3, [r7, #100]	; 0x64
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004700:	647a      	str	r2, [r7, #68]	; 0x44
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	623b      	str	r3, [r7, #32]
   return(result);
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472a:	663b      	str	r3, [r7, #96]	; 0x60
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004734:	633a      	str	r2, [r7, #48]	; 0x30
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800473a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	2b01      	cmp	r3, #1
 8004756:	d119      	bne.n	800478c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60fb      	str	r3, [r7, #12]
   return(result);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004778:	61fa      	str	r2, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	617b      	str	r3, [r7, #20]
   return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004798:	4619      	mov	r1, r3
 800479a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800479c:	f7ff ff69 	bl	8004672 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a0:	e002      	b.n	80047a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80047a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047a4:	f7ff ff47 	bl	8004636 <HAL_UART_RxCpltCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3770      	adds	r7, #112	; 0x70
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4619      	mov	r1, r3
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff ff4e 	bl	8004672 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047d6:	e002      	b.n	80047de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff ff36 	bl	800464a <HAL_UART_RxHalfCpltCallback>
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	bf0c      	ite	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	2300      	movne	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b21      	cmp	r3, #33	; 0x21
 8004818:	d108      	bne.n	800482c <UART_DMAError+0x46>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f000 f930 	bl	8004a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b22      	cmp	r3, #34	; 0x22
 800484c:	d108      	bne.n	8004860 <UART_DMAError+0x7a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f000 f93e 	bl	8004adc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f7ff fef6 	bl	800465e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b090      	sub	sp, #64	; 0x40
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e050      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d04c      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <UART_WaitOnFlagUntilTimeout+0x30>
 800489a:	f7fd fecf 	bl	800263c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d241      	bcs.n	800492e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ca:	637a      	str	r2, [r7, #52]	; 0x34
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	613b      	str	r3, [r7, #16]
   return(result);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fe:	623a      	str	r2, [r7, #32]
 8004900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69f9      	ldr	r1, [r7, #28]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	61bb      	str	r3, [r7, #24]
   return(result);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	429a      	cmp	r2, r3
 800494a:	d09f      	beq.n	800488c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3740      	adds	r7, #64	; 0x40
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b098      	sub	sp, #96	; 0x60
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2222      	movs	r2, #34	; 0x22
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	4a3e      	ldr	r2, [pc, #248]	; (8004a80 <UART_Start_Receive_DMA+0x128>)
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <UART_Start_Receive_DMA+0x12c>)
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <UART_Start_Receive_DMA+0x130>)
 8004996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2200      	movs	r2, #0
 800499e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f7fe fc42 	bl	8003240 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e5      	bne.n	80049da <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	657b      	str	r3, [r7, #84]	; 0x54
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e5      	bne.n	8004a0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	617b      	str	r3, [r7, #20]
   return(result);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a58:	653b      	str	r3, [r7, #80]	; 0x50
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a62:	627a      	str	r2, [r7, #36]	; 0x24
 8004a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6a39      	ldr	r1, [r7, #32]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3760      	adds	r7, #96	; 0x60
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	0800468b 	.word	0x0800468b
 8004a84:	080047b1 	.word	0x080047b1
 8004a88:	080047e7 	.word	0x080047e7

08004a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	61ba      	str	r2, [r7, #24]
 8004ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6979      	ldr	r1, [r7, #20]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ad0:	bf00      	nop
 8004ad2:	3724      	adds	r7, #36	; 0x24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b095      	sub	sp, #84	; 0x54
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b04:	643a      	str	r2, [r7, #64]	; 0x40
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d119      	bne.n	8004b88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f023 0310 	bic.w	r3, r3, #16
 8004b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b74:	61ba      	str	r2, [r7, #24]
 8004b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6979      	ldr	r1, [r7, #20]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	613b      	str	r3, [r7, #16]
   return(result);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b96:	bf00      	nop
 8004b98:	3754      	adds	r7, #84	; 0x54
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	b09f      	sub	sp, #124	; 0x7c
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	68d9      	ldr	r1, [r3, #12]
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	ea40 0301 	orr.w	r3, r0, r1
 8004bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be8:	f021 010c 	bic.w	r1, r1, #12
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	6999      	ldr	r1, [r3, #24]
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	ea40 0301 	orr.w	r3, r0, r1
 8004c0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4bc5      	ldr	r3, [pc, #788]	; (8004f28 <UART_SetConfig+0x384>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d004      	beq.n	8004c22 <UART_SetConfig+0x7e>
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4bc3      	ldr	r3, [pc, #780]	; (8004f2c <UART_SetConfig+0x388>)
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d103      	bne.n	8004c2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c22:	f7ff fbe5 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8004c26:	6778      	str	r0, [r7, #116]	; 0x74
 8004c28:	e002      	b.n	8004c30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7ff fbcd 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	f040 80b6 	bne.w	8004da8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3e:	461c      	mov	r4, r3
 8004c40:	f04f 0500 	mov.w	r5, #0
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c54:	1912      	adds	r2, r2, r4
 8004c56:	eb45 0303 	adc.w	r3, r5, r3
 8004c5a:	f04f 0000 	mov.w	r0, #0
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	00d9      	lsls	r1, r3, #3
 8004c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c68:	00d0      	lsls	r0, r2, #3
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	1911      	adds	r1, r2, r4
 8004c70:	6639      	str	r1, [r7, #96]	; 0x60
 8004c72:	416b      	adcs	r3, r5
 8004c74:	667b      	str	r3, [r7, #100]	; 0x64
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c84:	415b      	adcs	r3, r3
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c90:	f7fb ffda 	bl	8000c48 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4ba5      	ldr	r3, [pc, #660]	; (8004f30 <UART_SetConfig+0x38c>)
 8004c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	011e      	lsls	r6, r3, #4
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	f04f 0500 	mov.w	r5, #0
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cba:	1912      	adds	r2, r2, r4
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	00d9      	lsls	r1, r3, #3
 8004cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cce:	00d0      	lsls	r0, r2, #3
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	1911      	adds	r1, r2, r4
 8004cd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cd8:	416b      	adcs	r3, r5
 8004cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cea:	415b      	adcs	r3, r3
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cf6:	f7fb ffa7 	bl	8000c48 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b8c      	ldr	r3, [pc, #560]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d00:	fba3 1302 	umull	r1, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	2164      	movs	r1, #100	; 0x64
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3332      	adds	r3, #50	; 0x32
 8004d12:	4a87      	ldr	r2, [pc, #540]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d20:	441e      	add	r6, r3
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	4618      	mov	r0, r3
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	1894      	adds	r4, r2, r2
 8004d30:	623c      	str	r4, [r7, #32]
 8004d32:	415b      	adcs	r3, r3
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
 8004d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d3a:	1812      	adds	r2, r2, r0
 8004d3c:	eb41 0303 	adc.w	r3, r1, r3
 8004d40:	f04f 0400 	mov.w	r4, #0
 8004d44:	f04f 0500 	mov.w	r5, #0
 8004d48:	00dd      	lsls	r5, r3, #3
 8004d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d4e:	00d4      	lsls	r4, r2, #3
 8004d50:	4622      	mov	r2, r4
 8004d52:	462b      	mov	r3, r5
 8004d54:	1814      	adds	r4, r2, r0
 8004d56:	653c      	str	r4, [r7, #80]	; 0x50
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	1891      	adds	r1, r2, r2
 8004d68:	61b9      	str	r1, [r7, #24]
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d76:	f7fb ff67 	bl	8000c48 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b6c      	ldr	r3, [pc, #432]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a67      	ldr	r2, [pc, #412]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4432      	add	r2, r6
 8004da4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da6:	e0b9      	b.n	8004f1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	461c      	mov	r4, r3
 8004dac:	f04f 0500 	mov.w	r5, #0
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	6139      	str	r1, [r7, #16]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dc0:	1912      	adds	r2, r2, r4
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	00d9      	lsls	r1, r3, #3
 8004dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd4:	00d0      	lsls	r0, r2, #3
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	eb12 0804 	adds.w	r8, r2, r4
 8004dde:	eb43 0905 	adc.w	r9, r3, r5
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dfa:	0082      	lsls	r2, r0, #2
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb ff22 	bl	8000c48 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b49      	ldr	r3, [pc, #292]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011e      	lsls	r6, r3, #4
 8004e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e14:	4618      	mov	r0, r3
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	1894      	adds	r4, r2, r2
 8004e20:	60bc      	str	r4, [r7, #8]
 8004e22:	415b      	adcs	r3, r3
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2a:	1812      	adds	r2, r2, r0
 8004e2c:	eb41 0303 	adc.w	r3, r1, r3
 8004e30:	f04f 0400 	mov.w	r4, #0
 8004e34:	f04f 0500 	mov.w	r5, #0
 8004e38:	00dd      	lsls	r5, r3, #3
 8004e3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e3e:	00d4      	lsls	r4, r2, #3
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	1814      	adds	r4, r2, r0
 8004e46:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e48:	414b      	adcs	r3, r1
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e64:	0082      	lsls	r2, r0, #2
 8004e66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e6a:	f7fb feed 	bl	8000c48 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	441e      	add	r6, r3
 8004e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e96:	4618      	mov	r0, r3
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	1894      	adds	r4, r2, r2
 8004ea2:	603c      	str	r4, [r7, #0]
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eac:	1812      	adds	r2, r2, r0
 8004eae:	eb41 0303 	adc.w	r3, r1, r3
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	f04f 0500 	mov.w	r5, #0
 8004eba:	00dd      	lsls	r5, r3, #3
 8004ebc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ec0:	00d4      	lsls	r4, r2, #3
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	eb12 0a00 	adds.w	sl, r2, r0
 8004eca:	eb43 0b01 	adc.w	fp, r3, r1
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	008b      	lsls	r3, r1, #2
 8004ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ee6:	0082      	lsls	r2, r0, #2
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb feac 	bl	8000c48 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <UART_SetConfig+0x38c>)
 8004ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2164      	movs	r1, #100	; 0x64
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	3332      	adds	r3, #50	; 0x32
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <UART_SetConfig+0x38c>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4432      	add	r2, r6
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	377c      	adds	r7, #124	; 0x7c
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40011000 	.word	0x40011000
 8004f2c:	40011400 	.word	0x40011400
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <__errno>:
 8004f34:	4b01      	ldr	r3, [pc, #4]	; (8004f3c <__errno+0x8>)
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	2000000c 	.word	0x2000000c

08004f40 <__libc_init_array>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4d0d      	ldr	r5, [pc, #52]	; (8004f78 <__libc_init_array+0x38>)
 8004f44:	4c0d      	ldr	r4, [pc, #52]	; (8004f7c <__libc_init_array+0x3c>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	42a6      	cmp	r6, r4
 8004f4e:	d109      	bne.n	8004f64 <__libc_init_array+0x24>
 8004f50:	4d0b      	ldr	r5, [pc, #44]	; (8004f80 <__libc_init_array+0x40>)
 8004f52:	4c0c      	ldr	r4, [pc, #48]	; (8004f84 <__libc_init_array+0x44>)
 8004f54:	f002 feb6 	bl	8007cc4 <_init>
 8004f58:	1b64      	subs	r4, r4, r5
 8004f5a:	10a4      	asrs	r4, r4, #2
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	42a6      	cmp	r6, r4
 8004f60:	d105      	bne.n	8004f6e <__libc_init_array+0x2e>
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f68:	4798      	blx	r3
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	e7ee      	b.n	8004f4c <__libc_init_array+0xc>
 8004f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f72:	4798      	blx	r3
 8004f74:	3601      	adds	r6, #1
 8004f76:	e7f2      	b.n	8004f5e <__libc_init_array+0x1e>
 8004f78:	0800817c 	.word	0x0800817c
 8004f7c:	0800817c 	.word	0x0800817c
 8004f80:	0800817c 	.word	0x0800817c
 8004f84:	08008180 	.word	0x08008180

08004f88 <memset>:
 8004f88:	4402      	add	r2, r0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	f803 1b01 	strb.w	r1, [r3], #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <__cvt>:
 8004f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	ec55 4b10 	vmov	r4, r5, d0
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	bfbb      	ittet	lt
 8004faa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fae:	461d      	movlt	r5, r3
 8004fb0:	2300      	movge	r3, #0
 8004fb2:	232d      	movlt	r3, #45	; 0x2d
 8004fb4:	700b      	strb	r3, [r1, #0]
 8004fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fbc:	4691      	mov	r9, r2
 8004fbe:	f023 0820 	bic.w	r8, r3, #32
 8004fc2:	bfbc      	itt	lt
 8004fc4:	4622      	movlt	r2, r4
 8004fc6:	4614      	movlt	r4, r2
 8004fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fcc:	d005      	beq.n	8004fda <__cvt+0x42>
 8004fce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fd2:	d100      	bne.n	8004fd6 <__cvt+0x3e>
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	e000      	b.n	8004fdc <__cvt+0x44>
 8004fda:	2103      	movs	r1, #3
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	ab02      	add	r3, sp, #8
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	ec45 4b10 	vmov	d0, r4, r5
 8004fe8:	4653      	mov	r3, sl
 8004fea:	4632      	mov	r2, r6
 8004fec:	f000 fcec 	bl	80059c8 <_dtoa_r>
 8004ff0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	d102      	bne.n	8004ffe <__cvt+0x66>
 8004ff8:	f019 0f01 	tst.w	r9, #1
 8004ffc:	d022      	beq.n	8005044 <__cvt+0xac>
 8004ffe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005002:	eb07 0906 	add.w	r9, r7, r6
 8005006:	d110      	bne.n	800502a <__cvt+0x92>
 8005008:	783b      	ldrb	r3, [r7, #0]
 800500a:	2b30      	cmp	r3, #48	; 0x30
 800500c:	d10a      	bne.n	8005024 <__cvt+0x8c>
 800500e:	2200      	movs	r2, #0
 8005010:	2300      	movs	r3, #0
 8005012:	4620      	mov	r0, r4
 8005014:	4629      	mov	r1, r5
 8005016:	f7fb fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800501a:	b918      	cbnz	r0, 8005024 <__cvt+0x8c>
 800501c:	f1c6 0601 	rsb	r6, r6, #1
 8005020:	f8ca 6000 	str.w	r6, [sl]
 8005024:	f8da 3000 	ldr.w	r3, [sl]
 8005028:	4499      	add	r9, r3
 800502a:	2200      	movs	r2, #0
 800502c:	2300      	movs	r3, #0
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8005036:	b108      	cbz	r0, 800503c <__cvt+0xa4>
 8005038:	f8cd 900c 	str.w	r9, [sp, #12]
 800503c:	2230      	movs	r2, #48	; 0x30
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	454b      	cmp	r3, r9
 8005042:	d307      	bcc.n	8005054 <__cvt+0xbc>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005048:	1bdb      	subs	r3, r3, r7
 800504a:	4638      	mov	r0, r7
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	b004      	add	sp, #16
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	9103      	str	r1, [sp, #12]
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e7f0      	b.n	800503e <__cvt+0xa6>

0800505c <__exponent>:
 800505c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505e:	4603      	mov	r3, r0
 8005060:	2900      	cmp	r1, #0
 8005062:	bfb8      	it	lt
 8005064:	4249      	neglt	r1, r1
 8005066:	f803 2b02 	strb.w	r2, [r3], #2
 800506a:	bfb4      	ite	lt
 800506c:	222d      	movlt	r2, #45	; 0x2d
 800506e:	222b      	movge	r2, #43	; 0x2b
 8005070:	2909      	cmp	r1, #9
 8005072:	7042      	strb	r2, [r0, #1]
 8005074:	dd2a      	ble.n	80050cc <__exponent+0x70>
 8005076:	f10d 0407 	add.w	r4, sp, #7
 800507a:	46a4      	mov	ip, r4
 800507c:	270a      	movs	r7, #10
 800507e:	46a6      	mov	lr, r4
 8005080:	460a      	mov	r2, r1
 8005082:	fb91 f6f7 	sdiv	r6, r1, r7
 8005086:	fb07 1516 	mls	r5, r7, r6, r1
 800508a:	3530      	adds	r5, #48	; 0x30
 800508c:	2a63      	cmp	r2, #99	; 0x63
 800508e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005092:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005096:	4631      	mov	r1, r6
 8005098:	dcf1      	bgt.n	800507e <__exponent+0x22>
 800509a:	3130      	adds	r1, #48	; 0x30
 800509c:	f1ae 0502 	sub.w	r5, lr, #2
 80050a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050a4:	1c44      	adds	r4, r0, #1
 80050a6:	4629      	mov	r1, r5
 80050a8:	4561      	cmp	r1, ip
 80050aa:	d30a      	bcc.n	80050c2 <__exponent+0x66>
 80050ac:	f10d 0209 	add.w	r2, sp, #9
 80050b0:	eba2 020e 	sub.w	r2, r2, lr
 80050b4:	4565      	cmp	r5, ip
 80050b6:	bf88      	it	hi
 80050b8:	2200      	movhi	r2, #0
 80050ba:	4413      	add	r3, r2
 80050bc:	1a18      	subs	r0, r3, r0
 80050be:	b003      	add	sp, #12
 80050c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050ca:	e7ed      	b.n	80050a8 <__exponent+0x4c>
 80050cc:	2330      	movs	r3, #48	; 0x30
 80050ce:	3130      	adds	r1, #48	; 0x30
 80050d0:	7083      	strb	r3, [r0, #2]
 80050d2:	70c1      	strb	r1, [r0, #3]
 80050d4:	1d03      	adds	r3, r0, #4
 80050d6:	e7f1      	b.n	80050bc <__exponent+0x60>

080050d8 <_printf_float>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ed2d 8b02 	vpush	{d8}
 80050e0:	b08d      	sub	sp, #52	; 0x34
 80050e2:	460c      	mov	r4, r1
 80050e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050e8:	4616      	mov	r6, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	4605      	mov	r5, r0
 80050ee:	f001 fa57 	bl	80065a0 <_localeconv_r>
 80050f2:	f8d0 a000 	ldr.w	sl, [r0]
 80050f6:	4650      	mov	r0, sl
 80050f8:	f7fb f86a 	bl	80001d0 <strlen>
 80050fc:	2300      	movs	r3, #0
 80050fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	f8d8 3000 	ldr.w	r3, [r8]
 8005108:	f894 b018 	ldrb.w	fp, [r4, #24]
 800510c:	3307      	adds	r3, #7
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	f8c8 2000 	str.w	r2, [r8]
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005122:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005126:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005130:	ee08 0a10 	vmov	s16, r0
 8005134:	4b9f      	ldr	r3, [pc, #636]	; (80053b4 <_printf_float+0x2dc>)
 8005136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	f7fb fcf5 	bl	8000b2c <__aeabi_dcmpun>
 8005142:	bb88      	cbnz	r0, 80051a8 <_printf_float+0xd0>
 8005144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005148:	4b9a      	ldr	r3, [pc, #616]	; (80053b4 <_printf_float+0x2dc>)
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	f7fb fccf 	bl	8000af0 <__aeabi_dcmple>
 8005152:	bb48      	cbnz	r0, 80051a8 <_printf_float+0xd0>
 8005154:	2200      	movs	r2, #0
 8005156:	2300      	movs	r3, #0
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb fcbe 	bl	8000adc <__aeabi_dcmplt>
 8005160:	b110      	cbz	r0, 8005168 <_printf_float+0x90>
 8005162:	232d      	movs	r3, #45	; 0x2d
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	4b93      	ldr	r3, [pc, #588]	; (80053b8 <_printf_float+0x2e0>)
 800516a:	4894      	ldr	r0, [pc, #592]	; (80053bc <_printf_float+0x2e4>)
 800516c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005170:	bf94      	ite	ls
 8005172:	4698      	movls	r8, r3
 8005174:	4680      	movhi	r8, r0
 8005176:	2303      	movs	r3, #3
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	9b05      	ldr	r3, [sp, #20]
 800517c:	f023 0204 	bic.w	r2, r3, #4
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	f04f 0900 	mov.w	r9, #0
 8005186:	9700      	str	r7, [sp, #0]
 8005188:	4633      	mov	r3, r6
 800518a:	aa0b      	add	r2, sp, #44	; 0x2c
 800518c:	4621      	mov	r1, r4
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f9d8 	bl	8005544 <_printf_common>
 8005194:	3001      	adds	r0, #1
 8005196:	f040 8090 	bne.w	80052ba <_printf_float+0x1e2>
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	b00d      	add	sp, #52	; 0x34
 80051a0:	ecbd 8b02 	vpop	{d8}
 80051a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	4649      	mov	r1, r9
 80051b0:	f7fb fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80051b4:	b140      	cbz	r0, 80051c8 <_printf_float+0xf0>
 80051b6:	464b      	mov	r3, r9
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bfbc      	itt	lt
 80051bc:	232d      	movlt	r3, #45	; 0x2d
 80051be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051c2:	487f      	ldr	r0, [pc, #508]	; (80053c0 <_printf_float+0x2e8>)
 80051c4:	4b7f      	ldr	r3, [pc, #508]	; (80053c4 <_printf_float+0x2ec>)
 80051c6:	e7d1      	b.n	800516c <_printf_float+0x94>
 80051c8:	6863      	ldr	r3, [r4, #4]
 80051ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051ce:	9206      	str	r2, [sp, #24]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	d13f      	bne.n	8005254 <_printf_float+0x17c>
 80051d4:	2306      	movs	r3, #6
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	6861      	ldr	r1, [r4, #4]
 80051dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051e0:	2300      	movs	r3, #0
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	ab0a      	add	r3, sp, #40	; 0x28
 80051e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051ea:	ab09      	add	r3, sp, #36	; 0x24
 80051ec:	ec49 8b10 	vmov	d0, r8, r9
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6022      	str	r2, [r4, #0]
 80051f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051f8:	4628      	mov	r0, r5
 80051fa:	f7ff fecd 	bl	8004f98 <__cvt>
 80051fe:	9b06      	ldr	r3, [sp, #24]
 8005200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005202:	2b47      	cmp	r3, #71	; 0x47
 8005204:	4680      	mov	r8, r0
 8005206:	d108      	bne.n	800521a <_printf_float+0x142>
 8005208:	1cc8      	adds	r0, r1, #3
 800520a:	db02      	blt.n	8005212 <_printf_float+0x13a>
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	4299      	cmp	r1, r3
 8005210:	dd41      	ble.n	8005296 <_printf_float+0x1be>
 8005212:	f1ab 0b02 	sub.w	fp, fp, #2
 8005216:	fa5f fb8b 	uxtb.w	fp, fp
 800521a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800521e:	d820      	bhi.n	8005262 <_printf_float+0x18a>
 8005220:	3901      	subs	r1, #1
 8005222:	465a      	mov	r2, fp
 8005224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005228:	9109      	str	r1, [sp, #36]	; 0x24
 800522a:	f7ff ff17 	bl	800505c <__exponent>
 800522e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005230:	1813      	adds	r3, r2, r0
 8005232:	2a01      	cmp	r2, #1
 8005234:	4681      	mov	r9, r0
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	dc02      	bgt.n	8005240 <_printf_float+0x168>
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	07d2      	lsls	r2, r2, #31
 800523e:	d501      	bpl.n	8005244 <_printf_float+0x16c>
 8005240:	3301      	adds	r3, #1
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005248:	2b00      	cmp	r3, #0
 800524a:	d09c      	beq.n	8005186 <_printf_float+0xae>
 800524c:	232d      	movs	r3, #45	; 0x2d
 800524e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005252:	e798      	b.n	8005186 <_printf_float+0xae>
 8005254:	9a06      	ldr	r2, [sp, #24]
 8005256:	2a47      	cmp	r2, #71	; 0x47
 8005258:	d1be      	bne.n	80051d8 <_printf_float+0x100>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1bc      	bne.n	80051d8 <_printf_float+0x100>
 800525e:	2301      	movs	r3, #1
 8005260:	e7b9      	b.n	80051d6 <_printf_float+0xfe>
 8005262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005266:	d118      	bne.n	800529a <_printf_float+0x1c2>
 8005268:	2900      	cmp	r1, #0
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	dd0b      	ble.n	8005286 <_printf_float+0x1ae>
 800526e:	6121      	str	r1, [r4, #16]
 8005270:	b913      	cbnz	r3, 8005278 <_printf_float+0x1a0>
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	07d0      	lsls	r0, r2, #31
 8005276:	d502      	bpl.n	800527e <_printf_float+0x1a6>
 8005278:	3301      	adds	r3, #1
 800527a:	440b      	add	r3, r1
 800527c:	6123      	str	r3, [r4, #16]
 800527e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005280:	f04f 0900 	mov.w	r9, #0
 8005284:	e7de      	b.n	8005244 <_printf_float+0x16c>
 8005286:	b913      	cbnz	r3, 800528e <_printf_float+0x1b6>
 8005288:	6822      	ldr	r2, [r4, #0]
 800528a:	07d2      	lsls	r2, r2, #31
 800528c:	d501      	bpl.n	8005292 <_printf_float+0x1ba>
 800528e:	3302      	adds	r3, #2
 8005290:	e7f4      	b.n	800527c <_printf_float+0x1a4>
 8005292:	2301      	movs	r3, #1
 8005294:	e7f2      	b.n	800527c <_printf_float+0x1a4>
 8005296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800529a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529c:	4299      	cmp	r1, r3
 800529e:	db05      	blt.n	80052ac <_printf_float+0x1d4>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	6121      	str	r1, [r4, #16]
 80052a4:	07d8      	lsls	r0, r3, #31
 80052a6:	d5ea      	bpl.n	800527e <_printf_float+0x1a6>
 80052a8:	1c4b      	adds	r3, r1, #1
 80052aa:	e7e7      	b.n	800527c <_printf_float+0x1a4>
 80052ac:	2900      	cmp	r1, #0
 80052ae:	bfd4      	ite	le
 80052b0:	f1c1 0202 	rsble	r2, r1, #2
 80052b4:	2201      	movgt	r2, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	e7e0      	b.n	800527c <_printf_float+0x1a4>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	055a      	lsls	r2, r3, #21
 80052be:	d407      	bmi.n	80052d0 <_printf_float+0x1f8>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	4642      	mov	r2, r8
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	d12c      	bne.n	8005328 <_printf_float+0x250>
 80052ce:	e764      	b.n	800519a <_printf_float+0xc2>
 80052d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052d4:	f240 80e0 	bls.w	8005498 <_printf_float+0x3c0>
 80052d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	f7fb fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d034      	beq.n	8005352 <_printf_float+0x27a>
 80052e8:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <_printf_float+0x2f0>)
 80052ea:	2301      	movs	r3, #1
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f af51 	beq.w	800519a <_printf_float+0xc2>
 80052f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052fc:	429a      	cmp	r2, r3
 80052fe:	db02      	blt.n	8005306 <_printf_float+0x22e>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07d8      	lsls	r0, r3, #31
 8005304:	d510      	bpl.n	8005328 <_printf_float+0x250>
 8005306:	ee18 3a10 	vmov	r3, s16
 800530a:	4652      	mov	r2, sl
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	f43f af41 	beq.w	800519a <_printf_float+0xc2>
 8005318:	f04f 0800 	mov.w	r8, #0
 800531c:	f104 091a 	add.w	r9, r4, #26
 8005320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	4543      	cmp	r3, r8
 8005326:	dc09      	bgt.n	800533c <_printf_float+0x264>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	079b      	lsls	r3, r3, #30
 800532c:	f100 8105 	bmi.w	800553a <_printf_float+0x462>
 8005330:	68e0      	ldr	r0, [r4, #12]
 8005332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005334:	4298      	cmp	r0, r3
 8005336:	bfb8      	it	lt
 8005338:	4618      	movlt	r0, r3
 800533a:	e730      	b.n	800519e <_printf_float+0xc6>
 800533c:	2301      	movs	r3, #1
 800533e:	464a      	mov	r2, r9
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	f43f af27 	beq.w	800519a <_printf_float+0xc2>
 800534c:	f108 0801 	add.w	r8, r8, #1
 8005350:	e7e6      	b.n	8005320 <_printf_float+0x248>
 8005352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	dc39      	bgt.n	80053cc <_printf_float+0x2f4>
 8005358:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <_printf_float+0x2f0>)
 800535a:	2301      	movs	r3, #1
 800535c:	4631      	mov	r1, r6
 800535e:	4628      	mov	r0, r5
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	f43f af19 	beq.w	800519a <_printf_float+0xc2>
 8005368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800536c:	4313      	orrs	r3, r2
 800536e:	d102      	bne.n	8005376 <_printf_float+0x29e>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d5d8      	bpl.n	8005328 <_printf_float+0x250>
 8005376:	ee18 3a10 	vmov	r3, s16
 800537a:	4652      	mov	r2, sl
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	f43f af09 	beq.w	800519a <_printf_float+0xc2>
 8005388:	f04f 0900 	mov.w	r9, #0
 800538c:	f104 0a1a 	add.w	sl, r4, #26
 8005390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005392:	425b      	negs	r3, r3
 8005394:	454b      	cmp	r3, r9
 8005396:	dc01      	bgt.n	800539c <_printf_float+0x2c4>
 8005398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539a:	e792      	b.n	80052c2 <_printf_float+0x1ea>
 800539c:	2301      	movs	r3, #1
 800539e:	4652      	mov	r2, sl
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f aef7 	beq.w	800519a <_printf_float+0xc2>
 80053ac:	f109 0901 	add.w	r9, r9, #1
 80053b0:	e7ee      	b.n	8005390 <_printf_float+0x2b8>
 80053b2:	bf00      	nop
 80053b4:	7fefffff 	.word	0x7fefffff
 80053b8:	08007d94 	.word	0x08007d94
 80053bc:	08007d98 	.word	0x08007d98
 80053c0:	08007da0 	.word	0x08007da0
 80053c4:	08007d9c 	.word	0x08007d9c
 80053c8:	08007da4 	.word	0x08007da4
 80053cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053d0:	429a      	cmp	r2, r3
 80053d2:	bfa8      	it	ge
 80053d4:	461a      	movge	r2, r3
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	4691      	mov	r9, r2
 80053da:	dc37      	bgt.n	800544c <_printf_float+0x374>
 80053dc:	f04f 0b00 	mov.w	fp, #0
 80053e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053e4:	f104 021a 	add.w	r2, r4, #26
 80053e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ea:	9305      	str	r3, [sp, #20]
 80053ec:	eba3 0309 	sub.w	r3, r3, r9
 80053f0:	455b      	cmp	r3, fp
 80053f2:	dc33      	bgt.n	800545c <_printf_float+0x384>
 80053f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f8:	429a      	cmp	r2, r3
 80053fa:	db3b      	blt.n	8005474 <_printf_float+0x39c>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	07da      	lsls	r2, r3, #31
 8005400:	d438      	bmi.n	8005474 <_printf_float+0x39c>
 8005402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005404:	9b05      	ldr	r3, [sp, #20]
 8005406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	eba2 0901 	sub.w	r9, r2, r1
 800540e:	4599      	cmp	r9, r3
 8005410:	bfa8      	it	ge
 8005412:	4699      	movge	r9, r3
 8005414:	f1b9 0f00 	cmp.w	r9, #0
 8005418:	dc35      	bgt.n	8005486 <_printf_float+0x3ae>
 800541a:	f04f 0800 	mov.w	r8, #0
 800541e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005422:	f104 0a1a 	add.w	sl, r4, #26
 8005426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	eba3 0309 	sub.w	r3, r3, r9
 8005430:	4543      	cmp	r3, r8
 8005432:	f77f af79 	ble.w	8005328 <_printf_float+0x250>
 8005436:	2301      	movs	r3, #1
 8005438:	4652      	mov	r2, sl
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	f43f aeaa 	beq.w	800519a <_printf_float+0xc2>
 8005446:	f108 0801 	add.w	r8, r8, #1
 800544a:	e7ec      	b.n	8005426 <_printf_float+0x34e>
 800544c:	4613      	mov	r3, r2
 800544e:	4631      	mov	r1, r6
 8005450:	4642      	mov	r2, r8
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	d1c0      	bne.n	80053dc <_printf_float+0x304>
 800545a:	e69e      	b.n	800519a <_printf_float+0xc2>
 800545c:	2301      	movs	r3, #1
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	9205      	str	r2, [sp, #20]
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	f43f ae97 	beq.w	800519a <_printf_float+0xc2>
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	f10b 0b01 	add.w	fp, fp, #1
 8005472:	e7b9      	b.n	80053e8 <_printf_float+0x310>
 8005474:	ee18 3a10 	vmov	r3, s16
 8005478:	4652      	mov	r2, sl
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	d1be      	bne.n	8005402 <_printf_float+0x32a>
 8005484:	e689      	b.n	800519a <_printf_float+0xc2>
 8005486:	9a05      	ldr	r2, [sp, #20]
 8005488:	464b      	mov	r3, r9
 800548a:	4442      	add	r2, r8
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	d1c1      	bne.n	800541a <_printf_float+0x342>
 8005496:	e680      	b.n	800519a <_printf_float+0xc2>
 8005498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800549a:	2a01      	cmp	r2, #1
 800549c:	dc01      	bgt.n	80054a2 <_printf_float+0x3ca>
 800549e:	07db      	lsls	r3, r3, #31
 80054a0:	d538      	bpl.n	8005514 <_printf_float+0x43c>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4642      	mov	r2, r8
 80054a6:	4631      	mov	r1, r6
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	f43f ae74 	beq.w	800519a <_printf_float+0xc2>
 80054b2:	ee18 3a10 	vmov	r3, s16
 80054b6:	4652      	mov	r2, sl
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b8      	blx	r7
 80054be:	3001      	adds	r0, #1
 80054c0:	f43f ae6b 	beq.w	800519a <_printf_float+0xc2>
 80054c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c8:	2200      	movs	r2, #0
 80054ca:	2300      	movs	r3, #0
 80054cc:	f7fb fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d0:	b9d8      	cbnz	r0, 800550a <_printf_float+0x432>
 80054d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d4:	f108 0201 	add.w	r2, r8, #1
 80054d8:	3b01      	subs	r3, #1
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	d10e      	bne.n	8005502 <_printf_float+0x42a>
 80054e4:	e659      	b.n	800519a <_printf_float+0xc2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4652      	mov	r2, sl
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f ae52 	beq.w	800519a <_printf_float+0xc2>
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fc:	3b01      	subs	r3, #1
 80054fe:	4543      	cmp	r3, r8
 8005500:	dcf1      	bgt.n	80054e6 <_printf_float+0x40e>
 8005502:	464b      	mov	r3, r9
 8005504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005508:	e6dc      	b.n	80052c4 <_printf_float+0x1ec>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	f104 0a1a 	add.w	sl, r4, #26
 8005512:	e7f2      	b.n	80054fa <_printf_float+0x422>
 8005514:	2301      	movs	r3, #1
 8005516:	4642      	mov	r2, r8
 8005518:	e7df      	b.n	80054da <_printf_float+0x402>
 800551a:	2301      	movs	r3, #1
 800551c:	464a      	mov	r2, r9
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f ae38 	beq.w	800519a <_printf_float+0xc2>
 800552a:	f108 0801 	add.w	r8, r8, #1
 800552e:	68e3      	ldr	r3, [r4, #12]
 8005530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	4543      	cmp	r3, r8
 8005536:	dcf0      	bgt.n	800551a <_printf_float+0x442>
 8005538:	e6fa      	b.n	8005330 <_printf_float+0x258>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	f104 0919 	add.w	r9, r4, #25
 8005542:	e7f4      	b.n	800552e <_printf_float+0x456>

08005544 <_printf_common>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	4616      	mov	r6, r2
 800554a:	4699      	mov	r9, r3
 800554c:	688a      	ldr	r2, [r1, #8]
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005554:	4293      	cmp	r3, r2
 8005556:	bfb8      	it	lt
 8005558:	4613      	movlt	r3, r2
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005560:	4607      	mov	r7, r0
 8005562:	460c      	mov	r4, r1
 8005564:	b10a      	cbz	r2, 800556a <_printf_common+0x26>
 8005566:	3301      	adds	r3, #1
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	0699      	lsls	r1, r3, #26
 800556e:	bf42      	ittt	mi
 8005570:	6833      	ldrmi	r3, [r6, #0]
 8005572:	3302      	addmi	r3, #2
 8005574:	6033      	strmi	r3, [r6, #0]
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	f015 0506 	ands.w	r5, r5, #6
 800557c:	d106      	bne.n	800558c <_printf_common+0x48>
 800557e:	f104 0a19 	add.w	sl, r4, #25
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	6832      	ldr	r2, [r6, #0]
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	42ab      	cmp	r3, r5
 800558a:	dc26      	bgt.n	80055da <_printf_common+0x96>
 800558c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005590:	1e13      	subs	r3, r2, #0
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	0692      	lsls	r2, r2, #26
 800559a:	d42b      	bmi.n	80055f4 <_printf_common+0xb0>
 800559c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a0:	4649      	mov	r1, r9
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	3001      	adds	r0, #1
 80055a8:	d01e      	beq.n	80055e8 <_printf_common+0xa4>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	68e5      	ldr	r5, [r4, #12]
 80055ae:	6832      	ldr	r2, [r6, #0]
 80055b0:	f003 0306 	and.w	r3, r3, #6
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	bf08      	it	eq
 80055b8:	1aad      	subeq	r5, r5, r2
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	6922      	ldr	r2, [r4, #16]
 80055be:	bf0c      	ite	eq
 80055c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c4:	2500      	movne	r5, #0
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bfc4      	itt	gt
 80055ca:	1a9b      	subgt	r3, r3, r2
 80055cc:	18ed      	addgt	r5, r5, r3
 80055ce:	2600      	movs	r6, #0
 80055d0:	341a      	adds	r4, #26
 80055d2:	42b5      	cmp	r5, r6
 80055d4:	d11a      	bne.n	800560c <_printf_common+0xc8>
 80055d6:	2000      	movs	r0, #0
 80055d8:	e008      	b.n	80055ec <_printf_common+0xa8>
 80055da:	2301      	movs	r3, #1
 80055dc:	4652      	mov	r2, sl
 80055de:	4649      	mov	r1, r9
 80055e0:	4638      	mov	r0, r7
 80055e2:	47c0      	blx	r8
 80055e4:	3001      	adds	r0, #1
 80055e6:	d103      	bne.n	80055f0 <_printf_common+0xac>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	3501      	adds	r5, #1
 80055f2:	e7c6      	b.n	8005582 <_printf_common+0x3e>
 80055f4:	18e1      	adds	r1, r4, r3
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	2030      	movs	r0, #48	; 0x30
 80055fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fe:	4422      	add	r2, r4
 8005600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005608:	3302      	adds	r3, #2
 800560a:	e7c7      	b.n	800559c <_printf_common+0x58>
 800560c:	2301      	movs	r3, #1
 800560e:	4622      	mov	r2, r4
 8005610:	4649      	mov	r1, r9
 8005612:	4638      	mov	r0, r7
 8005614:	47c0      	blx	r8
 8005616:	3001      	adds	r0, #1
 8005618:	d0e6      	beq.n	80055e8 <_printf_common+0xa4>
 800561a:	3601      	adds	r6, #1
 800561c:	e7d9      	b.n	80055d2 <_printf_common+0x8e>
	...

08005620 <_printf_i>:
 8005620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	4691      	mov	r9, r2
 8005628:	7e27      	ldrb	r7, [r4, #24]
 800562a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800562c:	2f78      	cmp	r7, #120	; 0x78
 800562e:	4680      	mov	r8, r0
 8005630:	469a      	mov	sl, r3
 8005632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005636:	d807      	bhi.n	8005648 <_printf_i+0x28>
 8005638:	2f62      	cmp	r7, #98	; 0x62
 800563a:	d80a      	bhi.n	8005652 <_printf_i+0x32>
 800563c:	2f00      	cmp	r7, #0
 800563e:	f000 80d8 	beq.w	80057f2 <_printf_i+0x1d2>
 8005642:	2f58      	cmp	r7, #88	; 0x58
 8005644:	f000 80a3 	beq.w	800578e <_printf_i+0x16e>
 8005648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800564c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005650:	e03a      	b.n	80056c8 <_printf_i+0xa8>
 8005652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005656:	2b15      	cmp	r3, #21
 8005658:	d8f6      	bhi.n	8005648 <_printf_i+0x28>
 800565a:	a001      	add	r0, pc, #4	; (adr r0, 8005660 <_printf_i+0x40>)
 800565c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005660:	080056b9 	.word	0x080056b9
 8005664:	080056cd 	.word	0x080056cd
 8005668:	08005649 	.word	0x08005649
 800566c:	08005649 	.word	0x08005649
 8005670:	08005649 	.word	0x08005649
 8005674:	08005649 	.word	0x08005649
 8005678:	080056cd 	.word	0x080056cd
 800567c:	08005649 	.word	0x08005649
 8005680:	08005649 	.word	0x08005649
 8005684:	08005649 	.word	0x08005649
 8005688:	08005649 	.word	0x08005649
 800568c:	080057d9 	.word	0x080057d9
 8005690:	080056fd 	.word	0x080056fd
 8005694:	080057bb 	.word	0x080057bb
 8005698:	08005649 	.word	0x08005649
 800569c:	08005649 	.word	0x08005649
 80056a0:	080057fb 	.word	0x080057fb
 80056a4:	08005649 	.word	0x08005649
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005649 	.word	0x08005649
 80056b0:	08005649 	.word	0x08005649
 80056b4:	080057c3 	.word	0x080057c3
 80056b8:	680b      	ldr	r3, [r1, #0]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	600a      	str	r2, [r1, #0]
 80056c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0a3      	b.n	8005814 <_printf_i+0x1f4>
 80056cc:	6825      	ldr	r5, [r4, #0]
 80056ce:	6808      	ldr	r0, [r1, #0]
 80056d0:	062e      	lsls	r6, r5, #24
 80056d2:	f100 0304 	add.w	r3, r0, #4
 80056d6:	d50a      	bpl.n	80056ee <_printf_i+0xce>
 80056d8:	6805      	ldr	r5, [r0, #0]
 80056da:	600b      	str	r3, [r1, #0]
 80056dc:	2d00      	cmp	r5, #0
 80056de:	da03      	bge.n	80056e8 <_printf_i+0xc8>
 80056e0:	232d      	movs	r3, #45	; 0x2d
 80056e2:	426d      	negs	r5, r5
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e8:	485e      	ldr	r0, [pc, #376]	; (8005864 <_printf_i+0x244>)
 80056ea:	230a      	movs	r3, #10
 80056ec:	e019      	b.n	8005722 <_printf_i+0x102>
 80056ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056f2:	6805      	ldr	r5, [r0, #0]
 80056f4:	600b      	str	r3, [r1, #0]
 80056f6:	bf18      	it	ne
 80056f8:	b22d      	sxthne	r5, r5
 80056fa:	e7ef      	b.n	80056dc <_printf_i+0xbc>
 80056fc:	680b      	ldr	r3, [r1, #0]
 80056fe:	6825      	ldr	r5, [r4, #0]
 8005700:	1d18      	adds	r0, r3, #4
 8005702:	6008      	str	r0, [r1, #0]
 8005704:	0628      	lsls	r0, r5, #24
 8005706:	d501      	bpl.n	800570c <_printf_i+0xec>
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	e002      	b.n	8005712 <_printf_i+0xf2>
 800570c:	0669      	lsls	r1, r5, #25
 800570e:	d5fb      	bpl.n	8005708 <_printf_i+0xe8>
 8005710:	881d      	ldrh	r5, [r3, #0]
 8005712:	4854      	ldr	r0, [pc, #336]	; (8005864 <_printf_i+0x244>)
 8005714:	2f6f      	cmp	r7, #111	; 0x6f
 8005716:	bf0c      	ite	eq
 8005718:	2308      	moveq	r3, #8
 800571a:	230a      	movne	r3, #10
 800571c:	2100      	movs	r1, #0
 800571e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005722:	6866      	ldr	r6, [r4, #4]
 8005724:	60a6      	str	r6, [r4, #8]
 8005726:	2e00      	cmp	r6, #0
 8005728:	bfa2      	ittt	ge
 800572a:	6821      	ldrge	r1, [r4, #0]
 800572c:	f021 0104 	bicge.w	r1, r1, #4
 8005730:	6021      	strge	r1, [r4, #0]
 8005732:	b90d      	cbnz	r5, 8005738 <_printf_i+0x118>
 8005734:	2e00      	cmp	r6, #0
 8005736:	d04d      	beq.n	80057d4 <_printf_i+0x1b4>
 8005738:	4616      	mov	r6, r2
 800573a:	fbb5 f1f3 	udiv	r1, r5, r3
 800573e:	fb03 5711 	mls	r7, r3, r1, r5
 8005742:	5dc7      	ldrb	r7, [r0, r7]
 8005744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005748:	462f      	mov	r7, r5
 800574a:	42bb      	cmp	r3, r7
 800574c:	460d      	mov	r5, r1
 800574e:	d9f4      	bls.n	800573a <_printf_i+0x11a>
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10b      	bne.n	800576c <_printf_i+0x14c>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07df      	lsls	r7, r3, #31
 8005758:	d508      	bpl.n	800576c <_printf_i+0x14c>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	6861      	ldr	r1, [r4, #4]
 800575e:	4299      	cmp	r1, r3
 8005760:	bfde      	ittt	le
 8005762:	2330      	movle	r3, #48	; 0x30
 8005764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800576c:	1b92      	subs	r2, r2, r6
 800576e:	6122      	str	r2, [r4, #16]
 8005770:	f8cd a000 	str.w	sl, [sp]
 8005774:	464b      	mov	r3, r9
 8005776:	aa03      	add	r2, sp, #12
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fee2 	bl	8005544 <_printf_common>
 8005780:	3001      	adds	r0, #1
 8005782:	d14c      	bne.n	800581e <_printf_i+0x1fe>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	b004      	add	sp, #16
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	4835      	ldr	r0, [pc, #212]	; (8005864 <_printf_i+0x244>)
 8005790:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	680e      	ldr	r6, [r1, #0]
 8005798:	061f      	lsls	r7, r3, #24
 800579a:	f856 5b04 	ldr.w	r5, [r6], #4
 800579e:	600e      	str	r6, [r1, #0]
 80057a0:	d514      	bpl.n	80057cc <_printf_i+0x1ac>
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	bf44      	itt	mi
 80057a6:	f043 0320 	orrmi.w	r3, r3, #32
 80057aa:	6023      	strmi	r3, [r4, #0]
 80057ac:	b91d      	cbnz	r5, 80057b6 <_printf_i+0x196>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	f023 0320 	bic.w	r3, r3, #32
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	2310      	movs	r3, #16
 80057b8:	e7b0      	b.n	800571c <_printf_i+0xfc>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	f043 0320 	orr.w	r3, r3, #32
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	2378      	movs	r3, #120	; 0x78
 80057c4:	4828      	ldr	r0, [pc, #160]	; (8005868 <_printf_i+0x248>)
 80057c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ca:	e7e3      	b.n	8005794 <_printf_i+0x174>
 80057cc:	065e      	lsls	r6, r3, #25
 80057ce:	bf48      	it	mi
 80057d0:	b2ad      	uxthmi	r5, r5
 80057d2:	e7e6      	b.n	80057a2 <_printf_i+0x182>
 80057d4:	4616      	mov	r6, r2
 80057d6:	e7bb      	b.n	8005750 <_printf_i+0x130>
 80057d8:	680b      	ldr	r3, [r1, #0]
 80057da:	6826      	ldr	r6, [r4, #0]
 80057dc:	6960      	ldr	r0, [r4, #20]
 80057de:	1d1d      	adds	r5, r3, #4
 80057e0:	600d      	str	r5, [r1, #0]
 80057e2:	0635      	lsls	r5, r6, #24
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	d501      	bpl.n	80057ec <_printf_i+0x1cc>
 80057e8:	6018      	str	r0, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <_printf_i+0x1d2>
 80057ec:	0671      	lsls	r1, r6, #25
 80057ee:	d5fb      	bpl.n	80057e8 <_printf_i+0x1c8>
 80057f0:	8018      	strh	r0, [r3, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	4616      	mov	r6, r2
 80057f8:	e7ba      	b.n	8005770 <_printf_i+0x150>
 80057fa:	680b      	ldr	r3, [r1, #0]
 80057fc:	1d1a      	adds	r2, r3, #4
 80057fe:	600a      	str	r2, [r1, #0]
 8005800:	681e      	ldr	r6, [r3, #0]
 8005802:	6862      	ldr	r2, [r4, #4]
 8005804:	2100      	movs	r1, #0
 8005806:	4630      	mov	r0, r6
 8005808:	f7fa fcea 	bl	80001e0 <memchr>
 800580c:	b108      	cbz	r0, 8005812 <_printf_i+0x1f2>
 800580e:	1b80      	subs	r0, r0, r6
 8005810:	6060      	str	r0, [r4, #4]
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	2300      	movs	r3, #0
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581c:	e7a8      	b.n	8005770 <_printf_i+0x150>
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d0ab      	beq.n	8005784 <_printf_i+0x164>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	079b      	lsls	r3, r3, #30
 8005830:	d413      	bmi.n	800585a <_printf_i+0x23a>
 8005832:	68e0      	ldr	r0, [r4, #12]
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	4298      	cmp	r0, r3
 8005838:	bfb8      	it	lt
 800583a:	4618      	movlt	r0, r3
 800583c:	e7a4      	b.n	8005788 <_printf_i+0x168>
 800583e:	2301      	movs	r3, #1
 8005840:	4632      	mov	r2, r6
 8005842:	4649      	mov	r1, r9
 8005844:	4640      	mov	r0, r8
 8005846:	47d0      	blx	sl
 8005848:	3001      	adds	r0, #1
 800584a:	d09b      	beq.n	8005784 <_printf_i+0x164>
 800584c:	3501      	adds	r5, #1
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	9903      	ldr	r1, [sp, #12]
 8005852:	1a5b      	subs	r3, r3, r1
 8005854:	42ab      	cmp	r3, r5
 8005856:	dcf2      	bgt.n	800583e <_printf_i+0x21e>
 8005858:	e7eb      	b.n	8005832 <_printf_i+0x212>
 800585a:	2500      	movs	r5, #0
 800585c:	f104 0619 	add.w	r6, r4, #25
 8005860:	e7f5      	b.n	800584e <_printf_i+0x22e>
 8005862:	bf00      	nop
 8005864:	08007da6 	.word	0x08007da6
 8005868:	08007db7 	.word	0x08007db7

0800586c <siprintf>:
 800586c:	b40e      	push	{r1, r2, r3}
 800586e:	b500      	push	{lr}
 8005870:	b09c      	sub	sp, #112	; 0x70
 8005872:	ab1d      	add	r3, sp, #116	; 0x74
 8005874:	9002      	str	r0, [sp, #8]
 8005876:	9006      	str	r0, [sp, #24]
 8005878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800587c:	4809      	ldr	r0, [pc, #36]	; (80058a4 <siprintf+0x38>)
 800587e:	9107      	str	r1, [sp, #28]
 8005880:	9104      	str	r1, [sp, #16]
 8005882:	4909      	ldr	r1, [pc, #36]	; (80058a8 <siprintf+0x3c>)
 8005884:	f853 2b04 	ldr.w	r2, [r3], #4
 8005888:	9105      	str	r1, [sp, #20]
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	a902      	add	r1, sp, #8
 8005890:	f001 fb34 	bl	8006efc <_svfiprintf_r>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	b01c      	add	sp, #112	; 0x70
 800589c:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a0:	b003      	add	sp, #12
 80058a2:	4770      	bx	lr
 80058a4:	2000000c 	.word	0x2000000c
 80058a8:	ffff0208 	.word	0xffff0208

080058ac <quorem>:
 80058ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	6903      	ldr	r3, [r0, #16]
 80058b2:	690c      	ldr	r4, [r1, #16]
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	4607      	mov	r7, r0
 80058b8:	f2c0 8081 	blt.w	80059be <quorem+0x112>
 80058bc:	3c01      	subs	r4, #1
 80058be:	f101 0814 	add.w	r8, r1, #20
 80058c2:	f100 0514 	add.w	r5, r0, #20
 80058c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058d4:	3301      	adds	r3, #1
 80058d6:	429a      	cmp	r2, r3
 80058d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80058e4:	d331      	bcc.n	800594a <quorem+0x9e>
 80058e6:	f04f 0e00 	mov.w	lr, #0
 80058ea:	4640      	mov	r0, r8
 80058ec:	46ac      	mov	ip, r5
 80058ee:	46f2      	mov	sl, lr
 80058f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80058f4:	b293      	uxth	r3, r2
 80058f6:	fb06 e303 	mla	r3, r6, r3, lr
 80058fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058fe:	b29b      	uxth	r3, r3
 8005900:	ebaa 0303 	sub.w	r3, sl, r3
 8005904:	0c12      	lsrs	r2, r2, #16
 8005906:	f8dc a000 	ldr.w	sl, [ip]
 800590a:	fb06 e202 	mla	r2, r6, r2, lr
 800590e:	fa13 f38a 	uxtah	r3, r3, sl
 8005912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005916:	fa1f fa82 	uxth.w	sl, r2
 800591a:	f8dc 2000 	ldr.w	r2, [ip]
 800591e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005922:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800592c:	4581      	cmp	r9, r0
 800592e:	f84c 3b04 	str.w	r3, [ip], #4
 8005932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005936:	d2db      	bcs.n	80058f0 <quorem+0x44>
 8005938:	f855 300b 	ldr.w	r3, [r5, fp]
 800593c:	b92b      	cbnz	r3, 800594a <quorem+0x9e>
 800593e:	9b01      	ldr	r3, [sp, #4]
 8005940:	3b04      	subs	r3, #4
 8005942:	429d      	cmp	r5, r3
 8005944:	461a      	mov	r2, r3
 8005946:	d32e      	bcc.n	80059a6 <quorem+0xfa>
 8005948:	613c      	str	r4, [r7, #16]
 800594a:	4638      	mov	r0, r7
 800594c:	f001 f8c0 	bl	8006ad0 <__mcmp>
 8005950:	2800      	cmp	r0, #0
 8005952:	db24      	blt.n	800599e <quorem+0xf2>
 8005954:	3601      	adds	r6, #1
 8005956:	4628      	mov	r0, r5
 8005958:	f04f 0c00 	mov.w	ip, #0
 800595c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005960:	f8d0 e000 	ldr.w	lr, [r0]
 8005964:	b293      	uxth	r3, r2
 8005966:	ebac 0303 	sub.w	r3, ip, r3
 800596a:	0c12      	lsrs	r2, r2, #16
 800596c:	fa13 f38e 	uxtah	r3, r3, lr
 8005970:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800597e:	45c1      	cmp	r9, r8
 8005980:	f840 3b04 	str.w	r3, [r0], #4
 8005984:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005988:	d2e8      	bcs.n	800595c <quorem+0xb0>
 800598a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800598e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005992:	b922      	cbnz	r2, 800599e <quorem+0xf2>
 8005994:	3b04      	subs	r3, #4
 8005996:	429d      	cmp	r5, r3
 8005998:	461a      	mov	r2, r3
 800599a:	d30a      	bcc.n	80059b2 <quorem+0x106>
 800599c:	613c      	str	r4, [r7, #16]
 800599e:	4630      	mov	r0, r6
 80059a0:	b003      	add	sp, #12
 80059a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	3b04      	subs	r3, #4
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	d1cc      	bne.n	8005948 <quorem+0x9c>
 80059ae:	3c01      	subs	r4, #1
 80059b0:	e7c7      	b.n	8005942 <quorem+0x96>
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	3b04      	subs	r3, #4
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d1f0      	bne.n	800599c <quorem+0xf0>
 80059ba:	3c01      	subs	r4, #1
 80059bc:	e7eb      	b.n	8005996 <quorem+0xea>
 80059be:	2000      	movs	r0, #0
 80059c0:	e7ee      	b.n	80059a0 <quorem+0xf4>
 80059c2:	0000      	movs	r0, r0
 80059c4:	0000      	movs	r0, r0
	...

080059c8 <_dtoa_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	ed2d 8b02 	vpush	{d8}
 80059d0:	ec57 6b10 	vmov	r6, r7, d0
 80059d4:	b095      	sub	sp, #84	; 0x54
 80059d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059dc:	9105      	str	r1, [sp, #20]
 80059de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80059e2:	4604      	mov	r4, r0
 80059e4:	9209      	str	r2, [sp, #36]	; 0x24
 80059e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059e8:	b975      	cbnz	r5, 8005a08 <_dtoa_r+0x40>
 80059ea:	2010      	movs	r0, #16
 80059ec:	f000 fddc 	bl	80065a8 <malloc>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6260      	str	r0, [r4, #36]	; 0x24
 80059f4:	b920      	cbnz	r0, 8005a00 <_dtoa_r+0x38>
 80059f6:	4bb2      	ldr	r3, [pc, #712]	; (8005cc0 <_dtoa_r+0x2f8>)
 80059f8:	21ea      	movs	r1, #234	; 0xea
 80059fa:	48b2      	ldr	r0, [pc, #712]	; (8005cc4 <_dtoa_r+0x2fc>)
 80059fc:	f001 fb8e 	bl	800711c <__assert_func>
 8005a00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a04:	6005      	str	r5, [r0, #0]
 8005a06:	60c5      	str	r5, [r0, #12]
 8005a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	b151      	cbz	r1, 8005a24 <_dtoa_r+0x5c>
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	604a      	str	r2, [r1, #4]
 8005a12:	2301      	movs	r3, #1
 8005a14:	4093      	lsls	r3, r2
 8005a16:	608b      	str	r3, [r1, #8]
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fe1b 	bl	8006654 <_Bfree>
 8005a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	1e3b      	subs	r3, r7, #0
 8005a26:	bfb9      	ittee	lt
 8005a28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	9303      	strlt	r3, [sp, #12]
 8005a2e:	2300      	movge	r3, #0
 8005a30:	f8c8 3000 	strge.w	r3, [r8]
 8005a34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a38:	4ba3      	ldr	r3, [pc, #652]	; (8005cc8 <_dtoa_r+0x300>)
 8005a3a:	bfbc      	itt	lt
 8005a3c:	2201      	movlt	r2, #1
 8005a3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a42:	ea33 0309 	bics.w	r3, r3, r9
 8005a46:	d11b      	bne.n	8005a80 <_dtoa_r+0xb8>
 8005a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a54:	4333      	orrs	r3, r6
 8005a56:	f000 857a 	beq.w	800654e <_dtoa_r+0xb86>
 8005a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a5c:	b963      	cbnz	r3, 8005a78 <_dtoa_r+0xb0>
 8005a5e:	4b9b      	ldr	r3, [pc, #620]	; (8005ccc <_dtoa_r+0x304>)
 8005a60:	e024      	b.n	8005aac <_dtoa_r+0xe4>
 8005a62:	4b9b      	ldr	r3, [pc, #620]	; (8005cd0 <_dtoa_r+0x308>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	3308      	adds	r3, #8
 8005a68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	9800      	ldr	r0, [sp, #0]
 8005a6e:	b015      	add	sp, #84	; 0x54
 8005a70:	ecbd 8b02 	vpop	{d8}
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a78:	4b94      	ldr	r3, [pc, #592]	; (8005ccc <_dtoa_r+0x304>)
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	3303      	adds	r3, #3
 8005a7e:	e7f3      	b.n	8005a68 <_dtoa_r+0xa0>
 8005a80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	ec51 0b17 	vmov	r0, r1, d7
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005a90:	f7fb f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a94:	4680      	mov	r8, r0
 8005a96:	b158      	cbz	r0, 8005ab0 <_dtoa_r+0xe8>
 8005a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8551 	beq.w	8006548 <_dtoa_r+0xb80>
 8005aa6:	488b      	ldr	r0, [pc, #556]	; (8005cd4 <_dtoa_r+0x30c>)
 8005aa8:	6018      	str	r0, [r3, #0]
 8005aaa:	1e43      	subs	r3, r0, #1
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	e7dd      	b.n	8005a6c <_dtoa_r+0xa4>
 8005ab0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ab4:	aa12      	add	r2, sp, #72	; 0x48
 8005ab6:	a913      	add	r1, sp, #76	; 0x4c
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f001 f8ad 	bl	8006c18 <__d2b>
 8005abe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ac2:	4683      	mov	fp, r0
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	d07c      	beq.n	8005bc2 <_dtoa_r+0x1fa>
 8005ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005ad6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ada:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ae2:	4b7d      	ldr	r3, [pc, #500]	; (8005cd8 <_dtoa_r+0x310>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7fa fbcd 	bl	8000288 <__aeabi_dsub>
 8005aee:	a36e      	add	r3, pc, #440	; (adr r3, 8005ca8 <_dtoa_r+0x2e0>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fd80 	bl	80005f8 <__aeabi_dmul>
 8005af8:	a36d      	add	r3, pc, #436	; (adr r3, 8005cb0 <_dtoa_r+0x2e8>)
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fbc5 	bl	800028c <__adddf3>
 8005b02:	4606      	mov	r6, r0
 8005b04:	4628      	mov	r0, r5
 8005b06:	460f      	mov	r7, r1
 8005b08:	f7fa fd0c 	bl	8000524 <__aeabi_i2d>
 8005b0c:	a36a      	add	r3, pc, #424	; (adr r3, 8005cb8 <_dtoa_r+0x2f0>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fd71 	bl	80005f8 <__aeabi_dmul>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	f7fa fbb5 	bl	800028c <__adddf3>
 8005b22:	4606      	mov	r6, r0
 8005b24:	460f      	mov	r7, r1
 8005b26:	f7fb f817 	bl	8000b58 <__aeabi_d2iz>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4630      	mov	r0, r6
 8005b32:	4639      	mov	r1, r7
 8005b34:	f7fa ffd2 	bl	8000adc <__aeabi_dcmplt>
 8005b38:	b148      	cbz	r0, 8005b4e <_dtoa_r+0x186>
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f7fa fcf2 	bl	8000524 <__aeabi_i2d>
 8005b40:	4632      	mov	r2, r6
 8005b42:	463b      	mov	r3, r7
 8005b44:	f7fa ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b48:	b908      	cbnz	r0, 8005b4e <_dtoa_r+0x186>
 8005b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b4e:	f1ba 0f16 	cmp.w	sl, #22
 8005b52:	d854      	bhi.n	8005bfe <_dtoa_r+0x236>
 8005b54:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <_dtoa_r+0x314>)
 8005b56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b62:	f7fa ffbb 	bl	8000adc <__aeabi_dcmplt>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d04b      	beq.n	8005c02 <_dtoa_r+0x23a>
 8005b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b6e:	2300      	movs	r3, #0
 8005b70:	930e      	str	r3, [sp, #56]	; 0x38
 8005b72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b74:	1b5d      	subs	r5, r3, r5
 8005b76:	1e6b      	subs	r3, r5, #1
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	bf43      	ittte	mi
 8005b7c:	2300      	movmi	r3, #0
 8005b7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005b82:	9304      	strmi	r3, [sp, #16]
 8005b84:	f04f 0800 	movpl.w	r8, #0
 8005b88:	f1ba 0f00 	cmp.w	sl, #0
 8005b8c:	db3b      	blt.n	8005c06 <_dtoa_r+0x23e>
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005b94:	4453      	add	r3, sl
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	9b05      	ldr	r3, [sp, #20]
 8005b9e:	2b09      	cmp	r3, #9
 8005ba0:	d869      	bhi.n	8005c76 <_dtoa_r+0x2ae>
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	bfc4      	itt	gt
 8005ba6:	3b04      	subgt	r3, #4
 8005ba8:	9305      	strgt	r3, [sp, #20]
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	f1a3 0302 	sub.w	r3, r3, #2
 8005bb0:	bfcc      	ite	gt
 8005bb2:	2500      	movgt	r5, #0
 8005bb4:	2501      	movle	r5, #1
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d869      	bhi.n	8005c8e <_dtoa_r+0x2c6>
 8005bba:	e8df f003 	tbb	[pc, r3]
 8005bbe:	4e2c      	.short	0x4e2c
 8005bc0:	5a4c      	.short	0x5a4c
 8005bc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005bc6:	441d      	add	r5, r3
 8005bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	bfc1      	itttt	gt
 8005bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005bd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bdc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005be0:	bfda      	itte	le
 8005be2:	f1c3 0320 	rsble	r3, r3, #32
 8005be6:	fa06 f003 	lslle.w	r0, r6, r3
 8005bea:	4318      	orrgt	r0, r3
 8005bec:	f7fa fc8a 	bl	8000504 <__aeabi_ui2d>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005bf8:	3d01      	subs	r5, #1
 8005bfa:	9310      	str	r3, [sp, #64]	; 0x40
 8005bfc:	e771      	b.n	8005ae2 <_dtoa_r+0x11a>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7b6      	b.n	8005b70 <_dtoa_r+0x1a8>
 8005c02:	900e      	str	r0, [sp, #56]	; 0x38
 8005c04:	e7b5      	b.n	8005b72 <_dtoa_r+0x1aa>
 8005c06:	f1ca 0300 	rsb	r3, sl, #0
 8005c0a:	9306      	str	r3, [sp, #24]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	eba8 080a 	sub.w	r8, r8, sl
 8005c12:	930d      	str	r3, [sp, #52]	; 0x34
 8005c14:	e7c2      	b.n	8005b9c <_dtoa_r+0x1d4>
 8005c16:	2300      	movs	r3, #0
 8005c18:	9308      	str	r3, [sp, #32]
 8005c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	dc39      	bgt.n	8005c94 <_dtoa_r+0x2cc>
 8005c20:	f04f 0901 	mov.w	r9, #1
 8005c24:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c28:	464b      	mov	r3, r9
 8005c2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c30:	2200      	movs	r2, #0
 8005c32:	6042      	str	r2, [r0, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	f102 0614 	add.w	r6, r2, #20
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	6841      	ldr	r1, [r0, #4]
 8005c3e:	d92f      	bls.n	8005ca0 <_dtoa_r+0x2d8>
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 fcc7 	bl	80065d4 <_Balloc>
 8005c46:	9000      	str	r0, [sp, #0]
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d14b      	bne.n	8005ce4 <_dtoa_r+0x31c>
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <_dtoa_r+0x318>)
 8005c4e:	4602      	mov	r2, r0
 8005c50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c54:	e6d1      	b.n	80059fa <_dtoa_r+0x32>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7de      	b.n	8005c18 <_dtoa_r+0x250>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9308      	str	r3, [sp, #32]
 8005c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c60:	eb0a 0903 	add.w	r9, sl, r3
 8005c64:	f109 0301 	add.w	r3, r9, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	bfb8      	it	lt
 8005c6e:	2301      	movlt	r3, #1
 8005c70:	e7dd      	b.n	8005c2e <_dtoa_r+0x266>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7f2      	b.n	8005c5c <_dtoa_r+0x294>
 8005c76:	2501      	movs	r5, #1
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9305      	str	r3, [sp, #20]
 8005c7c:	9508      	str	r5, [sp, #32]
 8005c7e:	f04f 39ff 	mov.w	r9, #4294967295
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c88:	2312      	movs	r3, #18
 8005c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8c:	e7cf      	b.n	8005c2e <_dtoa_r+0x266>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	e7f4      	b.n	8005c7e <_dtoa_r+0x2b6>
 8005c94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	e7c6      	b.n	8005c2e <_dtoa_r+0x266>
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	6041      	str	r1, [r0, #4]
 8005ca4:	0052      	lsls	r2, r2, #1
 8005ca6:	e7c6      	b.n	8005c36 <_dtoa_r+0x26e>
 8005ca8:	636f4361 	.word	0x636f4361
 8005cac:	3fd287a7 	.word	0x3fd287a7
 8005cb0:	8b60c8b3 	.word	0x8b60c8b3
 8005cb4:	3fc68a28 	.word	0x3fc68a28
 8005cb8:	509f79fb 	.word	0x509f79fb
 8005cbc:	3fd34413 	.word	0x3fd34413
 8005cc0:	08007dd5 	.word	0x08007dd5
 8005cc4:	08007dec 	.word	0x08007dec
 8005cc8:	7ff00000 	.word	0x7ff00000
 8005ccc:	08007dd1 	.word	0x08007dd1
 8005cd0:	08007dc8 	.word	0x08007dc8
 8005cd4:	08007da5 	.word	0x08007da5
 8005cd8:	3ff80000 	.word	0x3ff80000
 8005cdc:	08007ee8 	.word	0x08007ee8
 8005ce0:	08007e4b 	.word	0x08007e4b
 8005ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ce6:	9a00      	ldr	r2, [sp, #0]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	2b0e      	cmp	r3, #14
 8005cee:	f200 80ad 	bhi.w	8005e4c <_dtoa_r+0x484>
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	f000 80aa 	beq.w	8005e4c <_dtoa_r+0x484>
 8005cf8:	f1ba 0f00 	cmp.w	sl, #0
 8005cfc:	dd36      	ble.n	8005d6c <_dtoa_r+0x3a4>
 8005cfe:	4ac3      	ldr	r2, [pc, #780]	; (800600c <_dtoa_r+0x644>)
 8005d00:	f00a 030f 	and.w	r3, sl, #15
 8005d04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d08:	ed93 7b00 	vldr	d7, [r3]
 8005d0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005d14:	eeb0 8a47 	vmov.f32	s16, s14
 8005d18:	eef0 8a67 	vmov.f32	s17, s15
 8005d1c:	d016      	beq.n	8005d4c <_dtoa_r+0x384>
 8005d1e:	4bbc      	ldr	r3, [pc, #752]	; (8006010 <_dtoa_r+0x648>)
 8005d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d28:	f7fa fd90 	bl	800084c <__aeabi_ddiv>
 8005d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d30:	f007 070f 	and.w	r7, r7, #15
 8005d34:	2503      	movs	r5, #3
 8005d36:	4eb6      	ldr	r6, [pc, #728]	; (8006010 <_dtoa_r+0x648>)
 8005d38:	b957      	cbnz	r7, 8005d50 <_dtoa_r+0x388>
 8005d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3e:	ec53 2b18 	vmov	r2, r3, d8
 8005d42:	f7fa fd83 	bl	800084c <__aeabi_ddiv>
 8005d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d4a:	e029      	b.n	8005da0 <_dtoa_r+0x3d8>
 8005d4c:	2502      	movs	r5, #2
 8005d4e:	e7f2      	b.n	8005d36 <_dtoa_r+0x36e>
 8005d50:	07f9      	lsls	r1, r7, #31
 8005d52:	d508      	bpl.n	8005d66 <_dtoa_r+0x39e>
 8005d54:	ec51 0b18 	vmov	r0, r1, d8
 8005d58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d5c:	f7fa fc4c 	bl	80005f8 <__aeabi_dmul>
 8005d60:	ec41 0b18 	vmov	d8, r0, r1
 8005d64:	3501      	adds	r5, #1
 8005d66:	107f      	asrs	r7, r7, #1
 8005d68:	3608      	adds	r6, #8
 8005d6a:	e7e5      	b.n	8005d38 <_dtoa_r+0x370>
 8005d6c:	f000 80a6 	beq.w	8005ebc <_dtoa_r+0x4f4>
 8005d70:	f1ca 0600 	rsb	r6, sl, #0
 8005d74:	4ba5      	ldr	r3, [pc, #660]	; (800600c <_dtoa_r+0x644>)
 8005d76:	4fa6      	ldr	r7, [pc, #664]	; (8006010 <_dtoa_r+0x648>)
 8005d78:	f006 020f 	and.w	r2, r6, #15
 8005d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d88:	f7fa fc36 	bl	80005f8 <__aeabi_dmul>
 8005d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d90:	1136      	asrs	r6, r6, #4
 8005d92:	2300      	movs	r3, #0
 8005d94:	2502      	movs	r5, #2
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	f040 8085 	bne.w	8005ea6 <_dtoa_r+0x4de>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1d2      	bne.n	8005d46 <_dtoa_r+0x37e>
 8005da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 808c 	beq.w	8005ec0 <_dtoa_r+0x4f8>
 8005da8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dac:	4b99      	ldr	r3, [pc, #612]	; (8006014 <_dtoa_r+0x64c>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	4630      	mov	r0, r6
 8005db2:	4639      	mov	r1, r7
 8005db4:	f7fa fe92 	bl	8000adc <__aeabi_dcmplt>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f000 8081 	beq.w	8005ec0 <_dtoa_r+0x4f8>
 8005dbe:	9b01      	ldr	r3, [sp, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d07d      	beq.n	8005ec0 <_dtoa_r+0x4f8>
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	dd3c      	ble.n	8005e44 <_dtoa_r+0x47c>
 8005dca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4b91      	ldr	r3, [pc, #580]	; (8006018 <_dtoa_r+0x650>)
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fc0e 	bl	80005f8 <__aeabi_dmul>
 8005ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de0:	3501      	adds	r5, #1
 8005de2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005de6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7fa fb9a 	bl	8000524 <__aeabi_i2d>
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	4b88      	ldr	r3, [pc, #544]	; (800601c <_dtoa_r+0x654>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f7fa fa46 	bl	800028c <__adddf3>
 8005e00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	9303      	str	r3, [sp, #12]
 8005e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d15c      	bne.n	8005eca <_dtoa_r+0x502>
 8005e10:	4b83      	ldr	r3, [pc, #524]	; (8006020 <_dtoa_r+0x658>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7fa fa36 	bl	8000288 <__aeabi_dsub>
 8005e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	f7fa fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 8296 	bne.w	800635a <_dtoa_r+0x992>
 8005e2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e32:	4630      	mov	r0, r6
 8005e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fe4f 	bl	8000adc <__aeabi_dcmplt>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f040 8288 	bne.w	8006354 <_dtoa_r+0x98c>
 8005e44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f2c0 8158 	blt.w	8006104 <_dtoa_r+0x73c>
 8005e54:	f1ba 0f0e 	cmp.w	sl, #14
 8005e58:	f300 8154 	bgt.w	8006104 <_dtoa_r+0x73c>
 8005e5c:	4b6b      	ldr	r3, [pc, #428]	; (800600c <_dtoa_r+0x644>)
 8005e5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f280 80e3 	bge.w	8006034 <_dtoa_r+0x66c>
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f300 80df 	bgt.w	8006034 <_dtoa_r+0x66c>
 8005e76:	f040 826d 	bne.w	8006354 <_dtoa_r+0x98c>
 8005e7a:	4b69      	ldr	r3, [pc, #420]	; (8006020 <_dtoa_r+0x658>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fbb9 	bl	80005f8 <__aeabi_dmul>
 8005e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e8a:	f7fa fe3b 	bl	8000b04 <__aeabi_dcmpge>
 8005e8e:	9e01      	ldr	r6, [sp, #4]
 8005e90:	4637      	mov	r7, r6
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f040 8243 	bne.w	800631e <_dtoa_r+0x956>
 8005e98:	9d00      	ldr	r5, [sp, #0]
 8005e9a:	2331      	movs	r3, #49	; 0x31
 8005e9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ea0:	f10a 0a01 	add.w	sl, sl, #1
 8005ea4:	e23f      	b.n	8006326 <_dtoa_r+0x95e>
 8005ea6:	07f2      	lsls	r2, r6, #31
 8005ea8:	d505      	bpl.n	8005eb6 <_dtoa_r+0x4ee>
 8005eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eae:	f7fa fba3 	bl	80005f8 <__aeabi_dmul>
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	1076      	asrs	r6, r6, #1
 8005eb8:	3708      	adds	r7, #8
 8005eba:	e76c      	b.n	8005d96 <_dtoa_r+0x3ce>
 8005ebc:	2502      	movs	r5, #2
 8005ebe:	e76f      	b.n	8005da0 <_dtoa_r+0x3d8>
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec8:	e78d      	b.n	8005de6 <_dtoa_r+0x41e>
 8005eca:	9900      	ldr	r1, [sp, #0]
 8005ecc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ed0:	4b4e      	ldr	r3, [pc, #312]	; (800600c <_dtoa_r+0x644>)
 8005ed2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	9102      	str	r1, [sp, #8]
 8005eda:	9908      	ldr	r1, [sp, #32]
 8005edc:	eeb0 8a47 	vmov.f32	s16, s14
 8005ee0:	eef0 8a67 	vmov.f32	s17, s15
 8005ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d045      	beq.n	8005f7c <_dtoa_r+0x5b4>
 8005ef0:	494c      	ldr	r1, [pc, #304]	; (8006024 <_dtoa_r+0x65c>)
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f7fa fcaa 	bl	800084c <__aeabi_ddiv>
 8005ef8:	ec53 2b18 	vmov	r2, r3, d8
 8005efc:	f7fa f9c4 	bl	8000288 <__aeabi_dsub>
 8005f00:	9d00      	ldr	r5, [sp, #0]
 8005f02:	ec41 0b18 	vmov	d8, r0, r1
 8005f06:	4639      	mov	r1, r7
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f7fa fe25 	bl	8000b58 <__aeabi_d2iz>
 8005f0e:	900c      	str	r0, [sp, #48]	; 0x30
 8005f10:	f7fa fb08 	bl	8000524 <__aeabi_i2d>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f9b4 	bl	8000288 <__aeabi_dsub>
 8005f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f22:	3330      	adds	r3, #48	; 0x30
 8005f24:	f805 3b01 	strb.w	r3, [r5], #1
 8005f28:	ec53 2b18 	vmov	r2, r3, d8
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	f7fa fdd4 	bl	8000adc <__aeabi_dcmplt>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d165      	bne.n	8006004 <_dtoa_r+0x63c>
 8005f38:	4632      	mov	r2, r6
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	4935      	ldr	r1, [pc, #212]	; (8006014 <_dtoa_r+0x64c>)
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f7fa f9a2 	bl	8000288 <__aeabi_dsub>
 8005f44:	ec53 2b18 	vmov	r2, r3, d8
 8005f48:	f7fa fdc8 	bl	8000adc <__aeabi_dcmplt>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f040 80b9 	bne.w	80060c4 <_dtoa_r+0x6fc>
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	429d      	cmp	r5, r3
 8005f56:	f43f af75 	beq.w	8005e44 <_dtoa_r+0x47c>
 8005f5a:	4b2f      	ldr	r3, [pc, #188]	; (8006018 <_dtoa_r+0x650>)
 8005f5c:	ec51 0b18 	vmov	r0, r1, d8
 8005f60:	2200      	movs	r2, #0
 8005f62:	f7fa fb49 	bl	80005f8 <__aeabi_dmul>
 8005f66:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <_dtoa_r+0x650>)
 8005f68:	ec41 0b18 	vmov	d8, r0, r1
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4630      	mov	r0, r6
 8005f70:	4639      	mov	r1, r7
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	4606      	mov	r6, r0
 8005f78:	460f      	mov	r7, r1
 8005f7a:	e7c4      	b.n	8005f06 <_dtoa_r+0x53e>
 8005f7c:	ec51 0b17 	vmov	r0, r1, d7
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	9b02      	ldr	r3, [sp, #8]
 8005f86:	9d00      	ldr	r5, [sp, #0]
 8005f88:	930c      	str	r3, [sp, #48]	; 0x30
 8005f8a:	ec41 0b18 	vmov	d8, r0, r1
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7fa fde1 	bl	8000b58 <__aeabi_d2iz>
 8005f96:	9011      	str	r0, [sp, #68]	; 0x44
 8005f98:	f7fa fac4 	bl	8000524 <__aeabi_i2d>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f970 	bl	8000288 <__aeabi_dsub>
 8005fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005faa:	3330      	adds	r3, #48	; 0x30
 8005fac:	f805 3b01 	strb.w	r3, [r5], #1
 8005fb0:	9b02      	ldr	r3, [sp, #8]
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	d134      	bne.n	8006028 <_dtoa_r+0x660>
 8005fbe:	4b19      	ldr	r3, [pc, #100]	; (8006024 <_dtoa_r+0x65c>)
 8005fc0:	ec51 0b18 	vmov	r0, r1, d8
 8005fc4:	f7fa f962 	bl	800028c <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fda2 	bl	8000b18 <__aeabi_dcmpgt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d175      	bne.n	80060c4 <_dtoa_r+0x6fc>
 8005fd8:	ec53 2b18 	vmov	r2, r3, d8
 8005fdc:	4911      	ldr	r1, [pc, #68]	; (8006024 <_dtoa_r+0x65c>)
 8005fde:	2000      	movs	r0, #0
 8005fe0:	f7fa f952 	bl	8000288 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4639      	mov	r1, r7
 8005fec:	f7fa fd76 	bl	8000adc <__aeabi_dcmplt>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f43f af27 	beq.w	8005e44 <_dtoa_r+0x47c>
 8005ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff8:	1e6b      	subs	r3, r5, #1
 8005ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8005ffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d0f8      	beq.n	8005ff6 <_dtoa_r+0x62e>
 8006004:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006008:	e04a      	b.n	80060a0 <_dtoa_r+0x6d8>
 800600a:	bf00      	nop
 800600c:	08007ee8 	.word	0x08007ee8
 8006010:	08007ec0 	.word	0x08007ec0
 8006014:	3ff00000 	.word	0x3ff00000
 8006018:	40240000 	.word	0x40240000
 800601c:	401c0000 	.word	0x401c0000
 8006020:	40140000 	.word	0x40140000
 8006024:	3fe00000 	.word	0x3fe00000
 8006028:	4baf      	ldr	r3, [pc, #700]	; (80062e8 <_dtoa_r+0x920>)
 800602a:	f7fa fae5 	bl	80005f8 <__aeabi_dmul>
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	e7ac      	b.n	8005f8e <_dtoa_r+0x5c6>
 8006034:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006038:	9d00      	ldr	r5, [sp, #0]
 800603a:	4642      	mov	r2, r8
 800603c:	464b      	mov	r3, r9
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	f7fa fc03 	bl	800084c <__aeabi_ddiv>
 8006046:	f7fa fd87 	bl	8000b58 <__aeabi_d2iz>
 800604a:	9002      	str	r0, [sp, #8]
 800604c:	f7fa fa6a 	bl	8000524 <__aeabi_i2d>
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	f7fa fad0 	bl	80005f8 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa f912 	bl	8000288 <__aeabi_dsub>
 8006064:	9e02      	ldr	r6, [sp, #8]
 8006066:	9f01      	ldr	r7, [sp, #4]
 8006068:	3630      	adds	r6, #48	; 0x30
 800606a:	f805 6b01 	strb.w	r6, [r5], #1
 800606e:	9e00      	ldr	r6, [sp, #0]
 8006070:	1bae      	subs	r6, r5, r6
 8006072:	42b7      	cmp	r7, r6
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	d137      	bne.n	80060ea <_dtoa_r+0x722>
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4642      	mov	r2, r8
 8006080:	464b      	mov	r3, r9
 8006082:	4606      	mov	r6, r0
 8006084:	460f      	mov	r7, r1
 8006086:	f7fa fd47 	bl	8000b18 <__aeabi_dcmpgt>
 800608a:	b9c8      	cbnz	r0, 80060c0 <_dtoa_r+0x6f8>
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006098:	b110      	cbz	r0, 80060a0 <_dtoa_r+0x6d8>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	07d9      	lsls	r1, r3, #31
 800609e:	d40f      	bmi.n	80060c0 <_dtoa_r+0x6f8>
 80060a0:	4620      	mov	r0, r4
 80060a2:	4659      	mov	r1, fp
 80060a4:	f000 fad6 	bl	8006654 <_Bfree>
 80060a8:	2300      	movs	r3, #0
 80060aa:	702b      	strb	r3, [r5, #0]
 80060ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ae:	f10a 0001 	add.w	r0, sl, #1
 80060b2:	6018      	str	r0, [r3, #0]
 80060b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f43f acd8 	beq.w	8005a6c <_dtoa_r+0xa4>
 80060bc:	601d      	str	r5, [r3, #0]
 80060be:	e4d5      	b.n	8005a6c <_dtoa_r+0xa4>
 80060c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80060c4:	462b      	mov	r3, r5
 80060c6:	461d      	mov	r5, r3
 80060c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060cc:	2a39      	cmp	r2, #57	; 0x39
 80060ce:	d108      	bne.n	80060e2 <_dtoa_r+0x71a>
 80060d0:	9a00      	ldr	r2, [sp, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d1f7      	bne.n	80060c6 <_dtoa_r+0x6fe>
 80060d6:	9a07      	ldr	r2, [sp, #28]
 80060d8:	9900      	ldr	r1, [sp, #0]
 80060da:	3201      	adds	r2, #1
 80060dc:	9207      	str	r2, [sp, #28]
 80060de:	2230      	movs	r2, #48	; 0x30
 80060e0:	700a      	strb	r2, [r1, #0]
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	3201      	adds	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e78c      	b.n	8006004 <_dtoa_r+0x63c>
 80060ea:	4b7f      	ldr	r3, [pc, #508]	; (80062e8 <_dtoa_r+0x920>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	2200      	movs	r2, #0
 80060f4:	2300      	movs	r3, #0
 80060f6:	4606      	mov	r6, r0
 80060f8:	460f      	mov	r7, r1
 80060fa:	f7fa fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d09b      	beq.n	800603a <_dtoa_r+0x672>
 8006102:	e7cd      	b.n	80060a0 <_dtoa_r+0x6d8>
 8006104:	9a08      	ldr	r2, [sp, #32]
 8006106:	2a00      	cmp	r2, #0
 8006108:	f000 80c4 	beq.w	8006294 <_dtoa_r+0x8cc>
 800610c:	9a05      	ldr	r2, [sp, #20]
 800610e:	2a01      	cmp	r2, #1
 8006110:	f300 80a8 	bgt.w	8006264 <_dtoa_r+0x89c>
 8006114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006116:	2a00      	cmp	r2, #0
 8006118:	f000 80a0 	beq.w	800625c <_dtoa_r+0x894>
 800611c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006120:	9e06      	ldr	r6, [sp, #24]
 8006122:	4645      	mov	r5, r8
 8006124:	9a04      	ldr	r2, [sp, #16]
 8006126:	2101      	movs	r1, #1
 8006128:	441a      	add	r2, r3
 800612a:	4620      	mov	r0, r4
 800612c:	4498      	add	r8, r3
 800612e:	9204      	str	r2, [sp, #16]
 8006130:	f000 fb4c 	bl	80067cc <__i2b>
 8006134:	4607      	mov	r7, r0
 8006136:	2d00      	cmp	r5, #0
 8006138:	dd0b      	ble.n	8006152 <_dtoa_r+0x78a>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dd08      	ble.n	8006152 <_dtoa_r+0x78a>
 8006140:	42ab      	cmp	r3, r5
 8006142:	9a04      	ldr	r2, [sp, #16]
 8006144:	bfa8      	it	ge
 8006146:	462b      	movge	r3, r5
 8006148:	eba8 0803 	sub.w	r8, r8, r3
 800614c:	1aed      	subs	r5, r5, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	9b06      	ldr	r3, [sp, #24]
 8006154:	b1fb      	cbz	r3, 8006196 <_dtoa_r+0x7ce>
 8006156:	9b08      	ldr	r3, [sp, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 809f 	beq.w	800629c <_dtoa_r+0x8d4>
 800615e:	2e00      	cmp	r6, #0
 8006160:	dd11      	ble.n	8006186 <_dtoa_r+0x7be>
 8006162:	4639      	mov	r1, r7
 8006164:	4632      	mov	r2, r6
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fbec 	bl	8006944 <__pow5mult>
 800616c:	465a      	mov	r2, fp
 800616e:	4601      	mov	r1, r0
 8006170:	4607      	mov	r7, r0
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fb40 	bl	80067f8 <__multiply>
 8006178:	4659      	mov	r1, fp
 800617a:	9007      	str	r0, [sp, #28]
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fa69 	bl	8006654 <_Bfree>
 8006182:	9b07      	ldr	r3, [sp, #28]
 8006184:	469b      	mov	fp, r3
 8006186:	9b06      	ldr	r3, [sp, #24]
 8006188:	1b9a      	subs	r2, r3, r6
 800618a:	d004      	beq.n	8006196 <_dtoa_r+0x7ce>
 800618c:	4659      	mov	r1, fp
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fbd8 	bl	8006944 <__pow5mult>
 8006194:	4683      	mov	fp, r0
 8006196:	2101      	movs	r1, #1
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fb17 	bl	80067cc <__i2b>
 800619e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	4606      	mov	r6, r0
 80061a4:	dd7c      	ble.n	80062a0 <_dtoa_r+0x8d8>
 80061a6:	461a      	mov	r2, r3
 80061a8:	4601      	mov	r1, r0
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fbca 	bl	8006944 <__pow5mult>
 80061b0:	9b05      	ldr	r3, [sp, #20]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	4606      	mov	r6, r0
 80061b6:	dd76      	ble.n	80062a6 <_dtoa_r+0x8de>
 80061b8:	2300      	movs	r3, #0
 80061ba:	9306      	str	r3, [sp, #24]
 80061bc:	6933      	ldr	r3, [r6, #16]
 80061be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061c2:	6918      	ldr	r0, [r3, #16]
 80061c4:	f000 fab2 	bl	800672c <__hi0bits>
 80061c8:	f1c0 0020 	rsb	r0, r0, #32
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	4418      	add	r0, r3
 80061d0:	f010 001f 	ands.w	r0, r0, #31
 80061d4:	f000 8086 	beq.w	80062e4 <_dtoa_r+0x91c>
 80061d8:	f1c0 0320 	rsb	r3, r0, #32
 80061dc:	2b04      	cmp	r3, #4
 80061de:	dd7f      	ble.n	80062e0 <_dtoa_r+0x918>
 80061e0:	f1c0 001c 	rsb	r0, r0, #28
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	4403      	add	r3, r0
 80061e8:	4480      	add	r8, r0
 80061ea:	4405      	add	r5, r0
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	f1b8 0f00 	cmp.w	r8, #0
 80061f2:	dd05      	ble.n	8006200 <_dtoa_r+0x838>
 80061f4:	4659      	mov	r1, fp
 80061f6:	4642      	mov	r2, r8
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fbfd 	bl	80069f8 <__lshift>
 80061fe:	4683      	mov	fp, r0
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd05      	ble.n	8006212 <_dtoa_r+0x84a>
 8006206:	4631      	mov	r1, r6
 8006208:	461a      	mov	r2, r3
 800620a:	4620      	mov	r0, r4
 800620c:	f000 fbf4 	bl	80069f8 <__lshift>
 8006210:	4606      	mov	r6, r0
 8006212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d069      	beq.n	80062ec <_dtoa_r+0x924>
 8006218:	4631      	mov	r1, r6
 800621a:	4658      	mov	r0, fp
 800621c:	f000 fc58 	bl	8006ad0 <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	da63      	bge.n	80062ec <_dtoa_r+0x924>
 8006224:	2300      	movs	r3, #0
 8006226:	4659      	mov	r1, fp
 8006228:	220a      	movs	r2, #10
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fa34 	bl	8006698 <__multadd>
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006236:	4683      	mov	fp, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 818f 	beq.w	800655c <_dtoa_r+0xb94>
 800623e:	4639      	mov	r1, r7
 8006240:	2300      	movs	r3, #0
 8006242:	220a      	movs	r2, #10
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fa27 	bl	8006698 <__multadd>
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	4607      	mov	r7, r0
 8006250:	f300 808e 	bgt.w	8006370 <_dtoa_r+0x9a8>
 8006254:	9b05      	ldr	r3, [sp, #20]
 8006256:	2b02      	cmp	r3, #2
 8006258:	dc50      	bgt.n	80062fc <_dtoa_r+0x934>
 800625a:	e089      	b.n	8006370 <_dtoa_r+0x9a8>
 800625c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800625e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006262:	e75d      	b.n	8006120 <_dtoa_r+0x758>
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	1e5e      	subs	r6, r3, #1
 8006268:	9b06      	ldr	r3, [sp, #24]
 800626a:	42b3      	cmp	r3, r6
 800626c:	bfbf      	itttt	lt
 800626e:	9b06      	ldrlt	r3, [sp, #24]
 8006270:	9606      	strlt	r6, [sp, #24]
 8006272:	1af2      	sublt	r2, r6, r3
 8006274:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006276:	bfb6      	itet	lt
 8006278:	189b      	addlt	r3, r3, r2
 800627a:	1b9e      	subge	r6, r3, r6
 800627c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800627e:	9b01      	ldr	r3, [sp, #4]
 8006280:	bfb8      	it	lt
 8006282:	2600      	movlt	r6, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfb5      	itete	lt
 8006288:	eba8 0503 	sublt.w	r5, r8, r3
 800628c:	9b01      	ldrge	r3, [sp, #4]
 800628e:	2300      	movlt	r3, #0
 8006290:	4645      	movge	r5, r8
 8006292:	e747      	b.n	8006124 <_dtoa_r+0x75c>
 8006294:	9e06      	ldr	r6, [sp, #24]
 8006296:	9f08      	ldr	r7, [sp, #32]
 8006298:	4645      	mov	r5, r8
 800629a:	e74c      	b.n	8006136 <_dtoa_r+0x76e>
 800629c:	9a06      	ldr	r2, [sp, #24]
 800629e:	e775      	b.n	800618c <_dtoa_r+0x7c4>
 80062a0:	9b05      	ldr	r3, [sp, #20]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	dc18      	bgt.n	80062d8 <_dtoa_r+0x910>
 80062a6:	9b02      	ldr	r3, [sp, #8]
 80062a8:	b9b3      	cbnz	r3, 80062d8 <_dtoa_r+0x910>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062b0:	b9a3      	cbnz	r3, 80062dc <_dtoa_r+0x914>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062b8:	0d1b      	lsrs	r3, r3, #20
 80062ba:	051b      	lsls	r3, r3, #20
 80062bc:	b12b      	cbz	r3, 80062ca <_dtoa_r+0x902>
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	f108 0801 	add.w	r8, r8, #1
 80062c8:	2301      	movs	r3, #1
 80062ca:	9306      	str	r3, [sp, #24]
 80062cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f47f af74 	bne.w	80061bc <_dtoa_r+0x7f4>
 80062d4:	2001      	movs	r0, #1
 80062d6:	e779      	b.n	80061cc <_dtoa_r+0x804>
 80062d8:	2300      	movs	r3, #0
 80062da:	e7f6      	b.n	80062ca <_dtoa_r+0x902>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	e7f4      	b.n	80062ca <_dtoa_r+0x902>
 80062e0:	d085      	beq.n	80061ee <_dtoa_r+0x826>
 80062e2:	4618      	mov	r0, r3
 80062e4:	301c      	adds	r0, #28
 80062e6:	e77d      	b.n	80061e4 <_dtoa_r+0x81c>
 80062e8:	40240000 	.word	0x40240000
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dc38      	bgt.n	8006364 <_dtoa_r+0x99c>
 80062f2:	9b05      	ldr	r3, [sp, #20]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	dd35      	ble.n	8006364 <_dtoa_r+0x99c>
 80062f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062fc:	f1b9 0f00 	cmp.w	r9, #0
 8006300:	d10d      	bne.n	800631e <_dtoa_r+0x956>
 8006302:	4631      	mov	r1, r6
 8006304:	464b      	mov	r3, r9
 8006306:	2205      	movs	r2, #5
 8006308:	4620      	mov	r0, r4
 800630a:	f000 f9c5 	bl	8006698 <__multadd>
 800630e:	4601      	mov	r1, r0
 8006310:	4606      	mov	r6, r0
 8006312:	4658      	mov	r0, fp
 8006314:	f000 fbdc 	bl	8006ad0 <__mcmp>
 8006318:	2800      	cmp	r0, #0
 800631a:	f73f adbd 	bgt.w	8005e98 <_dtoa_r+0x4d0>
 800631e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006320:	9d00      	ldr	r5, [sp, #0]
 8006322:	ea6f 0a03 	mvn.w	sl, r3
 8006326:	f04f 0800 	mov.w	r8, #0
 800632a:	4631      	mov	r1, r6
 800632c:	4620      	mov	r0, r4
 800632e:	f000 f991 	bl	8006654 <_Bfree>
 8006332:	2f00      	cmp	r7, #0
 8006334:	f43f aeb4 	beq.w	80060a0 <_dtoa_r+0x6d8>
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	d005      	beq.n	800634a <_dtoa_r+0x982>
 800633e:	45b8      	cmp	r8, r7
 8006340:	d003      	beq.n	800634a <_dtoa_r+0x982>
 8006342:	4641      	mov	r1, r8
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f985 	bl	8006654 <_Bfree>
 800634a:	4639      	mov	r1, r7
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f981 	bl	8006654 <_Bfree>
 8006352:	e6a5      	b.n	80060a0 <_dtoa_r+0x6d8>
 8006354:	2600      	movs	r6, #0
 8006356:	4637      	mov	r7, r6
 8006358:	e7e1      	b.n	800631e <_dtoa_r+0x956>
 800635a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800635c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006360:	4637      	mov	r7, r6
 8006362:	e599      	b.n	8005e98 <_dtoa_r+0x4d0>
 8006364:	9b08      	ldr	r3, [sp, #32]
 8006366:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 80fd 	beq.w	800656a <_dtoa_r+0xba2>
 8006370:	2d00      	cmp	r5, #0
 8006372:	dd05      	ble.n	8006380 <_dtoa_r+0x9b8>
 8006374:	4639      	mov	r1, r7
 8006376:	462a      	mov	r2, r5
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fb3d 	bl	80069f8 <__lshift>
 800637e:	4607      	mov	r7, r0
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d05c      	beq.n	8006440 <_dtoa_r+0xa78>
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4620      	mov	r0, r4
 800638a:	f000 f923 	bl	80065d4 <_Balloc>
 800638e:	4605      	mov	r5, r0
 8006390:	b928      	cbnz	r0, 800639e <_dtoa_r+0x9d6>
 8006392:	4b80      	ldr	r3, [pc, #512]	; (8006594 <_dtoa_r+0xbcc>)
 8006394:	4602      	mov	r2, r0
 8006396:	f240 21ea 	movw	r1, #746	; 0x2ea
 800639a:	f7ff bb2e 	b.w	80059fa <_dtoa_r+0x32>
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	3202      	adds	r2, #2
 80063a2:	0092      	lsls	r2, r2, #2
 80063a4:	f107 010c 	add.w	r1, r7, #12
 80063a8:	300c      	adds	r0, #12
 80063aa:	f000 f905 	bl	80065b8 <memcpy>
 80063ae:	2201      	movs	r2, #1
 80063b0:	4629      	mov	r1, r5
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fb20 	bl	80069f8 <__lshift>
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	444b      	add	r3, r9
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	46b8      	mov	r8, r7
 80063cc:	9306      	str	r3, [sp, #24]
 80063ce:	4607      	mov	r7, r0
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	4631      	mov	r1, r6
 80063d4:	3b01      	subs	r3, #1
 80063d6:	4658      	mov	r0, fp
 80063d8:	9302      	str	r3, [sp, #8]
 80063da:	f7ff fa67 	bl	80058ac <quorem>
 80063de:	4603      	mov	r3, r0
 80063e0:	3330      	adds	r3, #48	; 0x30
 80063e2:	9004      	str	r0, [sp, #16]
 80063e4:	4641      	mov	r1, r8
 80063e6:	4658      	mov	r0, fp
 80063e8:	9308      	str	r3, [sp, #32]
 80063ea:	f000 fb71 	bl	8006ad0 <__mcmp>
 80063ee:	463a      	mov	r2, r7
 80063f0:	4681      	mov	r9, r0
 80063f2:	4631      	mov	r1, r6
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fb87 	bl	8006b08 <__mdiff>
 80063fa:	68c2      	ldr	r2, [r0, #12]
 80063fc:	9b08      	ldr	r3, [sp, #32]
 80063fe:	4605      	mov	r5, r0
 8006400:	bb02      	cbnz	r2, 8006444 <_dtoa_r+0xa7c>
 8006402:	4601      	mov	r1, r0
 8006404:	4658      	mov	r0, fp
 8006406:	f000 fb63 	bl	8006ad0 <__mcmp>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	4602      	mov	r2, r0
 800640e:	4629      	mov	r1, r5
 8006410:	4620      	mov	r0, r4
 8006412:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006416:	f000 f91d 	bl	8006654 <_Bfree>
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800641e:	9d01      	ldr	r5, [sp, #4]
 8006420:	ea43 0102 	orr.w	r1, r3, r2
 8006424:	9b06      	ldr	r3, [sp, #24]
 8006426:	430b      	orrs	r3, r1
 8006428:	9b08      	ldr	r3, [sp, #32]
 800642a:	d10d      	bne.n	8006448 <_dtoa_r+0xa80>
 800642c:	2b39      	cmp	r3, #57	; 0x39
 800642e:	d029      	beq.n	8006484 <_dtoa_r+0xabc>
 8006430:	f1b9 0f00 	cmp.w	r9, #0
 8006434:	dd01      	ble.n	800643a <_dtoa_r+0xa72>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	3331      	adds	r3, #49	; 0x31
 800643a:	9a02      	ldr	r2, [sp, #8]
 800643c:	7013      	strb	r3, [r2, #0]
 800643e:	e774      	b.n	800632a <_dtoa_r+0x962>
 8006440:	4638      	mov	r0, r7
 8006442:	e7b9      	b.n	80063b8 <_dtoa_r+0x9f0>
 8006444:	2201      	movs	r2, #1
 8006446:	e7e2      	b.n	800640e <_dtoa_r+0xa46>
 8006448:	f1b9 0f00 	cmp.w	r9, #0
 800644c:	db06      	blt.n	800645c <_dtoa_r+0xa94>
 800644e:	9905      	ldr	r1, [sp, #20]
 8006450:	ea41 0909 	orr.w	r9, r1, r9
 8006454:	9906      	ldr	r1, [sp, #24]
 8006456:	ea59 0101 	orrs.w	r1, r9, r1
 800645a:	d120      	bne.n	800649e <_dtoa_r+0xad6>
 800645c:	2a00      	cmp	r2, #0
 800645e:	ddec      	ble.n	800643a <_dtoa_r+0xa72>
 8006460:	4659      	mov	r1, fp
 8006462:	2201      	movs	r2, #1
 8006464:	4620      	mov	r0, r4
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	f000 fac6 	bl	80069f8 <__lshift>
 800646c:	4631      	mov	r1, r6
 800646e:	4683      	mov	fp, r0
 8006470:	f000 fb2e 	bl	8006ad0 <__mcmp>
 8006474:	2800      	cmp	r0, #0
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	dc02      	bgt.n	8006480 <_dtoa_r+0xab8>
 800647a:	d1de      	bne.n	800643a <_dtoa_r+0xa72>
 800647c:	07da      	lsls	r2, r3, #31
 800647e:	d5dc      	bpl.n	800643a <_dtoa_r+0xa72>
 8006480:	2b39      	cmp	r3, #57	; 0x39
 8006482:	d1d8      	bne.n	8006436 <_dtoa_r+0xa6e>
 8006484:	9a02      	ldr	r2, [sp, #8]
 8006486:	2339      	movs	r3, #57	; 0x39
 8006488:	7013      	strb	r3, [r2, #0]
 800648a:	462b      	mov	r3, r5
 800648c:	461d      	mov	r5, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006494:	2a39      	cmp	r2, #57	; 0x39
 8006496:	d050      	beq.n	800653a <_dtoa_r+0xb72>
 8006498:	3201      	adds	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	e745      	b.n	800632a <_dtoa_r+0x962>
 800649e:	2a00      	cmp	r2, #0
 80064a0:	dd03      	ble.n	80064aa <_dtoa_r+0xae2>
 80064a2:	2b39      	cmp	r3, #57	; 0x39
 80064a4:	d0ee      	beq.n	8006484 <_dtoa_r+0xabc>
 80064a6:	3301      	adds	r3, #1
 80064a8:	e7c7      	b.n	800643a <_dtoa_r+0xa72>
 80064aa:	9a01      	ldr	r2, [sp, #4]
 80064ac:	9907      	ldr	r1, [sp, #28]
 80064ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064b2:	428a      	cmp	r2, r1
 80064b4:	d02a      	beq.n	800650c <_dtoa_r+0xb44>
 80064b6:	4659      	mov	r1, fp
 80064b8:	2300      	movs	r3, #0
 80064ba:	220a      	movs	r2, #10
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f8eb 	bl	8006698 <__multadd>
 80064c2:	45b8      	cmp	r8, r7
 80064c4:	4683      	mov	fp, r0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	f04f 020a 	mov.w	r2, #10
 80064ce:	4641      	mov	r1, r8
 80064d0:	4620      	mov	r0, r4
 80064d2:	d107      	bne.n	80064e4 <_dtoa_r+0xb1c>
 80064d4:	f000 f8e0 	bl	8006698 <__multadd>
 80064d8:	4680      	mov	r8, r0
 80064da:	4607      	mov	r7, r0
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	3301      	adds	r3, #1
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	e775      	b.n	80063d0 <_dtoa_r+0xa08>
 80064e4:	f000 f8d8 	bl	8006698 <__multadd>
 80064e8:	4639      	mov	r1, r7
 80064ea:	4680      	mov	r8, r0
 80064ec:	2300      	movs	r3, #0
 80064ee:	220a      	movs	r2, #10
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 f8d1 	bl	8006698 <__multadd>
 80064f6:	4607      	mov	r7, r0
 80064f8:	e7f0      	b.n	80064dc <_dtoa_r+0xb14>
 80064fa:	f1b9 0f00 	cmp.w	r9, #0
 80064fe:	9a00      	ldr	r2, [sp, #0]
 8006500:	bfcc      	ite	gt
 8006502:	464d      	movgt	r5, r9
 8006504:	2501      	movle	r5, #1
 8006506:	4415      	add	r5, r2
 8006508:	f04f 0800 	mov.w	r8, #0
 800650c:	4659      	mov	r1, fp
 800650e:	2201      	movs	r2, #1
 8006510:	4620      	mov	r0, r4
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	f000 fa70 	bl	80069f8 <__lshift>
 8006518:	4631      	mov	r1, r6
 800651a:	4683      	mov	fp, r0
 800651c:	f000 fad8 	bl	8006ad0 <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	dcb2      	bgt.n	800648a <_dtoa_r+0xac2>
 8006524:	d102      	bne.n	800652c <_dtoa_r+0xb64>
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	07db      	lsls	r3, r3, #31
 800652a:	d4ae      	bmi.n	800648a <_dtoa_r+0xac2>
 800652c:	462b      	mov	r3, r5
 800652e:	461d      	mov	r5, r3
 8006530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006534:	2a30      	cmp	r2, #48	; 0x30
 8006536:	d0fa      	beq.n	800652e <_dtoa_r+0xb66>
 8006538:	e6f7      	b.n	800632a <_dtoa_r+0x962>
 800653a:	9a00      	ldr	r2, [sp, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d1a5      	bne.n	800648c <_dtoa_r+0xac4>
 8006540:	f10a 0a01 	add.w	sl, sl, #1
 8006544:	2331      	movs	r3, #49	; 0x31
 8006546:	e779      	b.n	800643c <_dtoa_r+0xa74>
 8006548:	4b13      	ldr	r3, [pc, #76]	; (8006598 <_dtoa_r+0xbd0>)
 800654a:	f7ff baaf 	b.w	8005aac <_dtoa_r+0xe4>
 800654e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006550:	2b00      	cmp	r3, #0
 8006552:	f47f aa86 	bne.w	8005a62 <_dtoa_r+0x9a>
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <_dtoa_r+0xbd4>)
 8006558:	f7ff baa8 	b.w	8005aac <_dtoa_r+0xe4>
 800655c:	f1b9 0f00 	cmp.w	r9, #0
 8006560:	dc03      	bgt.n	800656a <_dtoa_r+0xba2>
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	2b02      	cmp	r3, #2
 8006566:	f73f aec9 	bgt.w	80062fc <_dtoa_r+0x934>
 800656a:	9d00      	ldr	r5, [sp, #0]
 800656c:	4631      	mov	r1, r6
 800656e:	4658      	mov	r0, fp
 8006570:	f7ff f99c 	bl	80058ac <quorem>
 8006574:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006578:	f805 3b01 	strb.w	r3, [r5], #1
 800657c:	9a00      	ldr	r2, [sp, #0]
 800657e:	1aaa      	subs	r2, r5, r2
 8006580:	4591      	cmp	r9, r2
 8006582:	ddba      	ble.n	80064fa <_dtoa_r+0xb32>
 8006584:	4659      	mov	r1, fp
 8006586:	2300      	movs	r3, #0
 8006588:	220a      	movs	r2, #10
 800658a:	4620      	mov	r0, r4
 800658c:	f000 f884 	bl	8006698 <__multadd>
 8006590:	4683      	mov	fp, r0
 8006592:	e7eb      	b.n	800656c <_dtoa_r+0xba4>
 8006594:	08007e4b 	.word	0x08007e4b
 8006598:	08007da4 	.word	0x08007da4
 800659c:	08007dc8 	.word	0x08007dc8

080065a0 <_localeconv_r>:
 80065a0:	4800      	ldr	r0, [pc, #0]	; (80065a4 <_localeconv_r+0x4>)
 80065a2:	4770      	bx	lr
 80065a4:	20000160 	.word	0x20000160

080065a8 <malloc>:
 80065a8:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <malloc+0xc>)
 80065aa:	4601      	mov	r1, r0
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f000 bbef 	b.w	8006d90 <_malloc_r>
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c

080065b8 <memcpy>:
 80065b8:	440a      	add	r2, r1
 80065ba:	4291      	cmp	r1, r2
 80065bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c0:	d100      	bne.n	80065c4 <memcpy+0xc>
 80065c2:	4770      	bx	lr
 80065c4:	b510      	push	{r4, lr}
 80065c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ce:	4291      	cmp	r1, r2
 80065d0:	d1f9      	bne.n	80065c6 <memcpy+0xe>
 80065d2:	bd10      	pop	{r4, pc}

080065d4 <_Balloc>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	b976      	cbnz	r6, 80065fc <_Balloc+0x28>
 80065de:	2010      	movs	r0, #16
 80065e0:	f7ff ffe2 	bl	80065a8 <malloc>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6260      	str	r0, [r4, #36]	; 0x24
 80065e8:	b920      	cbnz	r0, 80065f4 <_Balloc+0x20>
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <_Balloc+0x78>)
 80065ec:	4818      	ldr	r0, [pc, #96]	; (8006650 <_Balloc+0x7c>)
 80065ee:	2166      	movs	r1, #102	; 0x66
 80065f0:	f000 fd94 	bl	800711c <__assert_func>
 80065f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065f8:	6006      	str	r6, [r0, #0]
 80065fa:	60c6      	str	r6, [r0, #12]
 80065fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065fe:	68f3      	ldr	r3, [r6, #12]
 8006600:	b183      	cbz	r3, 8006624 <_Balloc+0x50>
 8006602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800660a:	b9b8      	cbnz	r0, 800663c <_Balloc+0x68>
 800660c:	2101      	movs	r1, #1
 800660e:	fa01 f605 	lsl.w	r6, r1, r5
 8006612:	1d72      	adds	r2, r6, #5
 8006614:	0092      	lsls	r2, r2, #2
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fb5a 	bl	8006cd0 <_calloc_r>
 800661c:	b160      	cbz	r0, 8006638 <_Balloc+0x64>
 800661e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006622:	e00e      	b.n	8006642 <_Balloc+0x6e>
 8006624:	2221      	movs	r2, #33	; 0x21
 8006626:	2104      	movs	r1, #4
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fb51 	bl	8006cd0 <_calloc_r>
 800662e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006630:	60f0      	str	r0, [r6, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e4      	bne.n	8006602 <_Balloc+0x2e>
 8006638:	2000      	movs	r0, #0
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	6802      	ldr	r2, [r0, #0]
 800663e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006642:	2300      	movs	r3, #0
 8006644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006648:	e7f7      	b.n	800663a <_Balloc+0x66>
 800664a:	bf00      	nop
 800664c:	08007dd5 	.word	0x08007dd5
 8006650:	08007e5c 	.word	0x08007e5c

08006654 <_Bfree>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006658:	4605      	mov	r5, r0
 800665a:	460c      	mov	r4, r1
 800665c:	b976      	cbnz	r6, 800667c <_Bfree+0x28>
 800665e:	2010      	movs	r0, #16
 8006660:	f7ff ffa2 	bl	80065a8 <malloc>
 8006664:	4602      	mov	r2, r0
 8006666:	6268      	str	r0, [r5, #36]	; 0x24
 8006668:	b920      	cbnz	r0, 8006674 <_Bfree+0x20>
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <_Bfree+0x3c>)
 800666c:	4809      	ldr	r0, [pc, #36]	; (8006694 <_Bfree+0x40>)
 800666e:	218a      	movs	r1, #138	; 0x8a
 8006670:	f000 fd54 	bl	800711c <__assert_func>
 8006674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006678:	6006      	str	r6, [r0, #0]
 800667a:	60c6      	str	r6, [r0, #12]
 800667c:	b13c      	cbz	r4, 800668e <_Bfree+0x3a>
 800667e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006688:	6021      	str	r1, [r4, #0]
 800668a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	08007dd5 	.word	0x08007dd5
 8006694:	08007e5c 	.word	0x08007e5c

08006698 <__multadd>:
 8006698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669c:	690e      	ldr	r6, [r1, #16]
 800669e:	4607      	mov	r7, r0
 80066a0:	4698      	mov	r8, r3
 80066a2:	460c      	mov	r4, r1
 80066a4:	f101 0014 	add.w	r0, r1, #20
 80066a8:	2300      	movs	r3, #0
 80066aa:	6805      	ldr	r5, [r0, #0]
 80066ac:	b2a9      	uxth	r1, r5
 80066ae:	fb02 8101 	mla	r1, r2, r1, r8
 80066b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80066b6:	0c2d      	lsrs	r5, r5, #16
 80066b8:	fb02 c505 	mla	r5, r2, r5, ip
 80066bc:	b289      	uxth	r1, r1
 80066be:	3301      	adds	r3, #1
 80066c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80066c4:	429e      	cmp	r6, r3
 80066c6:	f840 1b04 	str.w	r1, [r0], #4
 80066ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066ce:	dcec      	bgt.n	80066aa <__multadd+0x12>
 80066d0:	f1b8 0f00 	cmp.w	r8, #0
 80066d4:	d022      	beq.n	800671c <__multadd+0x84>
 80066d6:	68a3      	ldr	r3, [r4, #8]
 80066d8:	42b3      	cmp	r3, r6
 80066da:	dc19      	bgt.n	8006710 <__multadd+0x78>
 80066dc:	6861      	ldr	r1, [r4, #4]
 80066de:	4638      	mov	r0, r7
 80066e0:	3101      	adds	r1, #1
 80066e2:	f7ff ff77 	bl	80065d4 <_Balloc>
 80066e6:	4605      	mov	r5, r0
 80066e8:	b928      	cbnz	r0, 80066f6 <__multadd+0x5e>
 80066ea:	4602      	mov	r2, r0
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <__multadd+0x8c>)
 80066ee:	480e      	ldr	r0, [pc, #56]	; (8006728 <__multadd+0x90>)
 80066f0:	21b5      	movs	r1, #181	; 0xb5
 80066f2:	f000 fd13 	bl	800711c <__assert_func>
 80066f6:	6922      	ldr	r2, [r4, #16]
 80066f8:	3202      	adds	r2, #2
 80066fa:	f104 010c 	add.w	r1, r4, #12
 80066fe:	0092      	lsls	r2, r2, #2
 8006700:	300c      	adds	r0, #12
 8006702:	f7ff ff59 	bl	80065b8 <memcpy>
 8006706:	4621      	mov	r1, r4
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ffa3 	bl	8006654 <_Bfree>
 800670e:	462c      	mov	r4, r5
 8006710:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006714:	3601      	adds	r6, #1
 8006716:	f8c3 8014 	str.w	r8, [r3, #20]
 800671a:	6126      	str	r6, [r4, #16]
 800671c:	4620      	mov	r0, r4
 800671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006722:	bf00      	nop
 8006724:	08007e4b 	.word	0x08007e4b
 8006728:	08007e5c 	.word	0x08007e5c

0800672c <__hi0bits>:
 800672c:	0c03      	lsrs	r3, r0, #16
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	b9d3      	cbnz	r3, 8006768 <__hi0bits+0x3c>
 8006732:	0400      	lsls	r0, r0, #16
 8006734:	2310      	movs	r3, #16
 8006736:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800673a:	bf04      	itt	eq
 800673c:	0200      	lsleq	r0, r0, #8
 800673e:	3308      	addeq	r3, #8
 8006740:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006744:	bf04      	itt	eq
 8006746:	0100      	lsleq	r0, r0, #4
 8006748:	3304      	addeq	r3, #4
 800674a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800674e:	bf04      	itt	eq
 8006750:	0080      	lsleq	r0, r0, #2
 8006752:	3302      	addeq	r3, #2
 8006754:	2800      	cmp	r0, #0
 8006756:	db05      	blt.n	8006764 <__hi0bits+0x38>
 8006758:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800675c:	f103 0301 	add.w	r3, r3, #1
 8006760:	bf08      	it	eq
 8006762:	2320      	moveq	r3, #32
 8006764:	4618      	mov	r0, r3
 8006766:	4770      	bx	lr
 8006768:	2300      	movs	r3, #0
 800676a:	e7e4      	b.n	8006736 <__hi0bits+0xa>

0800676c <__lo0bits>:
 800676c:	6803      	ldr	r3, [r0, #0]
 800676e:	f013 0207 	ands.w	r2, r3, #7
 8006772:	4601      	mov	r1, r0
 8006774:	d00b      	beq.n	800678e <__lo0bits+0x22>
 8006776:	07da      	lsls	r2, r3, #31
 8006778:	d424      	bmi.n	80067c4 <__lo0bits+0x58>
 800677a:	0798      	lsls	r0, r3, #30
 800677c:	bf49      	itett	mi
 800677e:	085b      	lsrmi	r3, r3, #1
 8006780:	089b      	lsrpl	r3, r3, #2
 8006782:	2001      	movmi	r0, #1
 8006784:	600b      	strmi	r3, [r1, #0]
 8006786:	bf5c      	itt	pl
 8006788:	600b      	strpl	r3, [r1, #0]
 800678a:	2002      	movpl	r0, #2
 800678c:	4770      	bx	lr
 800678e:	b298      	uxth	r0, r3
 8006790:	b9b0      	cbnz	r0, 80067c0 <__lo0bits+0x54>
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	2010      	movs	r0, #16
 8006796:	f013 0fff 	tst.w	r3, #255	; 0xff
 800679a:	bf04      	itt	eq
 800679c:	0a1b      	lsreq	r3, r3, #8
 800679e:	3008      	addeq	r0, #8
 80067a0:	071a      	lsls	r2, r3, #28
 80067a2:	bf04      	itt	eq
 80067a4:	091b      	lsreq	r3, r3, #4
 80067a6:	3004      	addeq	r0, #4
 80067a8:	079a      	lsls	r2, r3, #30
 80067aa:	bf04      	itt	eq
 80067ac:	089b      	lsreq	r3, r3, #2
 80067ae:	3002      	addeq	r0, #2
 80067b0:	07da      	lsls	r2, r3, #31
 80067b2:	d403      	bmi.n	80067bc <__lo0bits+0x50>
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	f100 0001 	add.w	r0, r0, #1
 80067ba:	d005      	beq.n	80067c8 <__lo0bits+0x5c>
 80067bc:	600b      	str	r3, [r1, #0]
 80067be:	4770      	bx	lr
 80067c0:	4610      	mov	r0, r2
 80067c2:	e7e8      	b.n	8006796 <__lo0bits+0x2a>
 80067c4:	2000      	movs	r0, #0
 80067c6:	4770      	bx	lr
 80067c8:	2020      	movs	r0, #32
 80067ca:	4770      	bx	lr

080067cc <__i2b>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	2101      	movs	r1, #1
 80067d2:	f7ff feff 	bl	80065d4 <_Balloc>
 80067d6:	4602      	mov	r2, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <__i2b+0x1a>
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <__i2b+0x24>)
 80067dc:	4805      	ldr	r0, [pc, #20]	; (80067f4 <__i2b+0x28>)
 80067de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067e2:	f000 fc9b 	bl	800711c <__assert_func>
 80067e6:	2301      	movs	r3, #1
 80067e8:	6144      	str	r4, [r0, #20]
 80067ea:	6103      	str	r3, [r0, #16]
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	bf00      	nop
 80067f0:	08007e4b 	.word	0x08007e4b
 80067f4:	08007e5c 	.word	0x08007e5c

080067f8 <__multiply>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4614      	mov	r4, r2
 80067fe:	690a      	ldr	r2, [r1, #16]
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	bfb8      	it	lt
 8006806:	460b      	movlt	r3, r1
 8006808:	460d      	mov	r5, r1
 800680a:	bfbc      	itt	lt
 800680c:	4625      	movlt	r5, r4
 800680e:	461c      	movlt	r4, r3
 8006810:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006814:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006818:	68ab      	ldr	r3, [r5, #8]
 800681a:	6869      	ldr	r1, [r5, #4]
 800681c:	eb0a 0709 	add.w	r7, sl, r9
 8006820:	42bb      	cmp	r3, r7
 8006822:	b085      	sub	sp, #20
 8006824:	bfb8      	it	lt
 8006826:	3101      	addlt	r1, #1
 8006828:	f7ff fed4 	bl	80065d4 <_Balloc>
 800682c:	b930      	cbnz	r0, 800683c <__multiply+0x44>
 800682e:	4602      	mov	r2, r0
 8006830:	4b42      	ldr	r3, [pc, #264]	; (800693c <__multiply+0x144>)
 8006832:	4843      	ldr	r0, [pc, #268]	; (8006940 <__multiply+0x148>)
 8006834:	f240 115d 	movw	r1, #349	; 0x15d
 8006838:	f000 fc70 	bl	800711c <__assert_func>
 800683c:	f100 0614 	add.w	r6, r0, #20
 8006840:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006844:	4633      	mov	r3, r6
 8006846:	2200      	movs	r2, #0
 8006848:	4543      	cmp	r3, r8
 800684a:	d31e      	bcc.n	800688a <__multiply+0x92>
 800684c:	f105 0c14 	add.w	ip, r5, #20
 8006850:	f104 0314 	add.w	r3, r4, #20
 8006854:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006858:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800685c:	9202      	str	r2, [sp, #8]
 800685e:	ebac 0205 	sub.w	r2, ip, r5
 8006862:	3a15      	subs	r2, #21
 8006864:	f022 0203 	bic.w	r2, r2, #3
 8006868:	3204      	adds	r2, #4
 800686a:	f105 0115 	add.w	r1, r5, #21
 800686e:	458c      	cmp	ip, r1
 8006870:	bf38      	it	cc
 8006872:	2204      	movcc	r2, #4
 8006874:	9201      	str	r2, [sp, #4]
 8006876:	9a02      	ldr	r2, [sp, #8]
 8006878:	9303      	str	r3, [sp, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d808      	bhi.n	8006890 <__multiply+0x98>
 800687e:	2f00      	cmp	r7, #0
 8006880:	dc55      	bgt.n	800692e <__multiply+0x136>
 8006882:	6107      	str	r7, [r0, #16]
 8006884:	b005      	add	sp, #20
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	f843 2b04 	str.w	r2, [r3], #4
 800688e:	e7db      	b.n	8006848 <__multiply+0x50>
 8006890:	f8b3 a000 	ldrh.w	sl, [r3]
 8006894:	f1ba 0f00 	cmp.w	sl, #0
 8006898:	d020      	beq.n	80068dc <__multiply+0xe4>
 800689a:	f105 0e14 	add.w	lr, r5, #20
 800689e:	46b1      	mov	r9, r6
 80068a0:	2200      	movs	r2, #0
 80068a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068a6:	f8d9 b000 	ldr.w	fp, [r9]
 80068aa:	b2a1      	uxth	r1, r4
 80068ac:	fa1f fb8b 	uxth.w	fp, fp
 80068b0:	fb0a b101 	mla	r1, sl, r1, fp
 80068b4:	4411      	add	r1, r2
 80068b6:	f8d9 2000 	ldr.w	r2, [r9]
 80068ba:	0c24      	lsrs	r4, r4, #16
 80068bc:	0c12      	lsrs	r2, r2, #16
 80068be:	fb0a 2404 	mla	r4, sl, r4, r2
 80068c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80068c6:	b289      	uxth	r1, r1
 80068c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068cc:	45f4      	cmp	ip, lr
 80068ce:	f849 1b04 	str.w	r1, [r9], #4
 80068d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068d6:	d8e4      	bhi.n	80068a2 <__multiply+0xaa>
 80068d8:	9901      	ldr	r1, [sp, #4]
 80068da:	5072      	str	r2, [r6, r1]
 80068dc:	9a03      	ldr	r2, [sp, #12]
 80068de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068e2:	3304      	adds	r3, #4
 80068e4:	f1b9 0f00 	cmp.w	r9, #0
 80068e8:	d01f      	beq.n	800692a <__multiply+0x132>
 80068ea:	6834      	ldr	r4, [r6, #0]
 80068ec:	f105 0114 	add.w	r1, r5, #20
 80068f0:	46b6      	mov	lr, r6
 80068f2:	f04f 0a00 	mov.w	sl, #0
 80068f6:	880a      	ldrh	r2, [r1, #0]
 80068f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068fc:	fb09 b202 	mla	r2, r9, r2, fp
 8006900:	4492      	add	sl, r2
 8006902:	b2a4      	uxth	r4, r4
 8006904:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006908:	f84e 4b04 	str.w	r4, [lr], #4
 800690c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006910:	f8be 2000 	ldrh.w	r2, [lr]
 8006914:	0c24      	lsrs	r4, r4, #16
 8006916:	fb09 2404 	mla	r4, r9, r4, r2
 800691a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800691e:	458c      	cmp	ip, r1
 8006920:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006924:	d8e7      	bhi.n	80068f6 <__multiply+0xfe>
 8006926:	9a01      	ldr	r2, [sp, #4]
 8006928:	50b4      	str	r4, [r6, r2]
 800692a:	3604      	adds	r6, #4
 800692c:	e7a3      	b.n	8006876 <__multiply+0x7e>
 800692e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1a5      	bne.n	8006882 <__multiply+0x8a>
 8006936:	3f01      	subs	r7, #1
 8006938:	e7a1      	b.n	800687e <__multiply+0x86>
 800693a:	bf00      	nop
 800693c:	08007e4b 	.word	0x08007e4b
 8006940:	08007e5c 	.word	0x08007e5c

08006944 <__pow5mult>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	4615      	mov	r5, r2
 800694a:	f012 0203 	ands.w	r2, r2, #3
 800694e:	4606      	mov	r6, r0
 8006950:	460f      	mov	r7, r1
 8006952:	d007      	beq.n	8006964 <__pow5mult+0x20>
 8006954:	4c25      	ldr	r4, [pc, #148]	; (80069ec <__pow5mult+0xa8>)
 8006956:	3a01      	subs	r2, #1
 8006958:	2300      	movs	r3, #0
 800695a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800695e:	f7ff fe9b 	bl	8006698 <__multadd>
 8006962:	4607      	mov	r7, r0
 8006964:	10ad      	asrs	r5, r5, #2
 8006966:	d03d      	beq.n	80069e4 <__pow5mult+0xa0>
 8006968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800696a:	b97c      	cbnz	r4, 800698c <__pow5mult+0x48>
 800696c:	2010      	movs	r0, #16
 800696e:	f7ff fe1b 	bl	80065a8 <malloc>
 8006972:	4602      	mov	r2, r0
 8006974:	6270      	str	r0, [r6, #36]	; 0x24
 8006976:	b928      	cbnz	r0, 8006984 <__pow5mult+0x40>
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <__pow5mult+0xac>)
 800697a:	481e      	ldr	r0, [pc, #120]	; (80069f4 <__pow5mult+0xb0>)
 800697c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006980:	f000 fbcc 	bl	800711c <__assert_func>
 8006984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006988:	6004      	str	r4, [r0, #0]
 800698a:	60c4      	str	r4, [r0, #12]
 800698c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006994:	b94c      	cbnz	r4, 80069aa <__pow5mult+0x66>
 8006996:	f240 2171 	movw	r1, #625	; 0x271
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff ff16 	bl	80067cc <__i2b>
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80069a6:	4604      	mov	r4, r0
 80069a8:	6003      	str	r3, [r0, #0]
 80069aa:	f04f 0900 	mov.w	r9, #0
 80069ae:	07eb      	lsls	r3, r5, #31
 80069b0:	d50a      	bpl.n	80069c8 <__pow5mult+0x84>
 80069b2:	4639      	mov	r1, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ff1e 	bl	80067f8 <__multiply>
 80069bc:	4639      	mov	r1, r7
 80069be:	4680      	mov	r8, r0
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7ff fe47 	bl	8006654 <_Bfree>
 80069c6:	4647      	mov	r7, r8
 80069c8:	106d      	asrs	r5, r5, #1
 80069ca:	d00b      	beq.n	80069e4 <__pow5mult+0xa0>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	b938      	cbnz	r0, 80069e0 <__pow5mult+0x9c>
 80069d0:	4622      	mov	r2, r4
 80069d2:	4621      	mov	r1, r4
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ff0f 	bl	80067f8 <__multiply>
 80069da:	6020      	str	r0, [r4, #0]
 80069dc:	f8c0 9000 	str.w	r9, [r0]
 80069e0:	4604      	mov	r4, r0
 80069e2:	e7e4      	b.n	80069ae <__pow5mult+0x6a>
 80069e4:	4638      	mov	r0, r7
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ea:	bf00      	nop
 80069ec:	08007fb0 	.word	0x08007fb0
 80069f0:	08007dd5 	.word	0x08007dd5
 80069f4:	08007e5c 	.word	0x08007e5c

080069f8 <__lshift>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	460c      	mov	r4, r1
 80069fe:	6849      	ldr	r1, [r1, #4]
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	4607      	mov	r7, r0
 8006a0a:	4691      	mov	r9, r2
 8006a0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a10:	f108 0601 	add.w	r6, r8, #1
 8006a14:	42b3      	cmp	r3, r6
 8006a16:	db0b      	blt.n	8006a30 <__lshift+0x38>
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f7ff fddb 	bl	80065d4 <_Balloc>
 8006a1e:	4605      	mov	r5, r0
 8006a20:	b948      	cbnz	r0, 8006a36 <__lshift+0x3e>
 8006a22:	4602      	mov	r2, r0
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <__lshift+0xd0>)
 8006a26:	4829      	ldr	r0, [pc, #164]	; (8006acc <__lshift+0xd4>)
 8006a28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a2c:	f000 fb76 	bl	800711c <__assert_func>
 8006a30:	3101      	adds	r1, #1
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	e7ee      	b.n	8006a14 <__lshift+0x1c>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f100 0114 	add.w	r1, r0, #20
 8006a3c:	f100 0210 	add.w	r2, r0, #16
 8006a40:	4618      	mov	r0, r3
 8006a42:	4553      	cmp	r3, sl
 8006a44:	db33      	blt.n	8006aae <__lshift+0xb6>
 8006a46:	6920      	ldr	r0, [r4, #16]
 8006a48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a4c:	f104 0314 	add.w	r3, r4, #20
 8006a50:	f019 091f 	ands.w	r9, r9, #31
 8006a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a5c:	d02b      	beq.n	8006ab6 <__lshift+0xbe>
 8006a5e:	f1c9 0e20 	rsb	lr, r9, #32
 8006a62:	468a      	mov	sl, r1
 8006a64:	2200      	movs	r2, #0
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	fa00 f009 	lsl.w	r0, r0, r9
 8006a6c:	4302      	orrs	r2, r0
 8006a6e:	f84a 2b04 	str.w	r2, [sl], #4
 8006a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a76:	459c      	cmp	ip, r3
 8006a78:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a7c:	d8f3      	bhi.n	8006a66 <__lshift+0x6e>
 8006a7e:	ebac 0304 	sub.w	r3, ip, r4
 8006a82:	3b15      	subs	r3, #21
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	3304      	adds	r3, #4
 8006a8a:	f104 0015 	add.w	r0, r4, #21
 8006a8e:	4584      	cmp	ip, r0
 8006a90:	bf38      	it	cc
 8006a92:	2304      	movcc	r3, #4
 8006a94:	50ca      	str	r2, [r1, r3]
 8006a96:	b10a      	cbz	r2, 8006a9c <__lshift+0xa4>
 8006a98:	f108 0602 	add.w	r6, r8, #2
 8006a9c:	3e01      	subs	r6, #1
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	612e      	str	r6, [r5, #16]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	f7ff fdd6 	bl	8006654 <_Bfree>
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aae:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	e7c5      	b.n	8006a42 <__lshift+0x4a>
 8006ab6:	3904      	subs	r1, #4
 8006ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ac0:	459c      	cmp	ip, r3
 8006ac2:	d8f9      	bhi.n	8006ab8 <__lshift+0xc0>
 8006ac4:	e7ea      	b.n	8006a9c <__lshift+0xa4>
 8006ac6:	bf00      	nop
 8006ac8:	08007e4b 	.word	0x08007e4b
 8006acc:	08007e5c 	.word	0x08007e5c

08006ad0 <__mcmp>:
 8006ad0:	b530      	push	{r4, r5, lr}
 8006ad2:	6902      	ldr	r2, [r0, #16]
 8006ad4:	690c      	ldr	r4, [r1, #16]
 8006ad6:	1b12      	subs	r2, r2, r4
 8006ad8:	d10e      	bne.n	8006af8 <__mcmp+0x28>
 8006ada:	f100 0314 	add.w	r3, r0, #20
 8006ade:	3114      	adds	r1, #20
 8006ae0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ae4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ae8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006aec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006af0:	42a5      	cmp	r5, r4
 8006af2:	d003      	beq.n	8006afc <__mcmp+0x2c>
 8006af4:	d305      	bcc.n	8006b02 <__mcmp+0x32>
 8006af6:	2201      	movs	r2, #1
 8006af8:	4610      	mov	r0, r2
 8006afa:	bd30      	pop	{r4, r5, pc}
 8006afc:	4283      	cmp	r3, r0
 8006afe:	d3f3      	bcc.n	8006ae8 <__mcmp+0x18>
 8006b00:	e7fa      	b.n	8006af8 <__mcmp+0x28>
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	e7f7      	b.n	8006af8 <__mcmp+0x28>

08006b08 <__mdiff>:
 8006b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	4611      	mov	r1, r2
 8006b12:	4620      	mov	r0, r4
 8006b14:	4617      	mov	r7, r2
 8006b16:	f7ff ffdb 	bl	8006ad0 <__mcmp>
 8006b1a:	1e05      	subs	r5, r0, #0
 8006b1c:	d110      	bne.n	8006b40 <__mdiff+0x38>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff fd57 	bl	80065d4 <_Balloc>
 8006b26:	b930      	cbnz	r0, 8006b36 <__mdiff+0x2e>
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <__mdiff+0x108>)
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	f240 2132 	movw	r1, #562	; 0x232
 8006b30:	4838      	ldr	r0, [pc, #224]	; (8006c14 <__mdiff+0x10c>)
 8006b32:	f000 faf3 	bl	800711c <__assert_func>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b40:	bfa4      	itt	ge
 8006b42:	463b      	movge	r3, r7
 8006b44:	4627      	movge	r7, r4
 8006b46:	4630      	mov	r0, r6
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	bfa6      	itte	ge
 8006b4c:	461c      	movge	r4, r3
 8006b4e:	2500      	movge	r5, #0
 8006b50:	2501      	movlt	r5, #1
 8006b52:	f7ff fd3f 	bl	80065d4 <_Balloc>
 8006b56:	b920      	cbnz	r0, 8006b62 <__mdiff+0x5a>
 8006b58:	4b2d      	ldr	r3, [pc, #180]	; (8006c10 <__mdiff+0x108>)
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b60:	e7e6      	b.n	8006b30 <__mdiff+0x28>
 8006b62:	693e      	ldr	r6, [r7, #16]
 8006b64:	60c5      	str	r5, [r0, #12]
 8006b66:	6925      	ldr	r5, [r4, #16]
 8006b68:	f107 0114 	add.w	r1, r7, #20
 8006b6c:	f104 0914 	add.w	r9, r4, #20
 8006b70:	f100 0e14 	add.w	lr, r0, #20
 8006b74:	f107 0210 	add.w	r2, r7, #16
 8006b78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006b7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006b80:	46f2      	mov	sl, lr
 8006b82:	2700      	movs	r7, #0
 8006b84:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b8c:	fa1f f883 	uxth.w	r8, r3
 8006b90:	fa17 f78b 	uxtah	r7, r7, fp
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	eba7 0808 	sub.w	r8, r7, r8
 8006b9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ba2:	fa1f f888 	uxth.w	r8, r8
 8006ba6:	141f      	asrs	r7, r3, #16
 8006ba8:	454d      	cmp	r5, r9
 8006baa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006bae:	f84a 3b04 	str.w	r3, [sl], #4
 8006bb2:	d8e7      	bhi.n	8006b84 <__mdiff+0x7c>
 8006bb4:	1b2b      	subs	r3, r5, r4
 8006bb6:	3b15      	subs	r3, #21
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	3415      	adds	r4, #21
 8006bc0:	42a5      	cmp	r5, r4
 8006bc2:	bf38      	it	cc
 8006bc4:	2304      	movcc	r3, #4
 8006bc6:	4419      	add	r1, r3
 8006bc8:	4473      	add	r3, lr
 8006bca:	469e      	mov	lr, r3
 8006bcc:	460d      	mov	r5, r1
 8006bce:	4565      	cmp	r5, ip
 8006bd0:	d30e      	bcc.n	8006bf0 <__mdiff+0xe8>
 8006bd2:	f10c 0203 	add.w	r2, ip, #3
 8006bd6:	1a52      	subs	r2, r2, r1
 8006bd8:	f022 0203 	bic.w	r2, r2, #3
 8006bdc:	3903      	subs	r1, #3
 8006bde:	458c      	cmp	ip, r1
 8006be0:	bf38      	it	cc
 8006be2:	2200      	movcc	r2, #0
 8006be4:	441a      	add	r2, r3
 8006be6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006bea:	b17b      	cbz	r3, 8006c0c <__mdiff+0x104>
 8006bec:	6106      	str	r6, [r0, #16]
 8006bee:	e7a5      	b.n	8006b3c <__mdiff+0x34>
 8006bf0:	f855 8b04 	ldr.w	r8, [r5], #4
 8006bf4:	fa17 f488 	uxtah	r4, r7, r8
 8006bf8:	1422      	asrs	r2, r4, #16
 8006bfa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006bfe:	b2a4      	uxth	r4, r4
 8006c00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006c04:	f84e 4b04 	str.w	r4, [lr], #4
 8006c08:	1417      	asrs	r7, r2, #16
 8006c0a:	e7e0      	b.n	8006bce <__mdiff+0xc6>
 8006c0c:	3e01      	subs	r6, #1
 8006c0e:	e7ea      	b.n	8006be6 <__mdiff+0xde>
 8006c10:	08007e4b 	.word	0x08007e4b
 8006c14:	08007e5c 	.word	0x08007e5c

08006c18 <__d2b>:
 8006c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	2101      	movs	r1, #1
 8006c20:	ec57 6b10 	vmov	r6, r7, d0
 8006c24:	4690      	mov	r8, r2
 8006c26:	f7ff fcd5 	bl	80065d4 <_Balloc>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b930      	cbnz	r0, 8006c3c <__d2b+0x24>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <__d2b+0xb0>)
 8006c32:	4826      	ldr	r0, [pc, #152]	; (8006ccc <__d2b+0xb4>)
 8006c34:	f240 310a 	movw	r1, #778	; 0x30a
 8006c38:	f000 fa70 	bl	800711c <__assert_func>
 8006c3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c44:	bb35      	cbnz	r5, 8006c94 <__d2b+0x7c>
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	d028      	beq.n	8006c9e <__d2b+0x86>
 8006c4c:	4668      	mov	r0, sp
 8006c4e:	9600      	str	r6, [sp, #0]
 8006c50:	f7ff fd8c 	bl	800676c <__lo0bits>
 8006c54:	9900      	ldr	r1, [sp, #0]
 8006c56:	b300      	cbz	r0, 8006c9a <__d2b+0x82>
 8006c58:	9a01      	ldr	r2, [sp, #4]
 8006c5a:	f1c0 0320 	rsb	r3, r0, #32
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	430b      	orrs	r3, r1
 8006c64:	40c2      	lsrs	r2, r0
 8006c66:	6163      	str	r3, [r4, #20]
 8006c68:	9201      	str	r2, [sp, #4]
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	61a3      	str	r3, [r4, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bf14      	ite	ne
 8006c72:	2202      	movne	r2, #2
 8006c74:	2201      	moveq	r2, #1
 8006c76:	6122      	str	r2, [r4, #16]
 8006c78:	b1d5      	cbz	r5, 8006cb0 <__d2b+0x98>
 8006c7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c7e:	4405      	add	r5, r0
 8006c80:	f8c9 5000 	str.w	r5, [r9]
 8006c84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c88:	f8c8 0000 	str.w	r0, [r8]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	b003      	add	sp, #12
 8006c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c98:	e7d5      	b.n	8006c46 <__d2b+0x2e>
 8006c9a:	6161      	str	r1, [r4, #20]
 8006c9c:	e7e5      	b.n	8006c6a <__d2b+0x52>
 8006c9e:	a801      	add	r0, sp, #4
 8006ca0:	f7ff fd64 	bl	800676c <__lo0bits>
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	6163      	str	r3, [r4, #20]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	6122      	str	r2, [r4, #16]
 8006cac:	3020      	adds	r0, #32
 8006cae:	e7e3      	b.n	8006c78 <__d2b+0x60>
 8006cb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cb8:	f8c9 0000 	str.w	r0, [r9]
 8006cbc:	6918      	ldr	r0, [r3, #16]
 8006cbe:	f7ff fd35 	bl	800672c <__hi0bits>
 8006cc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cc6:	e7df      	b.n	8006c88 <__d2b+0x70>
 8006cc8:	08007e4b 	.word	0x08007e4b
 8006ccc:	08007e5c 	.word	0x08007e5c

08006cd0 <_calloc_r>:
 8006cd0:	b513      	push	{r0, r1, r4, lr}
 8006cd2:	434a      	muls	r2, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	9201      	str	r2, [sp, #4]
 8006cd8:	f000 f85a 	bl	8006d90 <_malloc_r>
 8006cdc:	4604      	mov	r4, r0
 8006cde:	b118      	cbz	r0, 8006ce8 <_calloc_r+0x18>
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f7fe f950 	bl	8004f88 <memset>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	b002      	add	sp, #8
 8006cec:	bd10      	pop	{r4, pc}
	...

08006cf0 <_free_r>:
 8006cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d048      	beq.n	8006d88 <_free_r+0x98>
 8006cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006d02:	bfb8      	it	lt
 8006d04:	18e4      	addlt	r4, r4, r3
 8006d06:	f000 fa65 	bl	80071d4 <__malloc_lock>
 8006d0a:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <_free_r+0x9c>)
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	4615      	mov	r5, r2
 8006d12:	b933      	cbnz	r3, 8006d22 <_free_r+0x32>
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	6014      	str	r4, [r2, #0]
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d1e:	f000 ba5f 	b.w	80071e0 <__malloc_unlock>
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	d90b      	bls.n	8006d3e <_free_r+0x4e>
 8006d26:	6821      	ldr	r1, [r4, #0]
 8006d28:	1862      	adds	r2, r4, r1
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	bf04      	itt	eq
 8006d2e:	681a      	ldreq	r2, [r3, #0]
 8006d30:	685b      	ldreq	r3, [r3, #4]
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	bf04      	itt	eq
 8006d36:	1852      	addeq	r2, r2, r1
 8006d38:	6022      	streq	r2, [r4, #0]
 8006d3a:	602c      	str	r4, [r5, #0]
 8006d3c:	e7ec      	b.n	8006d18 <_free_r+0x28>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b10b      	cbz	r3, 8006d48 <_free_r+0x58>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d9fa      	bls.n	8006d3e <_free_r+0x4e>
 8006d48:	6811      	ldr	r1, [r2, #0]
 8006d4a:	1855      	adds	r5, r2, r1
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d10b      	bne.n	8006d68 <_free_r+0x78>
 8006d50:	6824      	ldr	r4, [r4, #0]
 8006d52:	4421      	add	r1, r4
 8006d54:	1854      	adds	r4, r2, r1
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	d1dd      	bne.n	8006d18 <_free_r+0x28>
 8006d5c:	681c      	ldr	r4, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	6053      	str	r3, [r2, #4]
 8006d62:	4421      	add	r1, r4
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	e7d7      	b.n	8006d18 <_free_r+0x28>
 8006d68:	d902      	bls.n	8006d70 <_free_r+0x80>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	e7d3      	b.n	8006d18 <_free_r+0x28>
 8006d70:	6825      	ldr	r5, [r4, #0]
 8006d72:	1961      	adds	r1, r4, r5
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf04      	itt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	bf04      	itt	eq
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	6054      	str	r4, [r2, #4]
 8006d86:	e7c7      	b.n	8006d18 <_free_r+0x28>
 8006d88:	b003      	add	sp, #12
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	200002f4 	.word	0x200002f4

08006d90 <_malloc_r>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	1ccd      	adds	r5, r1, #3
 8006d94:	f025 0503 	bic.w	r5, r5, #3
 8006d98:	3508      	adds	r5, #8
 8006d9a:	2d0c      	cmp	r5, #12
 8006d9c:	bf38      	it	cc
 8006d9e:	250c      	movcc	r5, #12
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	4606      	mov	r6, r0
 8006da4:	db01      	blt.n	8006daa <_malloc_r+0x1a>
 8006da6:	42a9      	cmp	r1, r5
 8006da8:	d903      	bls.n	8006db2 <_malloc_r+0x22>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6033      	str	r3, [r6, #0]
 8006dae:	2000      	movs	r0, #0
 8006db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006db2:	f000 fa0f 	bl	80071d4 <__malloc_lock>
 8006db6:	4921      	ldr	r1, [pc, #132]	; (8006e3c <_malloc_r+0xac>)
 8006db8:	680a      	ldr	r2, [r1, #0]
 8006dba:	4614      	mov	r4, r2
 8006dbc:	b99c      	cbnz	r4, 8006de6 <_malloc_r+0x56>
 8006dbe:	4f20      	ldr	r7, [pc, #128]	; (8006e40 <_malloc_r+0xb0>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	b923      	cbnz	r3, 8006dce <_malloc_r+0x3e>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f000 f998 	bl	80070fc <_sbrk_r>
 8006dcc:	6038      	str	r0, [r7, #0]
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f000 f993 	bl	80070fc <_sbrk_r>
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	d123      	bne.n	8006e22 <_malloc_r+0x92>
 8006dda:	230c      	movs	r3, #12
 8006ddc:	6033      	str	r3, [r6, #0]
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f9fe 	bl	80071e0 <__malloc_unlock>
 8006de4:	e7e3      	b.n	8006dae <_malloc_r+0x1e>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	1b5b      	subs	r3, r3, r5
 8006dea:	d417      	bmi.n	8006e1c <_malloc_r+0x8c>
 8006dec:	2b0b      	cmp	r3, #11
 8006dee:	d903      	bls.n	8006df8 <_malloc_r+0x68>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	441c      	add	r4, r3
 8006df4:	6025      	str	r5, [r4, #0]
 8006df6:	e004      	b.n	8006e02 <_malloc_r+0x72>
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	42a2      	cmp	r2, r4
 8006dfc:	bf0c      	ite	eq
 8006dfe:	600b      	streq	r3, [r1, #0]
 8006e00:	6053      	strne	r3, [r2, #4]
 8006e02:	4630      	mov	r0, r6
 8006e04:	f000 f9ec 	bl	80071e0 <__malloc_unlock>
 8006e08:	f104 000b 	add.w	r0, r4, #11
 8006e0c:	1d23      	adds	r3, r4, #4
 8006e0e:	f020 0007 	bic.w	r0, r0, #7
 8006e12:	1ac2      	subs	r2, r0, r3
 8006e14:	d0cc      	beq.n	8006db0 <_malloc_r+0x20>
 8006e16:	1a1b      	subs	r3, r3, r0
 8006e18:	50a3      	str	r3, [r4, r2]
 8006e1a:	e7c9      	b.n	8006db0 <_malloc_r+0x20>
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	6864      	ldr	r4, [r4, #4]
 8006e20:	e7cc      	b.n	8006dbc <_malloc_r+0x2c>
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d0e3      	beq.n	8006df4 <_malloc_r+0x64>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 f964 	bl	80070fc <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d1dd      	bne.n	8006df4 <_malloc_r+0x64>
 8006e38:	e7cf      	b.n	8006dda <_malloc_r+0x4a>
 8006e3a:	bf00      	nop
 8006e3c:	200002f4 	.word	0x200002f4
 8006e40:	200002f8 	.word	0x200002f8

08006e44 <__ssputs_r>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	688e      	ldr	r6, [r1, #8]
 8006e4a:	429e      	cmp	r6, r3
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4690      	mov	r8, r2
 8006e52:	461f      	mov	r7, r3
 8006e54:	d838      	bhi.n	8006ec8 <__ssputs_r+0x84>
 8006e56:	898a      	ldrh	r2, [r1, #12]
 8006e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e5c:	d032      	beq.n	8006ec4 <__ssputs_r+0x80>
 8006e5e:	6825      	ldr	r5, [r4, #0]
 8006e60:	6909      	ldr	r1, [r1, #16]
 8006e62:	eba5 0901 	sub.w	r9, r5, r1
 8006e66:	6965      	ldr	r5, [r4, #20]
 8006e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e70:	3301      	adds	r3, #1
 8006e72:	444b      	add	r3, r9
 8006e74:	106d      	asrs	r5, r5, #1
 8006e76:	429d      	cmp	r5, r3
 8006e78:	bf38      	it	cc
 8006e7a:	461d      	movcc	r5, r3
 8006e7c:	0553      	lsls	r3, r2, #21
 8006e7e:	d531      	bpl.n	8006ee4 <__ssputs_r+0xa0>
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7ff ff85 	bl	8006d90 <_malloc_r>
 8006e86:	4606      	mov	r6, r0
 8006e88:	b950      	cbnz	r0, 8006ea0 <__ssputs_r+0x5c>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	f8ca 3000 	str.w	r3, [sl]
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	6921      	ldr	r1, [r4, #16]
 8006ea2:	464a      	mov	r2, r9
 8006ea4:	f7ff fb88 	bl	80065b8 <memcpy>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	6126      	str	r6, [r4, #16]
 8006eb6:	6165      	str	r5, [r4, #20]
 8006eb8:	444e      	add	r6, r9
 8006eba:	eba5 0509 	sub.w	r5, r5, r9
 8006ebe:	6026      	str	r6, [r4, #0]
 8006ec0:	60a5      	str	r5, [r4, #8]
 8006ec2:	463e      	mov	r6, r7
 8006ec4:	42be      	cmp	r6, r7
 8006ec6:	d900      	bls.n	8006eca <__ssputs_r+0x86>
 8006ec8:	463e      	mov	r6, r7
 8006eca:	4632      	mov	r2, r6
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	4641      	mov	r1, r8
 8006ed0:	f000 f966 	bl	80071a0 <memmove>
 8006ed4:	68a3      	ldr	r3, [r4, #8]
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	1b9b      	subs	r3, r3, r6
 8006eda:	4432      	add	r2, r6
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6022      	str	r2, [r4, #0]
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e7db      	b.n	8006e9c <__ssputs_r+0x58>
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	f000 f981 	bl	80071ec <_realloc_r>
 8006eea:	4606      	mov	r6, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d1e1      	bne.n	8006eb4 <__ssputs_r+0x70>
 8006ef0:	6921      	ldr	r1, [r4, #16]
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	f7ff fefc 	bl	8006cf0 <_free_r>
 8006ef8:	e7c7      	b.n	8006e8a <__ssputs_r+0x46>
	...

08006efc <_svfiprintf_r>:
 8006efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	4698      	mov	r8, r3
 8006f02:	898b      	ldrh	r3, [r1, #12]
 8006f04:	061b      	lsls	r3, r3, #24
 8006f06:	b09d      	sub	sp, #116	; 0x74
 8006f08:	4607      	mov	r7, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	d50e      	bpl.n	8006f2e <_svfiprintf_r+0x32>
 8006f10:	690b      	ldr	r3, [r1, #16]
 8006f12:	b963      	cbnz	r3, 8006f2e <_svfiprintf_r+0x32>
 8006f14:	2140      	movs	r1, #64	; 0x40
 8006f16:	f7ff ff3b 	bl	8006d90 <_malloc_r>
 8006f1a:	6028      	str	r0, [r5, #0]
 8006f1c:	6128      	str	r0, [r5, #16]
 8006f1e:	b920      	cbnz	r0, 8006f2a <_svfiprintf_r+0x2e>
 8006f20:	230c      	movs	r3, #12
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	e0d1      	b.n	80070ce <_svfiprintf_r+0x1d2>
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	616b      	str	r3, [r5, #20]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9309      	str	r3, [sp, #36]	; 0x24
 8006f32:	2320      	movs	r3, #32
 8006f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f3c:	2330      	movs	r3, #48	; 0x30
 8006f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070e8 <_svfiprintf_r+0x1ec>
 8006f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f46:	f04f 0901 	mov.w	r9, #1
 8006f4a:	4623      	mov	r3, r4
 8006f4c:	469a      	mov	sl, r3
 8006f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f52:	b10a      	cbz	r2, 8006f58 <_svfiprintf_r+0x5c>
 8006f54:	2a25      	cmp	r2, #37	; 0x25
 8006f56:	d1f9      	bne.n	8006f4c <_svfiprintf_r+0x50>
 8006f58:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5c:	d00b      	beq.n	8006f76 <_svfiprintf_r+0x7a>
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4622      	mov	r2, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ff6d 	bl	8006e44 <__ssputs_r>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f000 80aa 	beq.w	80070c4 <_svfiprintf_r+0x1c8>
 8006f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f72:	445a      	add	r2, fp
 8006f74:	9209      	str	r2, [sp, #36]	; 0x24
 8006f76:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80a2 	beq.w	80070c4 <_svfiprintf_r+0x1c8>
 8006f80:	2300      	movs	r3, #0
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8a:	f10a 0a01 	add.w	sl, sl, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	9307      	str	r3, [sp, #28]
 8006f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f96:	931a      	str	r3, [sp, #104]	; 0x68
 8006f98:	4654      	mov	r4, sl
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	4851      	ldr	r0, [pc, #324]	; (80070e8 <_svfiprintf_r+0x1ec>)
 8006fa2:	f7f9 f91d 	bl	80001e0 <memchr>
 8006fa6:	9a04      	ldr	r2, [sp, #16]
 8006fa8:	b9d8      	cbnz	r0, 8006fe2 <_svfiprintf_r+0xe6>
 8006faa:	06d0      	lsls	r0, r2, #27
 8006fac:	bf44      	itt	mi
 8006fae:	2320      	movmi	r3, #32
 8006fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb4:	0711      	lsls	r1, r2, #28
 8006fb6:	bf44      	itt	mi
 8006fb8:	232b      	movmi	r3, #43	; 0x2b
 8006fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc4:	d015      	beq.n	8006ff2 <_svfiprintf_r+0xf6>
 8006fc6:	9a07      	ldr	r2, [sp, #28]
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd6:	3b30      	subs	r3, #48	; 0x30
 8006fd8:	2b09      	cmp	r3, #9
 8006fda:	d94e      	bls.n	800707a <_svfiprintf_r+0x17e>
 8006fdc:	b1b0      	cbz	r0, 800700c <_svfiprintf_r+0x110>
 8006fde:	9207      	str	r2, [sp, #28]
 8006fe0:	e014      	b.n	800700c <_svfiprintf_r+0x110>
 8006fe2:	eba0 0308 	sub.w	r3, r0, r8
 8006fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fea:	4313      	orrs	r3, r2
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	46a2      	mov	sl, r4
 8006ff0:	e7d2      	b.n	8006f98 <_svfiprintf_r+0x9c>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	1d19      	adds	r1, r3, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	9103      	str	r1, [sp, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bfbb      	ittet	lt
 8006ffe:	425b      	neglt	r3, r3
 8007000:	f042 0202 	orrlt.w	r2, r2, #2
 8007004:	9307      	strge	r3, [sp, #28]
 8007006:	9307      	strlt	r3, [sp, #28]
 8007008:	bfb8      	it	lt
 800700a:	9204      	strlt	r2, [sp, #16]
 800700c:	7823      	ldrb	r3, [r4, #0]
 800700e:	2b2e      	cmp	r3, #46	; 0x2e
 8007010:	d10c      	bne.n	800702c <_svfiprintf_r+0x130>
 8007012:	7863      	ldrb	r3, [r4, #1]
 8007014:	2b2a      	cmp	r3, #42	; 0x2a
 8007016:	d135      	bne.n	8007084 <_svfiprintf_r+0x188>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	1d1a      	adds	r2, r3, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	9203      	str	r2, [sp, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	bfb8      	it	lt
 8007024:	f04f 33ff 	movlt.w	r3, #4294967295
 8007028:	3402      	adds	r4, #2
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070f8 <_svfiprintf_r+0x1fc>
 8007030:	7821      	ldrb	r1, [r4, #0]
 8007032:	2203      	movs	r2, #3
 8007034:	4650      	mov	r0, sl
 8007036:	f7f9 f8d3 	bl	80001e0 <memchr>
 800703a:	b140      	cbz	r0, 800704e <_svfiprintf_r+0x152>
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	eba0 000a 	sub.w	r0, r0, sl
 8007042:	fa03 f000 	lsl.w	r0, r3, r0
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	4303      	orrs	r3, r0
 800704a:	3401      	adds	r4, #1
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007052:	4826      	ldr	r0, [pc, #152]	; (80070ec <_svfiprintf_r+0x1f0>)
 8007054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007058:	2206      	movs	r2, #6
 800705a:	f7f9 f8c1 	bl	80001e0 <memchr>
 800705e:	2800      	cmp	r0, #0
 8007060:	d038      	beq.n	80070d4 <_svfiprintf_r+0x1d8>
 8007062:	4b23      	ldr	r3, [pc, #140]	; (80070f0 <_svfiprintf_r+0x1f4>)
 8007064:	bb1b      	cbnz	r3, 80070ae <_svfiprintf_r+0x1b2>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	3307      	adds	r3, #7
 800706a:	f023 0307 	bic.w	r3, r3, #7
 800706e:	3308      	adds	r3, #8
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007074:	4433      	add	r3, r6
 8007076:	9309      	str	r3, [sp, #36]	; 0x24
 8007078:	e767      	b.n	8006f4a <_svfiprintf_r+0x4e>
 800707a:	fb0c 3202 	mla	r2, ip, r2, r3
 800707e:	460c      	mov	r4, r1
 8007080:	2001      	movs	r0, #1
 8007082:	e7a5      	b.n	8006fd0 <_svfiprintf_r+0xd4>
 8007084:	2300      	movs	r3, #0
 8007086:	3401      	adds	r4, #1
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	4619      	mov	r1, r3
 800708c:	f04f 0c0a 	mov.w	ip, #10
 8007090:	4620      	mov	r0, r4
 8007092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007096:	3a30      	subs	r2, #48	; 0x30
 8007098:	2a09      	cmp	r2, #9
 800709a:	d903      	bls.n	80070a4 <_svfiprintf_r+0x1a8>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0c5      	beq.n	800702c <_svfiprintf_r+0x130>
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	e7c3      	b.n	800702c <_svfiprintf_r+0x130>
 80070a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a8:	4604      	mov	r4, r0
 80070aa:	2301      	movs	r3, #1
 80070ac:	e7f0      	b.n	8007090 <_svfiprintf_r+0x194>
 80070ae:	ab03      	add	r3, sp, #12
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	462a      	mov	r2, r5
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <_svfiprintf_r+0x1f8>)
 80070b6:	a904      	add	r1, sp, #16
 80070b8:	4638      	mov	r0, r7
 80070ba:	f7fe f80d 	bl	80050d8 <_printf_float>
 80070be:	1c42      	adds	r2, r0, #1
 80070c0:	4606      	mov	r6, r0
 80070c2:	d1d6      	bne.n	8007072 <_svfiprintf_r+0x176>
 80070c4:	89ab      	ldrh	r3, [r5, #12]
 80070c6:	065b      	lsls	r3, r3, #25
 80070c8:	f53f af2c 	bmi.w	8006f24 <_svfiprintf_r+0x28>
 80070cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ce:	b01d      	add	sp, #116	; 0x74
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	ab03      	add	r3, sp, #12
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	462a      	mov	r2, r5
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <_svfiprintf_r+0x1f8>)
 80070dc:	a904      	add	r1, sp, #16
 80070de:	4638      	mov	r0, r7
 80070e0:	f7fe fa9e 	bl	8005620 <_printf_i>
 80070e4:	e7eb      	b.n	80070be <_svfiprintf_r+0x1c2>
 80070e6:	bf00      	nop
 80070e8:	08007fbc 	.word	0x08007fbc
 80070ec:	08007fc6 	.word	0x08007fc6
 80070f0:	080050d9 	.word	0x080050d9
 80070f4:	08006e45 	.word	0x08006e45
 80070f8:	08007fc2 	.word	0x08007fc2

080070fc <_sbrk_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	; (8007118 <_sbrk_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fb f9c0 	bl	800248c <_sbrk>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_sbrk_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_sbrk_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000724 	.word	0x20000724

0800711c <__assert_func>:
 800711c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800711e:	4614      	mov	r4, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <__assert_func+0x2c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4605      	mov	r5, r0
 8007128:	68d8      	ldr	r0, [r3, #12]
 800712a:	b14c      	cbz	r4, 8007140 <__assert_func+0x24>
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <__assert_func+0x30>)
 800712e:	9100      	str	r1, [sp, #0]
 8007130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007134:	4906      	ldr	r1, [pc, #24]	; (8007150 <__assert_func+0x34>)
 8007136:	462b      	mov	r3, r5
 8007138:	f000 f80e 	bl	8007158 <fiprintf>
 800713c:	f000 faa4 	bl	8007688 <abort>
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <__assert_func+0x38>)
 8007142:	461c      	mov	r4, r3
 8007144:	e7f3      	b.n	800712e <__assert_func+0x12>
 8007146:	bf00      	nop
 8007148:	2000000c 	.word	0x2000000c
 800714c:	08007fcd 	.word	0x08007fcd
 8007150:	08007fda 	.word	0x08007fda
 8007154:	08008008 	.word	0x08008008

08007158 <fiprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	b503      	push	{r0, r1, lr}
 800715c:	4601      	mov	r1, r0
 800715e:	ab03      	add	r3, sp, #12
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <fiprintf+0x20>)
 8007162:	f853 2b04 	ldr.w	r2, [r3], #4
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f000 f88f 	bl	800728c <_vfiprintf_r>
 800716e:	b002      	add	sp, #8
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	2000000c 	.word	0x2000000c

0800717c <__ascii_mbtowc>:
 800717c:	b082      	sub	sp, #8
 800717e:	b901      	cbnz	r1, 8007182 <__ascii_mbtowc+0x6>
 8007180:	a901      	add	r1, sp, #4
 8007182:	b142      	cbz	r2, 8007196 <__ascii_mbtowc+0x1a>
 8007184:	b14b      	cbz	r3, 800719a <__ascii_mbtowc+0x1e>
 8007186:	7813      	ldrb	r3, [r2, #0]
 8007188:	600b      	str	r3, [r1, #0]
 800718a:	7812      	ldrb	r2, [r2, #0]
 800718c:	1e10      	subs	r0, r2, #0
 800718e:	bf18      	it	ne
 8007190:	2001      	movne	r0, #1
 8007192:	b002      	add	sp, #8
 8007194:	4770      	bx	lr
 8007196:	4610      	mov	r0, r2
 8007198:	e7fb      	b.n	8007192 <__ascii_mbtowc+0x16>
 800719a:	f06f 0001 	mvn.w	r0, #1
 800719e:	e7f8      	b.n	8007192 <__ascii_mbtowc+0x16>

080071a0 <memmove>:
 80071a0:	4288      	cmp	r0, r1
 80071a2:	b510      	push	{r4, lr}
 80071a4:	eb01 0402 	add.w	r4, r1, r2
 80071a8:	d902      	bls.n	80071b0 <memmove+0x10>
 80071aa:	4284      	cmp	r4, r0
 80071ac:	4623      	mov	r3, r4
 80071ae:	d807      	bhi.n	80071c0 <memmove+0x20>
 80071b0:	1e43      	subs	r3, r0, #1
 80071b2:	42a1      	cmp	r1, r4
 80071b4:	d008      	beq.n	80071c8 <memmove+0x28>
 80071b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071be:	e7f8      	b.n	80071b2 <memmove+0x12>
 80071c0:	4402      	add	r2, r0
 80071c2:	4601      	mov	r1, r0
 80071c4:	428a      	cmp	r2, r1
 80071c6:	d100      	bne.n	80071ca <memmove+0x2a>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071d2:	e7f7      	b.n	80071c4 <memmove+0x24>

080071d4 <__malloc_lock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__malloc_lock+0x8>)
 80071d6:	f000 bc17 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	2000072c 	.word	0x2000072c

080071e0 <__malloc_unlock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__malloc_unlock+0x8>)
 80071e2:	f000 bc12 	b.w	8007a0a <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	2000072c 	.word	0x2000072c

080071ec <_realloc_r>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	4607      	mov	r7, r0
 80071f0:	4614      	mov	r4, r2
 80071f2:	460e      	mov	r6, r1
 80071f4:	b921      	cbnz	r1, 8007200 <_realloc_r+0x14>
 80071f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071fa:	4611      	mov	r1, r2
 80071fc:	f7ff bdc8 	b.w	8006d90 <_malloc_r>
 8007200:	b922      	cbnz	r2, 800720c <_realloc_r+0x20>
 8007202:	f7ff fd75 	bl	8006cf0 <_free_r>
 8007206:	4625      	mov	r5, r4
 8007208:	4628      	mov	r0, r5
 800720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800720c:	f000 fc62 	bl	8007ad4 <_malloc_usable_size_r>
 8007210:	42a0      	cmp	r0, r4
 8007212:	d20f      	bcs.n	8007234 <_realloc_r+0x48>
 8007214:	4621      	mov	r1, r4
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff fdba 	bl	8006d90 <_malloc_r>
 800721c:	4605      	mov	r5, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	d0f2      	beq.n	8007208 <_realloc_r+0x1c>
 8007222:	4631      	mov	r1, r6
 8007224:	4622      	mov	r2, r4
 8007226:	f7ff f9c7 	bl	80065b8 <memcpy>
 800722a:	4631      	mov	r1, r6
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff fd5f 	bl	8006cf0 <_free_r>
 8007232:	e7e9      	b.n	8007208 <_realloc_r+0x1c>
 8007234:	4635      	mov	r5, r6
 8007236:	e7e7      	b.n	8007208 <_realloc_r+0x1c>

08007238 <__sfputc_r>:
 8007238:	6893      	ldr	r3, [r2, #8]
 800723a:	3b01      	subs	r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	b410      	push	{r4}
 8007240:	6093      	str	r3, [r2, #8]
 8007242:	da08      	bge.n	8007256 <__sfputc_r+0x1e>
 8007244:	6994      	ldr	r4, [r2, #24]
 8007246:	42a3      	cmp	r3, r4
 8007248:	db01      	blt.n	800724e <__sfputc_r+0x16>
 800724a:	290a      	cmp	r1, #10
 800724c:	d103      	bne.n	8007256 <__sfputc_r+0x1e>
 800724e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007252:	f000 b94b 	b.w	80074ec <__swbuf_r>
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	1c58      	adds	r0, r3, #1
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	7019      	strb	r1, [r3, #0]
 800725e:	4608      	mov	r0, r1
 8007260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007264:	4770      	bx	lr

08007266 <__sfputs_r>:
 8007266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007268:	4606      	mov	r6, r0
 800726a:	460f      	mov	r7, r1
 800726c:	4614      	mov	r4, r2
 800726e:	18d5      	adds	r5, r2, r3
 8007270:	42ac      	cmp	r4, r5
 8007272:	d101      	bne.n	8007278 <__sfputs_r+0x12>
 8007274:	2000      	movs	r0, #0
 8007276:	e007      	b.n	8007288 <__sfputs_r+0x22>
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	463a      	mov	r2, r7
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff ffda 	bl	8007238 <__sfputc_r>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d1f3      	bne.n	8007270 <__sfputs_r+0xa>
 8007288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800728c <_vfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	460d      	mov	r5, r1
 8007292:	b09d      	sub	sp, #116	; 0x74
 8007294:	4614      	mov	r4, r2
 8007296:	4698      	mov	r8, r3
 8007298:	4606      	mov	r6, r0
 800729a:	b118      	cbz	r0, 80072a4 <_vfiprintf_r+0x18>
 800729c:	6983      	ldr	r3, [r0, #24]
 800729e:	b90b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x18>
 80072a0:	f000 fb14 	bl	80078cc <__sinit>
 80072a4:	4b89      	ldr	r3, [pc, #548]	; (80074cc <_vfiprintf_r+0x240>)
 80072a6:	429d      	cmp	r5, r3
 80072a8:	d11b      	bne.n	80072e2 <_vfiprintf_r+0x56>
 80072aa:	6875      	ldr	r5, [r6, #4]
 80072ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d405      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d402      	bmi.n	80072be <_vfiprintf_r+0x32>
 80072b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ba:	f000 fba5 	bl	8007a08 <__retarget_lock_acquire_recursive>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	071b      	lsls	r3, r3, #28
 80072c2:	d501      	bpl.n	80072c8 <_vfiprintf_r+0x3c>
 80072c4:	692b      	ldr	r3, [r5, #16]
 80072c6:	b9eb      	cbnz	r3, 8007304 <_vfiprintf_r+0x78>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 f96e 	bl	80075ac <__swsetup_r>
 80072d0:	b1c0      	cbz	r0, 8007304 <_vfiprintf_r+0x78>
 80072d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d4:	07dc      	lsls	r4, r3, #31
 80072d6:	d50e      	bpl.n	80072f6 <_vfiprintf_r+0x6a>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	b01d      	add	sp, #116	; 0x74
 80072de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <_vfiprintf_r+0x244>)
 80072e4:	429d      	cmp	r5, r3
 80072e6:	d101      	bne.n	80072ec <_vfiprintf_r+0x60>
 80072e8:	68b5      	ldr	r5, [r6, #8]
 80072ea:	e7df      	b.n	80072ac <_vfiprintf_r+0x20>
 80072ec:	4b79      	ldr	r3, [pc, #484]	; (80074d4 <_vfiprintf_r+0x248>)
 80072ee:	429d      	cmp	r5, r3
 80072f0:	bf08      	it	eq
 80072f2:	68f5      	ldreq	r5, [r6, #12]
 80072f4:	e7da      	b.n	80072ac <_vfiprintf_r+0x20>
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	0598      	lsls	r0, r3, #22
 80072fa:	d4ed      	bmi.n	80072d8 <_vfiprintf_r+0x4c>
 80072fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072fe:	f000 fb84 	bl	8007a0a <__retarget_lock_release_recursive>
 8007302:	e7e9      	b.n	80072d8 <_vfiprintf_r+0x4c>
 8007304:	2300      	movs	r3, #0
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	2320      	movs	r3, #32
 800730a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800730e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007312:	2330      	movs	r3, #48	; 0x30
 8007314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074d8 <_vfiprintf_r+0x24c>
 8007318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800731c:	f04f 0901 	mov.w	r9, #1
 8007320:	4623      	mov	r3, r4
 8007322:	469a      	mov	sl, r3
 8007324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007328:	b10a      	cbz	r2, 800732e <_vfiprintf_r+0xa2>
 800732a:	2a25      	cmp	r2, #37	; 0x25
 800732c:	d1f9      	bne.n	8007322 <_vfiprintf_r+0x96>
 800732e:	ebba 0b04 	subs.w	fp, sl, r4
 8007332:	d00b      	beq.n	800734c <_vfiprintf_r+0xc0>
 8007334:	465b      	mov	r3, fp
 8007336:	4622      	mov	r2, r4
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff ff93 	bl	8007266 <__sfputs_r>
 8007340:	3001      	adds	r0, #1
 8007342:	f000 80aa 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007348:	445a      	add	r2, fp
 800734a:	9209      	str	r2, [sp, #36]	; 0x24
 800734c:	f89a 3000 	ldrb.w	r3, [sl]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80a2 	beq.w	800749a <_vfiprintf_r+0x20e>
 8007356:	2300      	movs	r3, #0
 8007358:	f04f 32ff 	mov.w	r2, #4294967295
 800735c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800736c:	931a      	str	r3, [sp, #104]	; 0x68
 800736e:	4654      	mov	r4, sl
 8007370:	2205      	movs	r2, #5
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	4858      	ldr	r0, [pc, #352]	; (80074d8 <_vfiprintf_r+0x24c>)
 8007378:	f7f8 ff32 	bl	80001e0 <memchr>
 800737c:	9a04      	ldr	r2, [sp, #16]
 800737e:	b9d8      	cbnz	r0, 80073b8 <_vfiprintf_r+0x12c>
 8007380:	06d1      	lsls	r1, r2, #27
 8007382:	bf44      	itt	mi
 8007384:	2320      	movmi	r3, #32
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	0713      	lsls	r3, r2, #28
 800738c:	bf44      	itt	mi
 800738e:	232b      	movmi	r3, #43	; 0x2b
 8007390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	2b2a      	cmp	r3, #42	; 0x2a
 800739a:	d015      	beq.n	80073c8 <_vfiprintf_r+0x13c>
 800739c:	9a07      	ldr	r2, [sp, #28]
 800739e:	4654      	mov	r4, sl
 80073a0:	2000      	movs	r0, #0
 80073a2:	f04f 0c0a 	mov.w	ip, #10
 80073a6:	4621      	mov	r1, r4
 80073a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ac:	3b30      	subs	r3, #48	; 0x30
 80073ae:	2b09      	cmp	r3, #9
 80073b0:	d94e      	bls.n	8007450 <_vfiprintf_r+0x1c4>
 80073b2:	b1b0      	cbz	r0, 80073e2 <_vfiprintf_r+0x156>
 80073b4:	9207      	str	r2, [sp, #28]
 80073b6:	e014      	b.n	80073e2 <_vfiprintf_r+0x156>
 80073b8:	eba0 0308 	sub.w	r3, r0, r8
 80073bc:	fa09 f303 	lsl.w	r3, r9, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	46a2      	mov	sl, r4
 80073c6:	e7d2      	b.n	800736e <_vfiprintf_r+0xe2>
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	1d19      	adds	r1, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	9103      	str	r1, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbb      	ittet	lt
 80073d4:	425b      	neglt	r3, r3
 80073d6:	f042 0202 	orrlt.w	r2, r2, #2
 80073da:	9307      	strge	r3, [sp, #28]
 80073dc:	9307      	strlt	r3, [sp, #28]
 80073de:	bfb8      	it	lt
 80073e0:	9204      	strlt	r2, [sp, #16]
 80073e2:	7823      	ldrb	r3, [r4, #0]
 80073e4:	2b2e      	cmp	r3, #46	; 0x2e
 80073e6:	d10c      	bne.n	8007402 <_vfiprintf_r+0x176>
 80073e8:	7863      	ldrb	r3, [r4, #1]
 80073ea:	2b2a      	cmp	r3, #42	; 0x2a
 80073ec:	d135      	bne.n	800745a <_vfiprintf_r+0x1ce>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	1d1a      	adds	r2, r3, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	9203      	str	r2, [sp, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfb8      	it	lt
 80073fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80073fe:	3402      	adds	r4, #2
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074e8 <_vfiprintf_r+0x25c>
 8007406:	7821      	ldrb	r1, [r4, #0]
 8007408:	2203      	movs	r2, #3
 800740a:	4650      	mov	r0, sl
 800740c:	f7f8 fee8 	bl	80001e0 <memchr>
 8007410:	b140      	cbz	r0, 8007424 <_vfiprintf_r+0x198>
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	eba0 000a 	sub.w	r0, r0, sl
 8007418:	fa03 f000 	lsl.w	r0, r3, r0
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	4303      	orrs	r3, r0
 8007420:	3401      	adds	r4, #1
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	482c      	ldr	r0, [pc, #176]	; (80074dc <_vfiprintf_r+0x250>)
 800742a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800742e:	2206      	movs	r2, #6
 8007430:	f7f8 fed6 	bl	80001e0 <memchr>
 8007434:	2800      	cmp	r0, #0
 8007436:	d03f      	beq.n	80074b8 <_vfiprintf_r+0x22c>
 8007438:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <_vfiprintf_r+0x254>)
 800743a:	bb1b      	cbnz	r3, 8007484 <_vfiprintf_r+0x1f8>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	3307      	adds	r3, #7
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	3308      	adds	r3, #8
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	443b      	add	r3, r7
 800744c:	9309      	str	r3, [sp, #36]	; 0x24
 800744e:	e767      	b.n	8007320 <_vfiprintf_r+0x94>
 8007450:	fb0c 3202 	mla	r2, ip, r2, r3
 8007454:	460c      	mov	r4, r1
 8007456:	2001      	movs	r0, #1
 8007458:	e7a5      	b.n	80073a6 <_vfiprintf_r+0x11a>
 800745a:	2300      	movs	r3, #0
 800745c:	3401      	adds	r4, #1
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4619      	mov	r1, r3
 8007462:	f04f 0c0a 	mov.w	ip, #10
 8007466:	4620      	mov	r0, r4
 8007468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800746c:	3a30      	subs	r2, #48	; 0x30
 800746e:	2a09      	cmp	r2, #9
 8007470:	d903      	bls.n	800747a <_vfiprintf_r+0x1ee>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c5      	beq.n	8007402 <_vfiprintf_r+0x176>
 8007476:	9105      	str	r1, [sp, #20]
 8007478:	e7c3      	b.n	8007402 <_vfiprintf_r+0x176>
 800747a:	fb0c 2101 	mla	r1, ip, r1, r2
 800747e:	4604      	mov	r4, r0
 8007480:	2301      	movs	r3, #1
 8007482:	e7f0      	b.n	8007466 <_vfiprintf_r+0x1da>
 8007484:	ab03      	add	r3, sp, #12
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462a      	mov	r2, r5
 800748a:	4b16      	ldr	r3, [pc, #88]	; (80074e4 <_vfiprintf_r+0x258>)
 800748c:	a904      	add	r1, sp, #16
 800748e:	4630      	mov	r0, r6
 8007490:	f7fd fe22 	bl	80050d8 <_printf_float>
 8007494:	4607      	mov	r7, r0
 8007496:	1c78      	adds	r0, r7, #1
 8007498:	d1d6      	bne.n	8007448 <_vfiprintf_r+0x1bc>
 800749a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	d405      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a0:	89ab      	ldrh	r3, [r5, #12]
 80074a2:	059a      	lsls	r2, r3, #22
 80074a4:	d402      	bmi.n	80074ac <_vfiprintf_r+0x220>
 80074a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a8:	f000 faaf 	bl	8007a0a <__retarget_lock_release_recursive>
 80074ac:	89ab      	ldrh	r3, [r5, #12]
 80074ae:	065b      	lsls	r3, r3, #25
 80074b0:	f53f af12 	bmi.w	80072d8 <_vfiprintf_r+0x4c>
 80074b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b6:	e711      	b.n	80072dc <_vfiprintf_r+0x50>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <_vfiprintf_r+0x258>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7fe f8ac 	bl	8005620 <_printf_i>
 80074c8:	e7e4      	b.n	8007494 <_vfiprintf_r+0x208>
 80074ca:	bf00      	nop
 80074cc:	08008134 	.word	0x08008134
 80074d0:	08008154 	.word	0x08008154
 80074d4:	08008114 	.word	0x08008114
 80074d8:	08007fbc 	.word	0x08007fbc
 80074dc:	08007fc6 	.word	0x08007fc6
 80074e0:	080050d9 	.word	0x080050d9
 80074e4:	08007267 	.word	0x08007267
 80074e8:	08007fc2 	.word	0x08007fc2

080074ec <__swbuf_r>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	460e      	mov	r6, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	4605      	mov	r5, r0
 80074f4:	b118      	cbz	r0, 80074fe <__swbuf_r+0x12>
 80074f6:	6983      	ldr	r3, [r0, #24]
 80074f8:	b90b      	cbnz	r3, 80074fe <__swbuf_r+0x12>
 80074fa:	f000 f9e7 	bl	80078cc <__sinit>
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <__swbuf_r+0x98>)
 8007500:	429c      	cmp	r4, r3
 8007502:	d12b      	bne.n	800755c <__swbuf_r+0x70>
 8007504:	686c      	ldr	r4, [r5, #4]
 8007506:	69a3      	ldr	r3, [r4, #24]
 8007508:	60a3      	str	r3, [r4, #8]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	071a      	lsls	r2, r3, #28
 800750e:	d52f      	bpl.n	8007570 <__swbuf_r+0x84>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	b36b      	cbz	r3, 8007570 <__swbuf_r+0x84>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1ac0      	subs	r0, r0, r3
 800751a:	6963      	ldr	r3, [r4, #20]
 800751c:	b2f6      	uxtb	r6, r6
 800751e:	4283      	cmp	r3, r0
 8007520:	4637      	mov	r7, r6
 8007522:	dc04      	bgt.n	800752e <__swbuf_r+0x42>
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f93c 	bl	80077a4 <_fflush_r>
 800752c:	bb30      	cbnz	r0, 800757c <__swbuf_r+0x90>
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	3b01      	subs	r3, #1
 8007532:	60a3      	str	r3, [r4, #8]
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	701e      	strb	r6, [r3, #0]
 800753c:	6963      	ldr	r3, [r4, #20]
 800753e:	3001      	adds	r0, #1
 8007540:	4283      	cmp	r3, r0
 8007542:	d004      	beq.n	800754e <__swbuf_r+0x62>
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	07db      	lsls	r3, r3, #31
 8007548:	d506      	bpl.n	8007558 <__swbuf_r+0x6c>
 800754a:	2e0a      	cmp	r6, #10
 800754c:	d104      	bne.n	8007558 <__swbuf_r+0x6c>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 f927 	bl	80077a4 <_fflush_r>
 8007556:	b988      	cbnz	r0, 800757c <__swbuf_r+0x90>
 8007558:	4638      	mov	r0, r7
 800755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <__swbuf_r+0x9c>)
 800755e:	429c      	cmp	r4, r3
 8007560:	d101      	bne.n	8007566 <__swbuf_r+0x7a>
 8007562:	68ac      	ldr	r4, [r5, #8]
 8007564:	e7cf      	b.n	8007506 <__swbuf_r+0x1a>
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <__swbuf_r+0xa0>)
 8007568:	429c      	cmp	r4, r3
 800756a:	bf08      	it	eq
 800756c:	68ec      	ldreq	r4, [r5, #12]
 800756e:	e7ca      	b.n	8007506 <__swbuf_r+0x1a>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f81a 	bl	80075ac <__swsetup_r>
 8007578:	2800      	cmp	r0, #0
 800757a:	d0cb      	beq.n	8007514 <__swbuf_r+0x28>
 800757c:	f04f 37ff 	mov.w	r7, #4294967295
 8007580:	e7ea      	b.n	8007558 <__swbuf_r+0x6c>
 8007582:	bf00      	nop
 8007584:	08008134 	.word	0x08008134
 8007588:	08008154 	.word	0x08008154
 800758c:	08008114 	.word	0x08008114

08007590 <__ascii_wctomb>:
 8007590:	b149      	cbz	r1, 80075a6 <__ascii_wctomb+0x16>
 8007592:	2aff      	cmp	r2, #255	; 0xff
 8007594:	bf85      	ittet	hi
 8007596:	238a      	movhi	r3, #138	; 0x8a
 8007598:	6003      	strhi	r3, [r0, #0]
 800759a:	700a      	strbls	r2, [r1, #0]
 800759c:	f04f 30ff 	movhi.w	r0, #4294967295
 80075a0:	bf98      	it	ls
 80075a2:	2001      	movls	r0, #1
 80075a4:	4770      	bx	lr
 80075a6:	4608      	mov	r0, r1
 80075a8:	4770      	bx	lr
	...

080075ac <__swsetup_r>:
 80075ac:	4b32      	ldr	r3, [pc, #200]	; (8007678 <__swsetup_r+0xcc>)
 80075ae:	b570      	push	{r4, r5, r6, lr}
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	4606      	mov	r6, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	b125      	cbz	r5, 80075c2 <__swsetup_r+0x16>
 80075b8:	69ab      	ldr	r3, [r5, #24]
 80075ba:	b913      	cbnz	r3, 80075c2 <__swsetup_r+0x16>
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 f985 	bl	80078cc <__sinit>
 80075c2:	4b2e      	ldr	r3, [pc, #184]	; (800767c <__swsetup_r+0xd0>)
 80075c4:	429c      	cmp	r4, r3
 80075c6:	d10f      	bne.n	80075e8 <__swsetup_r+0x3c>
 80075c8:	686c      	ldr	r4, [r5, #4]
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075d0:	0719      	lsls	r1, r3, #28
 80075d2:	d42c      	bmi.n	800762e <__swsetup_r+0x82>
 80075d4:	06dd      	lsls	r5, r3, #27
 80075d6:	d411      	bmi.n	80075fc <__swsetup_r+0x50>
 80075d8:	2309      	movs	r3, #9
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295
 80075e6:	e03e      	b.n	8007666 <__swsetup_r+0xba>
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <__swsetup_r+0xd4>)
 80075ea:	429c      	cmp	r4, r3
 80075ec:	d101      	bne.n	80075f2 <__swsetup_r+0x46>
 80075ee:	68ac      	ldr	r4, [r5, #8]
 80075f0:	e7eb      	b.n	80075ca <__swsetup_r+0x1e>
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <__swsetup_r+0xd8>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	bf08      	it	eq
 80075f8:	68ec      	ldreq	r4, [r5, #12]
 80075fa:	e7e6      	b.n	80075ca <__swsetup_r+0x1e>
 80075fc:	0758      	lsls	r0, r3, #29
 80075fe:	d512      	bpl.n	8007626 <__swsetup_r+0x7a>
 8007600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007602:	b141      	cbz	r1, 8007616 <__swsetup_r+0x6a>
 8007604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007608:	4299      	cmp	r1, r3
 800760a:	d002      	beq.n	8007612 <__swsetup_r+0x66>
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fb6f 	bl	8006cf0 <_free_r>
 8007612:	2300      	movs	r3, #0
 8007614:	6363      	str	r3, [r4, #52]	; 0x34
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	2300      	movs	r3, #0
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f043 0308 	orr.w	r3, r3, #8
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	b94b      	cbnz	r3, 8007646 <__swsetup_r+0x9a>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800763c:	d003      	beq.n	8007646 <__swsetup_r+0x9a>
 800763e:	4621      	mov	r1, r4
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fa07 	bl	8007a54 <__smakebuf_r>
 8007646:	89a0      	ldrh	r0, [r4, #12]
 8007648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800764c:	f010 0301 	ands.w	r3, r0, #1
 8007650:	d00a      	beq.n	8007668 <__swsetup_r+0xbc>
 8007652:	2300      	movs	r3, #0
 8007654:	60a3      	str	r3, [r4, #8]
 8007656:	6963      	ldr	r3, [r4, #20]
 8007658:	425b      	negs	r3, r3
 800765a:	61a3      	str	r3, [r4, #24]
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	b943      	cbnz	r3, 8007672 <__swsetup_r+0xc6>
 8007660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007664:	d1ba      	bne.n	80075dc <__swsetup_r+0x30>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	0781      	lsls	r1, r0, #30
 800766a:	bf58      	it	pl
 800766c:	6963      	ldrpl	r3, [r4, #20]
 800766e:	60a3      	str	r3, [r4, #8]
 8007670:	e7f4      	b.n	800765c <__swsetup_r+0xb0>
 8007672:	2000      	movs	r0, #0
 8007674:	e7f7      	b.n	8007666 <__swsetup_r+0xba>
 8007676:	bf00      	nop
 8007678:	2000000c 	.word	0x2000000c
 800767c:	08008134 	.word	0x08008134
 8007680:	08008154 	.word	0x08008154
 8007684:	08008114 	.word	0x08008114

08007688 <abort>:
 8007688:	b508      	push	{r3, lr}
 800768a:	2006      	movs	r0, #6
 800768c:	f000 fa52 	bl	8007b34 <raise>
 8007690:	2001      	movs	r0, #1
 8007692:	f7fa fe83 	bl	800239c <_exit>
	...

08007698 <__sflush_r>:
 8007698:	898a      	ldrh	r2, [r1, #12]
 800769a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	4605      	mov	r5, r0
 80076a0:	0710      	lsls	r0, r2, #28
 80076a2:	460c      	mov	r4, r1
 80076a4:	d458      	bmi.n	8007758 <__sflush_r+0xc0>
 80076a6:	684b      	ldr	r3, [r1, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc05      	bgt.n	80076b8 <__sflush_r+0x20>
 80076ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dc02      	bgt.n	80076b8 <__sflush_r+0x20>
 80076b2:	2000      	movs	r0, #0
 80076b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	d0f9      	beq.n	80076b2 <__sflush_r+0x1a>
 80076be:	2300      	movs	r3, #0
 80076c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076c4:	682f      	ldr	r7, [r5, #0]
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	d032      	beq.n	8007730 <__sflush_r+0x98>
 80076ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	075a      	lsls	r2, r3, #29
 80076d0:	d505      	bpl.n	80076de <__sflush_r+0x46>
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	1ac0      	subs	r0, r0, r3
 80076d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d8:	b10b      	cbz	r3, 80076de <__sflush_r+0x46>
 80076da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076dc:	1ac0      	subs	r0, r0, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	4602      	mov	r2, r0
 80076e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e4:	6a21      	ldr	r1, [r4, #32]
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b0      	blx	r6
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	d106      	bne.n	80076fe <__sflush_r+0x66>
 80076f0:	6829      	ldr	r1, [r5, #0]
 80076f2:	291d      	cmp	r1, #29
 80076f4:	d82c      	bhi.n	8007750 <__sflush_r+0xb8>
 80076f6:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <__sflush_r+0x108>)
 80076f8:	40ca      	lsrs	r2, r1
 80076fa:	07d6      	lsls	r6, r2, #31
 80076fc:	d528      	bpl.n	8007750 <__sflush_r+0xb8>
 80076fe:	2200      	movs	r2, #0
 8007700:	6062      	str	r2, [r4, #4]
 8007702:	04d9      	lsls	r1, r3, #19
 8007704:	6922      	ldr	r2, [r4, #16]
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	d504      	bpl.n	8007714 <__sflush_r+0x7c>
 800770a:	1c42      	adds	r2, r0, #1
 800770c:	d101      	bne.n	8007712 <__sflush_r+0x7a>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b903      	cbnz	r3, 8007714 <__sflush_r+0x7c>
 8007712:	6560      	str	r0, [r4, #84]	; 0x54
 8007714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007716:	602f      	str	r7, [r5, #0]
 8007718:	2900      	cmp	r1, #0
 800771a:	d0ca      	beq.n	80076b2 <__sflush_r+0x1a>
 800771c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007720:	4299      	cmp	r1, r3
 8007722:	d002      	beq.n	800772a <__sflush_r+0x92>
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fae3 	bl	8006cf0 <_free_r>
 800772a:	2000      	movs	r0, #0
 800772c:	6360      	str	r0, [r4, #52]	; 0x34
 800772e:	e7c1      	b.n	80076b4 <__sflush_r+0x1c>
 8007730:	6a21      	ldr	r1, [r4, #32]
 8007732:	2301      	movs	r3, #1
 8007734:	4628      	mov	r0, r5
 8007736:	47b0      	blx	r6
 8007738:	1c41      	adds	r1, r0, #1
 800773a:	d1c7      	bne.n	80076cc <__sflush_r+0x34>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0c4      	beq.n	80076cc <__sflush_r+0x34>
 8007742:	2b1d      	cmp	r3, #29
 8007744:	d001      	beq.n	800774a <__sflush_r+0xb2>
 8007746:	2b16      	cmp	r3, #22
 8007748:	d101      	bne.n	800774e <__sflush_r+0xb6>
 800774a:	602f      	str	r7, [r5, #0]
 800774c:	e7b1      	b.n	80076b2 <__sflush_r+0x1a>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	e7ad      	b.n	80076b4 <__sflush_r+0x1c>
 8007758:	690f      	ldr	r7, [r1, #16]
 800775a:	2f00      	cmp	r7, #0
 800775c:	d0a9      	beq.n	80076b2 <__sflush_r+0x1a>
 800775e:	0793      	lsls	r3, r2, #30
 8007760:	680e      	ldr	r6, [r1, #0]
 8007762:	bf08      	it	eq
 8007764:	694b      	ldreq	r3, [r1, #20]
 8007766:	600f      	str	r7, [r1, #0]
 8007768:	bf18      	it	ne
 800776a:	2300      	movne	r3, #0
 800776c:	eba6 0807 	sub.w	r8, r6, r7
 8007770:	608b      	str	r3, [r1, #8]
 8007772:	f1b8 0f00 	cmp.w	r8, #0
 8007776:	dd9c      	ble.n	80076b2 <__sflush_r+0x1a>
 8007778:	6a21      	ldr	r1, [r4, #32]
 800777a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800777c:	4643      	mov	r3, r8
 800777e:	463a      	mov	r2, r7
 8007780:	4628      	mov	r0, r5
 8007782:	47b0      	blx	r6
 8007784:	2800      	cmp	r0, #0
 8007786:	dc06      	bgt.n	8007796 <__sflush_r+0xfe>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	f04f 30ff 	mov.w	r0, #4294967295
 8007794:	e78e      	b.n	80076b4 <__sflush_r+0x1c>
 8007796:	4407      	add	r7, r0
 8007798:	eba8 0800 	sub.w	r8, r8, r0
 800779c:	e7e9      	b.n	8007772 <__sflush_r+0xda>
 800779e:	bf00      	nop
 80077a0:	20400001 	.word	0x20400001

080077a4 <_fflush_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	690b      	ldr	r3, [r1, #16]
 80077a8:	4605      	mov	r5, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	b913      	cbnz	r3, 80077b4 <_fflush_r+0x10>
 80077ae:	2500      	movs	r5, #0
 80077b0:	4628      	mov	r0, r5
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	b118      	cbz	r0, 80077be <_fflush_r+0x1a>
 80077b6:	6983      	ldr	r3, [r0, #24]
 80077b8:	b90b      	cbnz	r3, 80077be <_fflush_r+0x1a>
 80077ba:	f000 f887 	bl	80078cc <__sinit>
 80077be:	4b14      	ldr	r3, [pc, #80]	; (8007810 <_fflush_r+0x6c>)
 80077c0:	429c      	cmp	r4, r3
 80077c2:	d11b      	bne.n	80077fc <_fflush_r+0x58>
 80077c4:	686c      	ldr	r4, [r5, #4]
 80077c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0ef      	beq.n	80077ae <_fflush_r+0xa>
 80077ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077d0:	07d0      	lsls	r0, r2, #31
 80077d2:	d404      	bmi.n	80077de <_fflush_r+0x3a>
 80077d4:	0599      	lsls	r1, r3, #22
 80077d6:	d402      	bmi.n	80077de <_fflush_r+0x3a>
 80077d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077da:	f000 f915 	bl	8007a08 <__retarget_lock_acquire_recursive>
 80077de:	4628      	mov	r0, r5
 80077e0:	4621      	mov	r1, r4
 80077e2:	f7ff ff59 	bl	8007698 <__sflush_r>
 80077e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e8:	07da      	lsls	r2, r3, #31
 80077ea:	4605      	mov	r5, r0
 80077ec:	d4e0      	bmi.n	80077b0 <_fflush_r+0xc>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	059b      	lsls	r3, r3, #22
 80077f2:	d4dd      	bmi.n	80077b0 <_fflush_r+0xc>
 80077f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f6:	f000 f908 	bl	8007a0a <__retarget_lock_release_recursive>
 80077fa:	e7d9      	b.n	80077b0 <_fflush_r+0xc>
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <_fflush_r+0x70>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d101      	bne.n	8007806 <_fflush_r+0x62>
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	e7df      	b.n	80077c6 <_fflush_r+0x22>
 8007806:	4b04      	ldr	r3, [pc, #16]	; (8007818 <_fflush_r+0x74>)
 8007808:	429c      	cmp	r4, r3
 800780a:	bf08      	it	eq
 800780c:	68ec      	ldreq	r4, [r5, #12]
 800780e:	e7da      	b.n	80077c6 <_fflush_r+0x22>
 8007810:	08008134 	.word	0x08008134
 8007814:	08008154 	.word	0x08008154
 8007818:	08008114 	.word	0x08008114

0800781c <std>:
 800781c:	2300      	movs	r3, #0
 800781e:	b510      	push	{r4, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	e9c0 3300 	strd	r3, r3, [r0]
 8007826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782a:	6083      	str	r3, [r0, #8]
 800782c:	8181      	strh	r1, [r0, #12]
 800782e:	6643      	str	r3, [r0, #100]	; 0x64
 8007830:	81c2      	strh	r2, [r0, #14]
 8007832:	6183      	str	r3, [r0, #24]
 8007834:	4619      	mov	r1, r3
 8007836:	2208      	movs	r2, #8
 8007838:	305c      	adds	r0, #92	; 0x5c
 800783a:	f7fd fba5 	bl	8004f88 <memset>
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <std+0x38>)
 8007840:	6263      	str	r3, [r4, #36]	; 0x24
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <std+0x3c>)
 8007844:	62a3      	str	r3, [r4, #40]	; 0x28
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <std+0x40>)
 8007848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <std+0x44>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	6323      	str	r3, [r4, #48]	; 0x30
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	08007b6d 	.word	0x08007b6d
 8007858:	08007b8f 	.word	0x08007b8f
 800785c:	08007bc7 	.word	0x08007bc7
 8007860:	08007beb 	.word	0x08007beb

08007864 <_cleanup_r>:
 8007864:	4901      	ldr	r1, [pc, #4]	; (800786c <_cleanup_r+0x8>)
 8007866:	f000 b8af 	b.w	80079c8 <_fwalk_reent>
 800786a:	bf00      	nop
 800786c:	080077a5 	.word	0x080077a5

08007870 <__sfmoreglue>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	1e4a      	subs	r2, r1, #1
 8007874:	2568      	movs	r5, #104	; 0x68
 8007876:	4355      	muls	r5, r2
 8007878:	460e      	mov	r6, r1
 800787a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800787e:	f7ff fa87 	bl	8006d90 <_malloc_r>
 8007882:	4604      	mov	r4, r0
 8007884:	b140      	cbz	r0, 8007898 <__sfmoreglue+0x28>
 8007886:	2100      	movs	r1, #0
 8007888:	e9c0 1600 	strd	r1, r6, [r0]
 800788c:	300c      	adds	r0, #12
 800788e:	60a0      	str	r0, [r4, #8]
 8007890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007894:	f7fd fb78 	bl	8004f88 <memset>
 8007898:	4620      	mov	r0, r4
 800789a:	bd70      	pop	{r4, r5, r6, pc}

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 b8b3 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	20000730 	.word	0x20000730

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 b8ae 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000730 	.word	0x20000730

080078b4 <__sinit_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sinit_lock_acquire+0x8>)
 80078b6:	f000 b8a7 	b.w	8007a08 <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	2000072b 	.word	0x2000072b

080078c0 <__sinit_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sinit_lock_release+0x8>)
 80078c2:	f000 b8a2 	b.w	8007a0a <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	2000072b 	.word	0x2000072b

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sinit_lock_acquire>
 80078d4:	69a3      	ldr	r3, [r4, #24]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sinit_lock_release>
 80078e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078e4:	6523      	str	r3, [r4, #80]	; 0x50
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <__sinit+0x68>)
 80078e8:	4a13      	ldr	r2, [pc, #76]	; (8007938 <__sinit+0x6c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	bf04      	itt	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	61a3      	streq	r3, [r4, #24]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f820 	bl	800793c <__sfp>
 80078fc:	6060      	str	r0, [r4, #4]
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 f81c 	bl	800793c <__sfp>
 8007904:	60a0      	str	r0, [r4, #8]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f818 	bl	800793c <__sfp>
 800790c:	2200      	movs	r2, #0
 800790e:	60e0      	str	r0, [r4, #12]
 8007910:	2104      	movs	r1, #4
 8007912:	6860      	ldr	r0, [r4, #4]
 8007914:	f7ff ff82 	bl	800781c <std>
 8007918:	68a0      	ldr	r0, [r4, #8]
 800791a:	2201      	movs	r2, #1
 800791c:	2109      	movs	r1, #9
 800791e:	f7ff ff7d 	bl	800781c <std>
 8007922:	68e0      	ldr	r0, [r4, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	2112      	movs	r1, #18
 8007928:	f7ff ff78 	bl	800781c <std>
 800792c:	2301      	movs	r3, #1
 800792e:	61a3      	str	r3, [r4, #24]
 8007930:	e7d2      	b.n	80078d8 <__sinit+0xc>
 8007932:	bf00      	nop
 8007934:	08007d90 	.word	0x08007d90
 8007938:	08007865 	.word	0x08007865

0800793c <__sfp>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	4607      	mov	r7, r0
 8007940:	f7ff ffac 	bl	800789c <__sfp_lock_acquire>
 8007944:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <__sfp+0x84>)
 8007946:	681e      	ldr	r6, [r3, #0]
 8007948:	69b3      	ldr	r3, [r6, #24]
 800794a:	b913      	cbnz	r3, 8007952 <__sfp+0x16>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ffbd 	bl	80078cc <__sinit>
 8007952:	3648      	adds	r6, #72	; 0x48
 8007954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007958:	3b01      	subs	r3, #1
 800795a:	d503      	bpl.n	8007964 <__sfp+0x28>
 800795c:	6833      	ldr	r3, [r6, #0]
 800795e:	b30b      	cbz	r3, 80079a4 <__sfp+0x68>
 8007960:	6836      	ldr	r6, [r6, #0]
 8007962:	e7f7      	b.n	8007954 <__sfp+0x18>
 8007964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007968:	b9d5      	cbnz	r5, 80079a0 <__sfp+0x64>
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <__sfp+0x88>)
 800796c:	60e3      	str	r3, [r4, #12]
 800796e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007972:	6665      	str	r5, [r4, #100]	; 0x64
 8007974:	f000 f847 	bl	8007a06 <__retarget_lock_init_recursive>
 8007978:	f7ff ff96 	bl	80078a8 <__sfp_lock_release>
 800797c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007984:	6025      	str	r5, [r4, #0]
 8007986:	61a5      	str	r5, [r4, #24]
 8007988:	2208      	movs	r2, #8
 800798a:	4629      	mov	r1, r5
 800798c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007990:	f7fd fafa 	bl	8004f88 <memset>
 8007994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800799c:	4620      	mov	r0, r4
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	3468      	adds	r4, #104	; 0x68
 80079a2:	e7d9      	b.n	8007958 <__sfp+0x1c>
 80079a4:	2104      	movs	r1, #4
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ff62 	bl	8007870 <__sfmoreglue>
 80079ac:	4604      	mov	r4, r0
 80079ae:	6030      	str	r0, [r6, #0]
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1d5      	bne.n	8007960 <__sfp+0x24>
 80079b4:	f7ff ff78 	bl	80078a8 <__sfp_lock_release>
 80079b8:	230c      	movs	r3, #12
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	e7ee      	b.n	800799c <__sfp+0x60>
 80079be:	bf00      	nop
 80079c0:	08007d90 	.word	0x08007d90
 80079c4:	ffff0001 	.word	0xffff0001

080079c8 <_fwalk_reent>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4606      	mov	r6, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d4:	2700      	movs	r7, #0
 80079d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079da:	f1b9 0901 	subs.w	r9, r9, #1
 80079de:	d505      	bpl.n	80079ec <_fwalk_reent+0x24>
 80079e0:	6824      	ldr	r4, [r4, #0]
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d1f7      	bne.n	80079d6 <_fwalk_reent+0xe>
 80079e6:	4638      	mov	r0, r7
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d907      	bls.n	8007a02 <_fwalk_reent+0x3a>
 80079f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f6:	3301      	adds	r3, #1
 80079f8:	d003      	beq.n	8007a02 <_fwalk_reent+0x3a>
 80079fa:	4629      	mov	r1, r5
 80079fc:	4630      	mov	r0, r6
 80079fe:	47c0      	blx	r8
 8007a00:	4307      	orrs	r7, r0
 8007a02:	3568      	adds	r5, #104	; 0x68
 8007a04:	e7e9      	b.n	80079da <_fwalk_reent+0x12>

08007a06 <__retarget_lock_init_recursive>:
 8007a06:	4770      	bx	lr

08007a08 <__retarget_lock_acquire_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_release_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <__swhatbuf_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	b096      	sub	sp, #88	; 0x58
 8007a18:	4614      	mov	r4, r2
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	da07      	bge.n	8007a2e <__swhatbuf_r+0x22>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	89b3      	ldrh	r3, [r6, #12]
 8007a24:	061a      	lsls	r2, r3, #24
 8007a26:	d410      	bmi.n	8007a4a <__swhatbuf_r+0x3e>
 8007a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2c:	e00e      	b.n	8007a4c <__swhatbuf_r+0x40>
 8007a2e:	466a      	mov	r2, sp
 8007a30:	f000 f902 	bl	8007c38 <_fstat_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dbf2      	blt.n	8007a1e <__swhatbuf_r+0x12>
 8007a38:	9a01      	ldr	r2, [sp, #4]
 8007a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a42:	425a      	negs	r2, r3
 8007a44:	415a      	adcs	r2, r3
 8007a46:	602a      	str	r2, [r5, #0]
 8007a48:	e7ee      	b.n	8007a28 <__swhatbuf_r+0x1c>
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	b016      	add	sp, #88	; 0x58
 8007a52:	bd70      	pop	{r4, r5, r6, pc}

08007a54 <__smakebuf_r>:
 8007a54:	898b      	ldrh	r3, [r1, #12]
 8007a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a58:	079d      	lsls	r5, r3, #30
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	d507      	bpl.n	8007a70 <__smakebuf_r+0x1c>
 8007a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	ab01      	add	r3, sp, #4
 8007a72:	466a      	mov	r2, sp
 8007a74:	f7ff ffca 	bl	8007a0c <__swhatbuf_r>
 8007a78:	9900      	ldr	r1, [sp, #0]
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7ff f987 	bl	8006d90 <_malloc_r>
 8007a82:	b948      	cbnz	r0, 8007a98 <__smakebuf_r+0x44>
 8007a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d4ef      	bmi.n	8007a6c <__smakebuf_r+0x18>
 8007a8c:	f023 0303 	bic.w	r3, r3, #3
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7e3      	b.n	8007a60 <__smakebuf_r+0xc>
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <__smakebuf_r+0x7c>)
 8007a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	6120      	str	r0, [r4, #16]
 8007aae:	b15b      	cbz	r3, 8007ac8 <__smakebuf_r+0x74>
 8007ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 f8d1 	bl	8007c5c <_isatty_r>
 8007aba:	b128      	cbz	r0, 8007ac8 <__smakebuf_r+0x74>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	89a0      	ldrh	r0, [r4, #12]
 8007aca:	4305      	orrs	r5, r0
 8007acc:	81a5      	strh	r5, [r4, #12]
 8007ace:	e7cd      	b.n	8007a6c <__smakebuf_r+0x18>
 8007ad0:	08007865 	.word	0x08007865

08007ad4 <_malloc_usable_size_r>:
 8007ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad8:	1f18      	subs	r0, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfbc      	itt	lt
 8007ade:	580b      	ldrlt	r3, [r1, r0]
 8007ae0:	18c0      	addlt	r0, r0, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_raise_r>:
 8007ae4:	291f      	cmp	r1, #31
 8007ae6:	b538      	push	{r3, r4, r5, lr}
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	d904      	bls.n	8007af8 <_raise_r+0x14>
 8007aee:	2316      	movs	r3, #22
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007afa:	b112      	cbz	r2, 8007b02 <_raise_r+0x1e>
 8007afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b00:	b94b      	cbnz	r3, 8007b16 <_raise_r+0x32>
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 f830 	bl	8007b68 <_getpid_r>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	f000 b817 	b.w	8007b44 <_kill_r>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d00a      	beq.n	8007b30 <_raise_r+0x4c>
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	d103      	bne.n	8007b26 <_raise_r+0x42>
 8007b1e:	2316      	movs	r3, #22
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7e7      	b.n	8007af6 <_raise_r+0x12>
 8007b26:	2400      	movs	r4, #0
 8007b28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	4798      	blx	r3
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7e0      	b.n	8007af6 <_raise_r+0x12>

08007b34 <raise>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <raise+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f7ff bfd3 	b.w	8007ae4 <_raise_r>
 8007b3e:	bf00      	nop
 8007b40:	2000000c 	.word	0x2000000c

08007b44 <_kill_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_kill_r+0x20>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7fa fc13 	bl	800237c <_kill>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_kill_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_kill_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	20000724 	.word	0x20000724

08007b68 <_getpid_r>:
 8007b68:	f7fa bc00 	b.w	800236c <_getpid>

08007b6c <__sread>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b74:	f000 f894 	bl	8007ca0 <_read_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	bfab      	itete	ge
 8007b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b80:	181b      	addge	r3, r3, r0
 8007b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b86:	bfac      	ite	ge
 8007b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b8a:	81a3      	strhlt	r3, [r4, #12]
 8007b8c:	bd10      	pop	{r4, pc}

08007b8e <__swrite>:
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	461f      	mov	r7, r3
 8007b94:	898b      	ldrh	r3, [r1, #12]
 8007b96:	05db      	lsls	r3, r3, #23
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	d505      	bpl.n	8007bac <__swrite+0x1e>
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f000 f868 	bl	8007c7c <_lseek_r>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	463b      	mov	r3, r7
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	f000 b817 	b.w	8007bf4 <_write_r>

08007bc6 <__sseek>:
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	460c      	mov	r4, r1
 8007bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bce:	f000 f855 	bl	8007c7c <_lseek_r>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	bf15      	itete	ne
 8007bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007be2:	81a3      	strheq	r3, [r4, #12]
 8007be4:	bf18      	it	ne
 8007be6:	81a3      	strhne	r3, [r4, #12]
 8007be8:	bd10      	pop	{r4, pc}

08007bea <__sclose>:
 8007bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bee:	f000 b813 	b.w	8007c18 <_close_r>
	...

08007bf4 <_write_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	; (8007c14 <_write_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fa fbf1 	bl	80023ea <_write>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_write_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_write_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000724 	.word	0x20000724

08007c18 <_close_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	; (8007c34 <_close_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7fa fbfd 	bl	8002422 <_close>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_close_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_close_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	20000724 	.word	0x20000724

08007c38 <_fstat_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	; (8007c58 <_fstat_r+0x20>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7fa fbf8 	bl	800243a <_fstat>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_fstat_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_fstat_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	20000724 	.word	0x20000724

08007c5c <_isatty_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d06      	ldr	r5, [pc, #24]	; (8007c78 <_isatty_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fa fbf7 	bl	800245a <_isatty>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_isatty_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_isatty_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20000724 	.word	0x20000724

08007c7c <_lseek_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_lseek_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7fa fbf0 	bl	8002470 <_lseek>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_lseek_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_lseek_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000724 	.word	0x20000724

08007ca0 <_read_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	; (8007cc0 <_read_r+0x20>)
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7fa fb7e 	bl	80023b0 <_read>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_read_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_read_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	20000724 	.word	0x20000724

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
