
2_HD_MOTOR_ADC_PWM_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dec  08002dec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002e00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002e00  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000915a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000151a  00000000  00000000  00029196  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000980  00000000  00000000  0002b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020114  00000000  00000000  0002ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000750f  00000000  00000000  0004bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c769e  00000000  00000000  0005308b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a84  00000000  00000000  0011a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002dbc 	.word	0x08002dbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002dbc 	.word	0x08002dbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	a=0, b=0, c=0, t=0;
 80004d2:	4b52      	ldr	r3, [pc, #328]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	4b51      	ldr	r3, [pc, #324]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	4b50      	ldr	r3, [pc, #320]	; (8000628 <HAL_GPIO_EXTI_Callback+0x160>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80004ea:	bf00      	nop
 80004ec:	2101      	movs	r1, #1
 80004ee:	484f      	ldr	r0, [pc, #316]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 80004f0:	f001 fbc4 	bl	8001c7c <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d048      	beq.n	800058c <HAL_GPIO_EXTI_Callback+0xc4>
	{
		a=1;
 80004fa:	4b48      	ldr	r3, [pc, #288]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	601a      	str	r2, [r3, #0]
		b=0;
 8000500:	4b47      	ldr	r3, [pc, #284]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
		c=0;
 8000506:	4b47      	ldr	r3, [pc, #284]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 800050c:	bf00      	nop
 800050e:	2102      	movs	r1, #2
 8000510:	4846      	ldr	r0, [pc, #280]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 8000512:	f001 fbb3 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d009      	beq.n	8000530 <HAL_GPIO_EXTI_Callback+0x68>
		{
			b=1;
 800051c:	4b40      	ldr	r3, [pc, #256]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
			break;
 8000522:	bf00      	nop
		}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8000524:	e004      	b.n	8000530 <HAL_GPIO_EXTI_Callback+0x68>
		{
			c=1;
 8000526:	4b3f      	ldr	r3, [pc, #252]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
			break;
 800052c:	bf00      	nop
		}
		break;
 800052e:	e007      	b.n	8000540 <HAL_GPIO_EXTI_Callback+0x78>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8000530:	bf00      	nop
 8000532:	2104      	movs	r1, #4
 8000534:	483d      	ldr	r0, [pc, #244]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 8000536:	f001 fba1 	bl	8001c7c <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f2      	bne.n	8000526 <HAL_GPIO_EXTI_Callback+0x5e>
		break;
 8000540:	bf00      	nop
	}
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8000542:	e023      	b.n	800058c <HAL_GPIO_EXTI_Callback+0xc4>
	{
		a=0;
 8000544:	4b35      	ldr	r3, [pc, #212]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		b=1;
 800054a:	4b35      	ldr	r3, [pc, #212]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
		c=0;
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8000556:	bf00      	nop
 8000558:	2101      	movs	r1, #1
 800055a:	4834      	ldr	r0, [pc, #208]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 800055c:	f001 fb8e 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d009      	beq.n	800057a <HAL_GPIO_EXTI_Callback+0xb2>
		{
			a=1;
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
			break;
 800056c:	bf00      	nop
		}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800056e:	e004      	b.n	800057a <HAL_GPIO_EXTI_Callback+0xb2>
		{
			c=1;
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000572:	2201      	movs	r2, #1
 8000574:	601a      	str	r2, [r3, #0]
			break;
 8000576:	bf00      	nop
		}
		break;
 8000578:	e011      	b.n	800059e <HAL_GPIO_EXTI_Callback+0xd6>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800057a:	bf00      	nop
 800057c:	2104      	movs	r1, #4
 800057e:	482b      	ldr	r0, [pc, #172]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 8000580:	f001 fb7c 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f2      	bne.n	8000570 <HAL_GPIO_EXTI_Callback+0xa8>
		break;
 800058a:	e008      	b.n	800059e <HAL_GPIO_EXTI_Callback+0xd6>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 800058c:	bf00      	nop
 800058e:	2102      	movs	r1, #2
 8000590:	4826      	ldr	r0, [pc, #152]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 8000592:	f001 fb73 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1d3      	bne.n	8000544 <HAL_GPIO_EXTI_Callback+0x7c>
	}
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800059c:	e024      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x120>
 800059e:	e023      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x120>
	{
		a=0;
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
		b=0;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
		c=1;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 80005b2:	bf00      	nop
 80005b4:	2102      	movs	r1, #2
 80005b6:	481d      	ldr	r0, [pc, #116]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 80005b8:	f001 fb60 	bl	8001c7c <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d009      	beq.n	80005d6 <HAL_GPIO_EXTI_Callback+0x10e>
		{
			b=1;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
			break;
 80005c8:	bf00      	nop
		}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80005ca:	e004      	b.n	80005d6 <HAL_GPIO_EXTI_Callback+0x10e>
		{
			a=1;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
			break;
 80005d2:	bf00      	nop
		}
		break;
 80005d4:	e00f      	b.n	80005f6 <HAL_GPIO_EXTI_Callback+0x12e>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80005d6:	bf00      	nop
 80005d8:	2101      	movs	r1, #1
 80005da:	4814      	ldr	r0, [pc, #80]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 80005dc:	f001 fb4e 	bl	8001c7c <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f2      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x104>
		break;
 80005e6:	e006      	b.n	80005f6 <HAL_GPIO_EXTI_Callback+0x12e>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80005e8:	2104      	movs	r1, #4
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <HAL_GPIO_EXTI_Callback+0x164>)
 80005ec:	f001 fb46 	bl	8001c7c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1d4      	bne.n	80005a0 <HAL_GPIO_EXTI_Callback+0xd8>
	}
	t=c*4+b*2+a;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_GPIO_EXTI_Callback+0x15c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	005a      	lsls	r2, r3, #1
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_GPIO_EXTI_Callback+0x158>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	005a      	lsls	r2, r3, #1
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_GPIO_EXTI_Callback+0x154>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4413      	add	r3, r2
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_GPIO_EXTI_Callback+0x160>)
 800060c:	6013      	str	r3, [r2, #0]
	motor();
 800060e:	f000 f80f 	bl	8000630 <motor>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028
 8000620:	2000002c 	.word	0x2000002c
 8000624:	20000030 	.word	0x20000030
 8000628:	20000034 	.word	0x20000034
 800062c:	40020800 	.word	0x40020800

08000630 <motor>:
void motor()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	switch (t)
 8000634:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <motor+0x194>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	2b05      	cmp	r3, #5
 800063c:	f200 80be 	bhi.w	80007bc <motor+0x18c>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <motor+0x18>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000661 	.word	0x08000661
 800064c:	0800069b 	.word	0x0800069b
 8000650:	080006d5 	.word	0x080006d5
 8000654:	0800070f 	.word	0x0800070f
 8000658:	08000749 	.word	0x08000749
 800065c:	08000783 	.word	0x08000783
			{
			case 1:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, adc_value);
 8000660:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <motor+0x198>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b59      	ldr	r3, [pc, #356]	; (80007cc <motor+0x19c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4858      	ldr	r0, [pc, #352]	; (80007d0 <motor+0x1a0>)
 8000670:	f001 fb1c 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000674:	4b55      	ldr	r3, [pc, #340]	; (80007cc <motor+0x19c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2120      	movs	r1, #32
 8000680:	4853      	ldr	r0, [pc, #332]	; (80007d0 <motor+0x1a0>)
 8000682:	f001 fb13 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 255);
 8000686:	4b51      	ldr	r3, [pc, #324]	; (80007cc <motor+0x19c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	484f      	ldr	r0, [pc, #316]	; (80007d0 <motor+0x1a0>)
 8000694:	f001 fb0a 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 8000698:	e091      	b.n	80007be <motor+0x18e>
			case 2:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 255);
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <motor+0x19c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	484a      	ldr	r0, [pc, #296]	; (80007d0 <motor+0x1a0>)
 80006a8:	f001 fb00 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, adc_value);
 80006ac:	4b46      	ldr	r3, [pc, #280]	; (80007c8 <motor+0x198>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b46      	ldr	r3, [pc, #280]	; (80007cc <motor+0x19c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2120      	movs	r1, #32
 80006ba:	4845      	ldr	r0, [pc, #276]	; (80007d0 <motor+0x1a0>)
 80006bc:	f001 faf6 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80006c0:	4b42      	ldr	r3, [pc, #264]	; (80007cc <motor+0x19c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	4840      	ldr	r0, [pc, #256]	; (80007d0 <motor+0x1a0>)
 80006ce:	f001 faed 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 80006d2:	e074      	b.n	80007be <motor+0x18e>
			case 3:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <motor+0x19c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2200      	movs	r2, #0
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	483b      	ldr	r0, [pc, #236]	; (80007d0 <motor+0x1a0>)
 80006e2:	f001 fae3 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, adc_value);
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <motor+0x198>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	4b38      	ldr	r3, [pc, #224]	; (80007cc <motor+0x19c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	4836      	ldr	r0, [pc, #216]	; (80007d0 <motor+0x1a0>)
 80006f6:	f001 fad9 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 255);
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <motor+0x19c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <motor+0x1a0>)
 8000708:	f001 fad0 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 800070c:	e057      	b.n	80007be <motor+0x18e>
			case 4:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <motor+0x19c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <motor+0x1a0>)
 800071c:	f001 fac6 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 255);
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <motor+0x19c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2120      	movs	r1, #32
 800072c:	4828      	ldr	r0, [pc, #160]	; (80007d0 <motor+0x1a0>)
 800072e:	f001 fabd 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, adc_value);
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <motor+0x198>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <motor+0x19c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4823      	ldr	r0, [pc, #140]	; (80007d0 <motor+0x1a0>)
 8000742:	f001 fab3 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 8000746:	e03a      	b.n	80007be <motor+0x18e>
			case 5:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, adc_value);
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <motor+0x198>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <motor+0x19c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2110      	movs	r1, #16
 8000756:	481e      	ldr	r0, [pc, #120]	; (80007d0 <motor+0x1a0>)
 8000758:	f001 faa8 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 255);
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <motor+0x19c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2120      	movs	r1, #32
 8000768:	4819      	ldr	r0, [pc, #100]	; (80007d0 <motor+0x1a0>)
 800076a:	f001 fa9f 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <motor+0x19c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2140      	movs	r1, #64	; 0x40
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <motor+0x1a0>)
 800077c:	f001 fa96 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 8000780:	e01d      	b.n	80007be <motor+0x18e>
			case 6:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 255);
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <motor+0x19c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <motor+0x1a0>)
 8000790:	f001 fa8c 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <motor+0x19c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <motor+0x1a0>)
 80007a2:	f001 fa83 	bl	8001cac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, adc_value);
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <motor+0x198>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <motor+0x19c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <motor+0x1a0>)
 80007b6:	f001 fa79 	bl	8001cac <HAL_GPIO_WritePin>
				break;
 80007ba:	e000      	b.n	80007be <motor+0x18e>
			default:
				break;
 80007bc:	bf00      	nop
			}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000034 	.word	0x20000034
 80007c8:	20000038 	.word	0x20000038
 80007cc:	20000088 	.word	0x20000088
 80007d0:	40020000 	.word	0x40020000

080007d4 <Read_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Read_ADC()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <Read_ADC+0x30>)
 80007da:	f000 fbfb 	bl	8000fd4 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 80007de:	490a      	ldr	r1, [pc, #40]	; (8000808 <Read_ADC+0x34>)
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <Read_ADC+0x30>)
 80007e2:	f000 fcf0 	bl	80011c6 <HAL_ADC_PollForConversion>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d106      	bne.n	80007fa <Read_ADC+0x26>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <Read_ADC+0x30>)
 80007ee:	f000 fd6e 	bl	80012ce <HAL_ADC_GetValue>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <Read_ADC+0x38>)
 80007f8:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 80007fa:	4802      	ldr	r0, [pc, #8]	; (8000804 <Read_ADC+0x30>)
 80007fc:	f000 fcb0 	bl	8001160 <HAL_ADC_Stop>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000003c 	.word	0x2000003c
 8000808:	000186a0 	.word	0x000186a0
 800080c:	20000038 	.word	0x20000038

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fb28 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f81a 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f000 f944 	bl	8000aa8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000820:	f000 f880 	bl	8000924 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000824:	f000 f8d2 	bl	80009cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000828:	2104      	movs	r1, #4
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <main+0x3c>)
 800082c:	f001 fea4 	bl	8002578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000830:	2108      	movs	r1, #8
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <main+0x3c>)
 8000834:	f001 fea0 	bl	8002578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000838:	210c      	movs	r1, #12
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <main+0x3c>)
 800083c:	f001 fe9c 	bl	8002578 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_ADC();
 8000840:	f7ff ffc8 	bl	80007d4 <Read_ADC>


	  motor();
 8000844:	f7ff fef4 	bl	8000630 <motor>
	  Read_ADC();
 8000848:	e7fa      	b.n	8000840 <main+0x30>
 800084a:	bf00      	nop
 800084c:	20000088 	.word	0x20000088

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f002 faa4 	bl	8002dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	; (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2310      	movs	r3, #16
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008c4:	23a8      	movs	r3, #168	; 0xa8
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fa1b 	bl	8001d10 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e0:	f000 f972 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2105      	movs	r1, #5
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fc74 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800090e:	f000 f95b 	bl	8000bc8 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	; 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <MX_ADC1_Init+0xa0>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800093e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800094a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000954:	2200      	movs	r2, #0
 8000956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000968:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_ADC1_Init+0xa4>)
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000974:	2201      	movs	r2, #1
 8000976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000982:	2201      	movs	r2, #1
 8000984:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_ADC1_Init+0x9c>)
 8000988:	f000 fae0 	bl	8000f4c <HAL_ADC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000992:	f000 f919 	bl	8000bc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_ADC1_Init+0x9c>)
 80009a8:	f000 fc9e 	bl	80012e8 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009b2:	f000 f909 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000003c 	.word	0x2000003c
 80009c4:	40012000 	.word	0x40012000
 80009c8:	0f000001 	.word	0x0f000001

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 80009f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 80009f8:	2253      	movs	r2, #83	; 0x53
 80009fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a04:	227c      	movs	r2, #124	; 0x7c
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a14:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a16:	f001 fd83 	bl	8002520 <HAL_TIM_PWM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a20:	f000 f8d2 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4619      	mov	r1, r3
 8000a32:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a34:	f002 f91a 	bl	8002c6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a3e:	f000 f8c3 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	2360      	movs	r3, #96	; 0x60
 8000a44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2204      	movs	r2, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a5a:	f001 fdcb 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a64:	f000 f8b0 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a70:	f001 fdc0 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a7a:	f000 f8a5 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	220c      	movs	r2, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a86:	f001 fdb5 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000a90:	f000 f89a 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM2_Init+0xd8>)
 8000a96:	f000 f92b 	bl	8000cf0 <HAL_TIM_MspPostInit>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000088 	.word	0x20000088

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x10c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2170      	movs	r1, #112	; 0x70
 8000b16:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b18:	f001 f8c8 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b22:	4826      	ldr	r0, [pc, #152]	; (8000bbc <MX_GPIO_Init+0x114>)
 8000b24:	f001 f8c2 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_GPIO_Init+0x118>)
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x11c>)
 8000b3c:	f000 ff04 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b40:	2370      	movs	r3, #112	; 0x70
 8000b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0x110>)
 8000b58:	f000 fef6 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_GPIO_Init+0x114>)
 8000b76:	f000 fee7 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2006      	movs	r0, #6
 8000b80:	f000 feab 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b84:	2006      	movs	r0, #6
 8000b86:	f000 fec4 	bl	8001912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fea3 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b94:	2007      	movs	r0, #7
 8000b96:	f000 febc 	bl	8001912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f000 fe9b 	bl	80018da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ba4:	2008      	movs	r0, #8
 8000ba6:	f000 feb4 	bl	8001912 <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	10110000 	.word	0x10110000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_ADC_MspInit+0x7c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d127      	bne.n	8000c9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_ADC_MspInit+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_ADC_MspInit+0x84>)
 8000c96:	f000 fe57 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40012000 	.word	0x40012000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc0:	d10d      	bne.n	8000cde <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_TIM_PWM_MspInit+0x3c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_TIM_PWM_MspInit+0x3c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_TIM_PWM_MspInit+0x3c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d11d      	bne.n	8000d4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_TIM_MspPostInit+0x68>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_TIM_MspPostInit+0x68>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_TIM_MspPostInit+0x68>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d2e:	230e      	movs	r3, #14
 8000d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <HAL_TIM_MspPostInit+0x6c>)
 8000d4a:	f000 fdfd 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8aa 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 ff8d 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f000 ff86 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f000 ff7f 	bl	8001ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x28>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SystemInit+0x28>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x28>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
  ldr  r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e34:	f842 3b04 	str.w	r3, [r2], #4

08000e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3e:	f7ff ffd3 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f001 ff8f 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fce3 	bl	8000810 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e50:	08002df4 	.word	0x08002df4
  ldr  r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e58:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e5c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e60:	200000cc 	.word	0x200000cc

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fd17 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe9c 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fd2f 	bl	800192e <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 fcf7 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200000c8 	.word	0x200000c8

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200000c8 	.word	0x200000c8

08000f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e033      	b.n	8000fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fe5c 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f92:	f023 0302 	bic.w	r3, r3, #2
 8000f96:	f043 0202 	orr.w	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac4 	bl	800152c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fba:	e001      	b.n	8000fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Start+0x1a>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e0a5      	b.n	800113a <HAL_ADC_Start+0x166>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d018      	beq.n	8001036 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001014:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <HAL_ADC_Start+0x174>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_ADC_Start+0x178>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0c9a      	lsrs	r2, r3, #18
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001028:	e002      	b.n	8001030 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d179      	bne.n	8001138 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800106e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001082:	d106      	bne.n	8001092 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001088:	f023 0206 	bic.w	r2, r3, #6
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
 8001090:	e002      	b.n	8001098 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_ADC_Start+0x17c>)
 80010a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12a      	bne.n	8001110 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_ADC_Start+0x180>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d015      	beq.n	80010f0 <HAL_ADC_Start+0x11c>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a23      	ldr	r2, [pc, #140]	; (8001158 <HAL_ADC_Start+0x184>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d105      	bne.n	80010da <HAL_ADC_Start+0x106>
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_ADC_Start+0x17c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <HAL_ADC_Start+0x188>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d129      	bne.n	8001138 <HAL_ADC_Start+0x164>
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_ADC_Start+0x17c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d823      	bhi.n	8001138 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d11c      	bne.n	8001138 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	e013      	b.n	8001138 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_ADC_Start+0x180>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_ADC_Start+0x164>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001136:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	40012300 	.word	0x40012300
 8001154:	40012000 	.word	0x40012000
 8001158:	40012100 	.word	0x40012100
 800115c:	40012200 	.word	0x40012200

08001160 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Stop+0x16>
 8001172:	2302      	movs	r3, #2
 8001174:	e021      	b.n	80011ba <HAL_ADC_Stop+0x5a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e2:	d113      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d10b      	bne.n	800120c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f043 0220 	orr.w	r2, r3, #32
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e05c      	b.n	80012c6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800120c:	f7ff fe92 	bl	8000f34 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001212:	e01a      	b.n	800124a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121a:	d016      	beq.n	800124a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_ADC_PollForConversion+0x6c>
 8001222:	f7ff fe87 	bl	8000f34 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20b      	bcs.n	800124a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f043 0204 	orr.w	r2, r3, #4
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e03d      	b.n	80012c6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b02      	cmp	r3, #2
 8001256:	d1dd      	bne.n	8001214 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0212 	mvn.w	r2, #18
 8001260:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d123      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11f      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800129c:	2b00      	cmp	r3, #0
 800129e:	d111      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1c>
 8001300:	2302      	movs	r3, #2
 8001302:	e105      	b.n	8001510 <HAL_ADC_ConfigChannel+0x228>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b09      	cmp	r3, #9
 8001312:	d925      	bls.n	8001360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68d9      	ldr	r1, [r3, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	3b1e      	subs	r3, #30
 800132a:	2207      	movs	r2, #7
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68d9      	ldr	r1, [r3, #12]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	4603      	mov	r3, r0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4403      	add	r3, r0
 8001352:	3b1e      	subs	r3, #30
 8001354:	409a      	lsls	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	e022      	b.n	80013a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	2207      	movs	r2, #7
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6919      	ldr	r1, [r3, #16]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	4603      	mov	r3, r0
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4403      	add	r3, r0
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d824      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b05      	subs	r3, #5
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b05      	subs	r3, #5
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
 80013f6:	e04c      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d824      	bhi.n	800144a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b23      	subs	r3, #35	; 0x23
 8001412:	221f      	movs	r2, #31
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43da      	mvns	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	400a      	ands	r2, r1
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b23      	subs	r3, #35	; 0x23
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
 8001448:	e023      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b41      	subs	r3, #65	; 0x41
 800145c:	221f      	movs	r2, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b41      	subs	r3, #65	; 0x41
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_ADC_ConfigChannel+0x234>)
 8001494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_ADC_ConfigChannel+0x238>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d109      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1cc>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b12      	cmp	r3, #18
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_ADC_ConfigChannel+0x238>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d123      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x1e6>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d11b      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d111      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_ADC_ConfigChannel+0x23c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_ADC_ConfigChannel+0x240>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9a      	lsrs	r2, r3, #18
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f8:	e002      	b.n	8001500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40012300 	.word	0x40012300
 8001520:	40012000 	.word	0x40012000
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <ADC_Init+0x1f0>)
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	021a      	lsls	r2, r3, #8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6899      	ldr	r1, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <ADC_Init+0x1f4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d022      	beq.n	800160a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6899      	ldr	r1, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	e00f      	b.n	800162a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0202 	bic.w	r2, r2, #2
 8001638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e1b      	ldrb	r3, [r3, #24]
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01b      	beq.n	8001690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	035a      	lsls	r2, r3, #13
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	e007      	b.n	80016a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	051a      	lsls	r2, r3, #20
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e2:	025a      	lsls	r2, r3, #9
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	029a      	lsls	r2, r3, #10
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40012300 	.word	0x40012300
 8001720:	0f000001 	.word	0x0f000001

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff29 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff3e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e16b      	b.n	8001c3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 815a 	bne.w	8001c36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d00b      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001996:	2b11      	cmp	r3, #17
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0xfc>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80b4 	beq.w	8001c36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_GPIO_Init+0x308>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_GPIO_Init+0x308>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_GPIO_Init+0x308>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x310>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d02b      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x314>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x318>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_GPIO_Init+0x31c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x216>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x212>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <HAL_GPIO_Init+0x328>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x20e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x20a>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00e      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b52:	2308      	movs	r3, #8
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x228>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b80:	4934      	ldr	r1, [pc, #208]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb2:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f ae90 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	3724      	adds	r7, #36	; 0x24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021400 	.word	0x40021400
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40021c00 	.word	0x40021c00
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fbe2 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e25b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d075      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d52:	d10b      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b99      	ldr	r3, [pc, #612]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d05b      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d157      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e236      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a87      	ldr	r2, [pc, #540]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001da8:	4b84      	ldr	r3, [pc, #528]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a83      	ldr	r2, [pc, #524]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f8b4 	bl	8000f34 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f8b0 	bl	8000f34 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1fb      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f8a0 	bl	8000f34 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f89c 	bl	8000f34 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1e7      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1bb      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4952      	ldr	r1, [pc, #328]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_OscConfig+0x2b0>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f855 	bl	8000f34 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f851 	bl	8000f34 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e19c      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4940      	ldr	r1, [pc, #256]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f834 	bl	8000f34 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f830 	bl	8000f34 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e17b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d030      	beq.n	8001f5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f814 	bl	8000f34 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f810 	bl	8000f34 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e15b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x200>
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7fe fffd 	bl	8000f34 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fff9 	bl	8000f34 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e144      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a0 	beq.w	80020aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d121      	bne.n	8001fea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe ffbf 	bl	8000f34 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e011      	b.n	8001fde <HAL_RCC_OscConfig+0x2ce>
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	42470000 	.word	0x42470000
 8001fc4:	42470e80 	.word	0x42470e80
 8001fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7fe ffb2 	bl	8000f34 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0fd      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4d4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x2f0>
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a7c      	ldr	r2, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x32a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x312>
 8002008:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a76      	ldr	r2, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a73      	ldr	r2, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x32a>
 8002022:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a70      	ldr	r2, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7fe ff77 	bl	8000f34 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe ff73 	bl	8000f34 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0bc      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x33a>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe ff61 	bl	8000f34 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ff5d 	bl	8000f34 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0a6      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8092 	beq.w	80021d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d05c      	beq.n	800217a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d141      	bne.n	800214c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe ff31 	bl	8000f34 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe ff2d 	bl	8000f34 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e078      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	019b      	lsls	r3, r3, #6
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	4933      	ldr	r1, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe ff06 	bl	8000f34 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe ff02 	bl	8000f34 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04d      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x41c>
 800214a:	e045      	b.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe feef 	bl	8000f34 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe feeb 	bl	8000f34 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e036      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x44a>
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e029      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	42470060 	.word	0x42470060

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fe28 	bl	8000f34 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fe24 	bl	8000f34 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4601      	mov	r1, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	fa21 f303 	lsr.w	r3, r1, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fd88 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08002dd4 	.word	0x08002dd4
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d007      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x32>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d008      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x38>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 808d 	bne.w	8002502 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023ea:	60bb      	str	r3, [r7, #8]
       break;
 80023ec:	e08c      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ee:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_GetSysClockFreq+0x160>)
 80023f0:	60bb      	str	r3, [r7, #8]
      break;
 80023f2:	e089      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b45      	ldr	r3, [pc, #276]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d023      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	ea03 0501 	and.w	r5, r3, r1
 8002420:	ea04 0602 	and.w	r6, r4, r2
 8002424:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_RCC_GetSysClockFreq+0x160>)
 8002426:	fb02 f106 	mul.w	r1, r2, r6
 800242a:	2200      	movs	r2, #0
 800242c:	fb02 f205 	mul.w	r2, r2, r5
 8002430:	440a      	add	r2, r1
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_RCC_GetSysClockFreq+0x160>)
 8002434:	fba5 0101 	umull	r0, r1, r5, r1
 8002438:	1853      	adds	r3, r2, r1
 800243a:	4619      	mov	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	461a      	mov	r2, r3
 8002444:	4623      	mov	r3, r4
 8002446:	f7fd febf 	bl	80001c8 <__aeabi_uldivmod>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e049      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	ea03 0501 	and.w	r5, r3, r1
 8002468:	ea04 0602 	and.w	r6, r4, r2
 800246c:	4629      	mov	r1, r5
 800246e:	4632      	mov	r2, r6
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	f04f 0400 	mov.w	r4, #0
 8002478:	0154      	lsls	r4, r2, #5
 800247a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800247e:	014b      	lsls	r3, r1, #5
 8002480:	4619      	mov	r1, r3
 8002482:	4622      	mov	r2, r4
 8002484:	1b49      	subs	r1, r1, r5
 8002486:	eb62 0206 	sbc.w	r2, r2, r6
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	0194      	lsls	r4, r2, #6
 8002494:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002498:	018b      	lsls	r3, r1, #6
 800249a:	1a5b      	subs	r3, r3, r1
 800249c:	eb64 0402 	sbc.w	r4, r4, r2
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	00e2      	lsls	r2, r4, #3
 80024aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024ae:	00d9      	lsls	r1, r3, #3
 80024b0:	460b      	mov	r3, r1
 80024b2:	4614      	mov	r4, r2
 80024b4:	195b      	adds	r3, r3, r5
 80024b6:	eb44 0406 	adc.w	r4, r4, r6
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	02a2      	lsls	r2, r4, #10
 80024c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024c8:	0299      	lsls	r1, r3, #10
 80024ca:	460b      	mov	r3, r1
 80024cc:	4614      	mov	r4, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	4621      	mov	r1, r4
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f04f 0400 	mov.w	r4, #0
 80024d8:	461a      	mov	r2, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	f7fd fe74 	bl	80001c8 <__aeabi_uldivmod>
 80024e0:	4603      	mov	r3, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_GetSysClockFreq+0x158>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	3301      	adds	r3, #1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	60bb      	str	r3, [r7, #8]
      break;
 8002500:	e002      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002504:	60bb      	str	r3, [r7, #8]
      break;
 8002506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002508:	68bb      	ldr	r3, [r7, #8]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	017d7840 	.word	0x017d7840

08002520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e01d      	b.n	800256e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fbb2 	bl	8000cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 f90e 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2201      	movs	r2, #1
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fb48 	bl	8002c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_TIM_PWM_Start+0x74>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_PWM_Start+0x2c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_TIM_PWM_Start+0x78>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_TIM_PWM_Start+0x30>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_TIM_PWM_Start+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d007      	beq.n	80025e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800260a:	2302      	movs	r3, #2
 800260c:	e0b4      	b.n	8002778 <HAL_TIM_PWM_ConfigChannel+0x184>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	f200 809f 	bhi.w	8002764 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002661 	.word	0x08002661
 8002630:	08002765 	.word	0x08002765
 8002634:	08002765 	.word	0x08002765
 8002638:	08002765 	.word	0x08002765
 800263c:	080026a1 	.word	0x080026a1
 8002640:	08002765 	.word	0x08002765
 8002644:	08002765 	.word	0x08002765
 8002648:	08002765 	.word	0x08002765
 800264c:	080026e3 	.word	0x080026e3
 8002650:	08002765 	.word	0x08002765
 8002654:	08002765 	.word	0x08002765
 8002658:	08002765 	.word	0x08002765
 800265c:	08002723 	.word	0x08002723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f92a 	bl	80028c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6999      	ldr	r1, [r3, #24]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	619a      	str	r2, [r3, #24]
      break;
 800269e:	e062      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f97a 	bl	80029a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6999      	ldr	r1, [r3, #24]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	021a      	lsls	r2, r3, #8
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	619a      	str	r2, [r3, #24]
      break;
 80026e0:	e041      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f9cf 	bl	8002a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0208 	orr.w	r2, r2, #8
 80026fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0204 	bic.w	r2, r2, #4
 800270c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69d9      	ldr	r1, [r3, #28]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
      break;
 8002720:	e021      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa23 	bl	8002b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	021a      	lsls	r2, r3, #8
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	61da      	str	r2, [r3, #28]
      break;
 8002762:	e000      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002764:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a40      	ldr	r2, [pc, #256]	; (8002894 <TIM_Base_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d00f      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3d      	ldr	r2, [pc, #244]	; (8002898 <TIM_Base_SetConfig+0x118>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3c      	ldr	r2, [pc, #240]	; (800289c <TIM_Base_SetConfig+0x11c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <TIM_Base_SetConfig+0x120>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <TIM_Base_SetConfig+0x124>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d108      	bne.n	80027d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <TIM_Base_SetConfig+0x114>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d02b      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d027      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <TIM_Base_SetConfig+0x118>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d023      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <TIM_Base_SetConfig+0x11c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <TIM_Base_SetConfig+0x120>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01b      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a29      	ldr	r2, [pc, #164]	; (80028a4 <TIM_Base_SetConfig+0x124>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d017      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <TIM_Base_SetConfig+0x128>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <TIM_Base_SetConfig+0x12c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00f      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <TIM_Base_SetConfig+0x130>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <TIM_Base_SetConfig+0x134>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <TIM_Base_SetConfig+0x138>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0xb2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <TIM_Base_SetConfig+0x13c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <TIM_Base_SetConfig+0x114>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <TIM_Base_SetConfig+0xf8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <TIM_Base_SetConfig+0x124>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	40001800 	.word	0x40001800
 80028b8:	40001c00 	.word	0x40001c00
 80028bc:	40002000 	.word	0x40002000

080028c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 0302 	bic.w	r3, r3, #2
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <TIM_OC1_SetConfig+0xd8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <TIM_OC1_SetConfig+0x64>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a1f      	ldr	r2, [pc, #124]	; (800299c <TIM_OC1_SetConfig+0xdc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10c      	bne.n	800293e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f023 0308 	bic.w	r3, r3, #8
 800292a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <TIM_OC1_SetConfig+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_OC1_SetConfig+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <TIM_OC1_SetConfig+0xdc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d111      	bne.n	8002972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800295c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40010000 	.word	0x40010000
 800299c:	40010400 	.word	0x40010400

080029a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0210 	bic.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0320 	bic.w	r3, r3, #32
 80029ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <TIM_OC2_SetConfig+0xe4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC2_SetConfig+0x68>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <TIM_OC2_SetConfig+0xe8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10d      	bne.n	8002a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <TIM_OC2_SetConfig+0xe4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC2_SetConfig+0x94>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <TIM_OC2_SetConfig+0xe8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d113      	bne.n	8002a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40010400 	.word	0x40010400

08002a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <TIM_OC3_SetConfig+0xe0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_OC3_SetConfig+0x66>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <TIM_OC3_SetConfig+0xe4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <TIM_OC3_SetConfig+0xe0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_OC3_SetConfig+0x92>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <TIM_OC3_SetConfig+0xe4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40010400 	.word	0x40010400

08002b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	031b      	lsls	r3, r3, #12
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <TIM_OC4_SetConfig+0xa4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_OC4_SetConfig+0x68>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <TIM_OC4_SetConfig+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d109      	bne.n	8002bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40010400 	.word	0x40010400

08002c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2201      	movs	r2, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1a      	ldr	r2, [r3, #32]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e05a      	b.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d01d      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10c      	bne.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40001800 	.word	0x40001800

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4e0d      	ldr	r6, [pc, #52]	; (8002d9c <__libc_init_array+0x38>)
 8002d68:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6a:	1ba4      	subs	r4, r4, r6
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	2500      	movs	r5, #0
 8002d70:	42a5      	cmp	r5, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	4e0b      	ldr	r6, [pc, #44]	; (8002da4 <__libc_init_array+0x40>)
 8002d76:	4c0c      	ldr	r4, [pc, #48]	; (8002da8 <__libc_init_array+0x44>)
 8002d78:	f000 f820 	bl	8002dbc <_init>
 8002d7c:	1ba4      	subs	r4, r4, r6
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	2500      	movs	r5, #0
 8002d82:	42a5      	cmp	r5, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d8c:	4798      	blx	r3
 8002d8e:	3501      	adds	r5, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d96:	4798      	blx	r3
 8002d98:	3501      	adds	r5, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002dec 	.word	0x08002dec
 8002da0:	08002dec 	.word	0x08002dec
 8002da4:	08002dec 	.word	0x08002dec
 8002da8:	08002df0 	.word	0x08002df0

08002dac <memset>:
 8002dac:	4402      	add	r2, r0
 8002dae:	4603      	mov	r3, r0
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d100      	bne.n	8002db6 <memset+0xa>
 8002db4:	4770      	bx	lr
 8002db6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dba:	e7f9      	b.n	8002db0 <memset+0x4>

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
