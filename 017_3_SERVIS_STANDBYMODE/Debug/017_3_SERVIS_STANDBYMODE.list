
017_3_SERVIS_STANDBYMODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002038  08002038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020a0  080020a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020a8  080020a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020a8  080020a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020ac  080020ac  000120ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080020bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080020bc  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b95  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  00026bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00028008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000578  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001faae  00000000  00000000  00028ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d95  00000000  00000000  0004864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c09e8  00000000  00000000  0004f3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fdcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000178c  00000000  00000000  0010fe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002020 	.word	0x08002020

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002020 	.word	0x08002020

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fa4b 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f877 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f90b 	bl	80006f8 <MX_GPIO_Init>
  MX_USART3_Init();
 80004e2:	f000 f8dd 	bl	80006a0 <MX_USART3_Init>
  /* USER CODE BEGIN 2 */

  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <main+0xe4>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d127      	bne.n	8000542 <main+0x72>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <main+0xe4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <main+0xe4>)
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	6013      	str	r3, [r2, #0]

	  char *str = "bekleme modu basliyor\n";
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <main+0xe8>)
 8000500:	60fb      	str	r3, [r7, #12]
	  HAL_USART_Transmit(&husart3, (uint8_t*)str, strlen (str), HAL_MAX_DELAY);
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	f7ff fe60 	bl	80001c8 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b29a      	uxth	r2, r3
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	68f9      	ldr	r1, [r7, #12]
 8000512:	482a      	ldr	r0, [pc, #168]	; (80005bc <main+0xec>)
 8000514:	f001 fa6b 	bl	80019ee <HAL_USART_Transmit>

	  for (int i=0; i<20; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <main+0x64>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800051e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <main+0xf0>)
 8000524:	f000 fd55 	bl	8000fd2 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000528:	20c8      	movs	r0, #200	; 0xc8
 800052a:	f000 fa93 	bl	8000a54 <HAL_Delay>
	  for (int i=0; i<20; i++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	2b13      	cmp	r3, #19
 8000538:	ddf1      	ble.n	800051e <main+0x4e>
	  }
	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 800053a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800053e:	f000 fd75 	bl	800102c <HAL_PWR_DisableWakeUpPin>
  }

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <main+0xe4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <main+0xe4>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6013      	str	r3, [r2, #0]

  char *str2 = "bekleme moduna girmek üzere\n";
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0xf4>)
 8000550:	60bb      	str	r3, [r7, #8]
  HAL_USART_Transmit(&husart3, (uint8_t*)str2, strlen (str2), HAL_MAX_DELAY);
 8000552:	68b8      	ldr	r0, [r7, #8]
 8000554:	f7ff fe38 	bl	80001c8 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xec>)
 8000564:	f001 fa43 	bl	80019ee <HAL_USART_Transmit>

  for (int i=0; i<5; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	e00b      	b.n	8000586 <main+0xb6>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800056e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000572:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xf0>)
 8000574:	f000 fd2d 	bl	8000fd2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fa6a 	bl	8000a54 <HAL_Delay>
  for (int i=0; i<5; i++)
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	3301      	adds	r3, #1
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	2b04      	cmp	r3, #4
 800058a:	ddf0      	ble.n	800056e <main+0x9e>
  }

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800058c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000590:	f000 fd3a 	bl	8001008 <HAL_PWR_EnableWakeUpPin>

  char *str3 = "bekleme modu basladi\n";
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <main+0xf8>)
 8000596:	607b      	str	r3, [r7, #4]
  HAL_USART_Transmit(&husart3, (uint8_t*)str3, strlen (str3), HAL_MAX_DELAY);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fe15 	bl	80001c8 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0xec>)
 80005aa:	f001 fa20 	bl	80019ee <HAL_USART_Transmit>

  HAL_PWR_EnterSTANDBYMode();
 80005ae:	f000 fd51 	bl	8001054 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0xe2>
 80005b4:	40007000 	.word	0x40007000
 80005b8:	08002038 	.word	0x08002038
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40020c00 	.word	0x40020c00
 80005c4:	08002050 	.word	0x08002050
 80005c8:	08002070 	.word	0x08002070

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fd18 	bl	8002010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	; 0xa8
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fd17 	bl	8001084 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f8ac 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ff78 	bl	8001574 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 f895 	bl	80007b8 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_USART3_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_USART3_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART3_Init+0x50>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_USART3_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_USART3_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART3_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_USART3_Init+0x50>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART3_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_USART3_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART3_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_USART3_Init+0x50>)
 80006de:	f001 f945 	bl	800196c <HAL_USART_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f866 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40004800 	.word	0x40004800

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <MX_GPIO_Init+0xb8>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0xbc>)
 8000786:	f000 fc0b 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800078a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xbc>)
 80007a4:	f000 fa60 	bl	8000c68 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_USART_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12c      	bne.n	8000890 <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_USART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_USART_MspInit+0x88>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_USART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_USART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_USART_MspInit+0x88>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_USART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    PB12     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800086e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000880:	2307      	movs	r3, #7
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_USART_MspInit+0x8c>)
 800088c:	f000 f9ec 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004800 	.word	0x40004800
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f890 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f001 fb3d 	bl	8001fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdbf 	bl	80004d0 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	080020b0 	.word	0x080020b0
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000070 	.word	0x20000070

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f931 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff0e 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f93b 	bl	8000c4e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f911 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000006c 	.word	0x2000006c

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000006c 	.word	0x2000006c

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e16b      	b.n	8000f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 815a 	bne.w	8000f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80b4 	beq.w	8000f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b60      	ldr	r3, [pc, #384]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a5f      	ldr	r2, [pc, #380]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <HAL_GPIO_Init+0x314>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x318>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x222>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x21e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x216>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <HAL_GPIO_Init+0x328>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_GPIO_Init+0x32c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x20e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20a>
 8000e6e:	2307      	movs	r3, #7
 8000e70:	e00e      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e72:	2308      	movs	r3, #8
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea0:	4935      	ldr	r1, [pc, #212]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	f67f ae90 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021c00 	.word	0x40021c00
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	041a      	lsls	r2, r3, #16
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4904      	ldr	r1, [pc, #16]	; (8001028 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40007000 	.word	0x40007000

0800102c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	43db      	mvns	r3, r3
 800103c:	4904      	ldr	r1, [pc, #16]	; (8001050 <HAL_PWR_DisableWakeUpPin+0x24>)
 800103e:	4013      	ands	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001070:	bf30      	wfi
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40007000 	.word	0x40007000
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e264      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d075      	beq.n	800118e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	4ba3      	ldr	r3, [pc, #652]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d00c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4ba0      	ldr	r3, [pc, #640]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d112      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ba:	4b9d      	ldr	r3, [pc, #628]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010c6:	d10b      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	4b99      	ldr	r3, [pc, #612]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d05b      	beq.n	800118c <HAL_RCC_OscConfig+0x108>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d157      	bne.n	800118c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e23f      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d106      	bne.n	80010f8 <HAL_RCC_OscConfig+0x74>
 80010ea:	4b91      	ldr	r3, [pc, #580]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a90      	ldr	r2, [pc, #576]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b8b      	ldr	r3, [pc, #556]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a8a      	ldr	r2, [pc, #552]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a87      	ldr	r2, [pc, #540]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 800111c:	4b84      	ldr	r3, [pc, #528]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a83      	ldr	r2, [pc, #524]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b81      	ldr	r3, [pc, #516]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a80      	ldr	r2, [pc, #512]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc7e 	bl	8000a3c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fc7a 	bl	8000a3c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e204      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xc0>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc6a 	bl	8000a3c <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fc66 	bl	8000a3c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1f0      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	4b6c      	ldr	r3, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0xe8>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d063      	beq.n	8001262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d11c      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1c4      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b56      	ldr	r3, [pc, #344]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4952      	ldr	r1, [pc, #328]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	e03a      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <HAL_RCC_OscConfig+0x2b0>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc1f 	bl	8000a3c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fc1b 	bl	8000a3c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1a5      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4940      	ldr	r1, [pc, #256]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x2b0>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fbfe 	bl	8000a3c <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fbfa 	bl	8000a3c <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e184      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d030      	beq.n	80012d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d016      	beq.n	80012a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_RCC_OscConfig+0x2b4>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff fbde 	bl	8000a3c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fbda 	bl	8000a3c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e164      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x200>
 80012a2:	e015      	b.n	80012d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_OscConfig+0x2b4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fbc7 	bl	8000a3c <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fbc3 	bl	8000a3c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e14d      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a0 	beq.w	800141e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d121      	bne.n	800135e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_RCC_OscConfig+0x2b8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb89 	bl	8000a3c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e011      	b.n	8001352 <HAL_RCC_OscConfig+0x2ce>
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
 800133c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff fb7c 	bl	8000a3c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e106      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b85      	ldr	r3, [pc, #532]	; (8001568 <HAL_RCC_OscConfig+0x4e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x2f0>
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e01c      	b.n	80013ae <HAL_RCC_OscConfig+0x32a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d10c      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 800137c:	4b7b      	ldr	r3, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a7a      	ldr	r2, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	e00b      	b.n	80013ae <HAL_RCC_OscConfig+0x32a>
 8001396:	4b75      	ldr	r3, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a74      	ldr	r2, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a71      	ldr	r2, [pc, #452]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d015      	beq.n	80013e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb41 	bl	8000a3c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb3d 	bl	8000a3c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0c5      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ee      	beq.n	80013be <HAL_RCC_OscConfig+0x33a>
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb2b 	bl	8000a3c <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb27 	bl	8000a3c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e0af      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	4b5a      	ldr	r3, [pc, #360]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a55      	ldr	r2, [pc, #340]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 809b 	beq.w	800155e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d05c      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d141      	bne.n	80014c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143c:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fafb 	bl	8000a3c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff faf7 	bl	8000a3c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e081      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fad0 	bl	8000a3c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff facc 	bl	8000a3c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e056      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x41c>
 80014be:	e04e      	b.n	800155e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x4ec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fab9 	bl	8000a3c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fab5 	bl	8000a3c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e03f      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x44a>
 80014ec:	e037      	b.n	800155e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e032      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d028      	beq.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d121      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d11a      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001530:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001532:	4293      	cmp	r3, r2
 8001534:	d111      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d107      	bne.n	800155a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40007000 	.word	0x40007000
 800156c:	40023800 	.word	0x40023800
 8001570:	42470060 	.word	0x42470060

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff f9ea 	bl	8000a3c <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff f9e6 	bl	8000a3c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f94a 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	08002088 	.word	0x08002088
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d00d      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x40>
 8001764:	2b08      	cmp	r3, #8
 8001766:	f200 80bd 	bhi.w	80018e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x34>
 800176e:	2b04      	cmp	r3, #4
 8001770:	d003      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x3a>
 8001772:	e0b7      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001776:	60bb      	str	r3, [r7, #8]
       break;
 8001778:	e0b7      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177a:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800177c:	60bb      	str	r3, [r7, #8]
      break;
 800177e:	e0b4      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001780:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001788:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04d      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	461a      	mov	r2, r3
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	ea02 0800 	and.w	r8, r2, r0
 80017ae:	ea03 0901 	and.w	r9, r3, r1
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	014b      	lsls	r3, r1, #5
 80017c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017c4:	0142      	lsls	r2, r0, #5
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	ebb0 0008 	subs.w	r0, r0, r8
 80017ce:	eb61 0109 	sbc.w	r1, r1, r9
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	018b      	lsls	r3, r1, #6
 80017dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017e0:	0182      	lsls	r2, r0, #6
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	eb63 0301 	sbc.w	r3, r3, r1
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	00d9      	lsls	r1, r3, #3
 80017f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017f6:	00d0      	lsls	r0, r2, #3
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	eb12 0208 	adds.w	r2, r2, r8
 8001800:	eb43 0309 	adc.w	r3, r3, r9
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	0259      	lsls	r1, r3, #9
 800180e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001812:	0250      	lsls	r0, r2, #9
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f7fe fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4613      	mov	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e04a      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	461a      	mov	r2, r3
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	ea02 0400 	and.w	r4, r2, r0
 800184a:	ea03 0501 	and.w	r5, r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	014b      	lsls	r3, r1, #5
 800185c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001860:	0142      	lsls	r2, r0, #5
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	1b00      	subs	r0, r0, r4
 8001868:	eb61 0105 	sbc.w	r1, r1, r5
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	018b      	lsls	r3, r1, #6
 8001876:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800187a:	0182      	lsls	r2, r0, #6
 800187c:	1a12      	subs	r2, r2, r0
 800187e:	eb63 0301 	sbc.w	r3, r3, r1
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	00d9      	lsls	r1, r3, #3
 800188c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001890:	00d0      	lsls	r0, r2, #3
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	1912      	adds	r2, r2, r4
 8001898:	eb45 0303 	adc.w	r3, r5, r3
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0299      	lsls	r1, r3, #10
 80018a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018aa:	0290      	lsls	r0, r2, #10
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f7fe fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	3301      	adds	r3, #1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e002      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018e6:	60bb      	str	r3, [r7, #8]
      break;
 80018e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ea:	68bb      	ldr	r3, [r7, #8]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	007a1200 	.word	0x007a1200

08001904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_RCC_GetHCLKFreq+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001920:	f7ff fff0 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a9b      	lsrs	r3, r3, #10
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	08002098 	.word	0x08002098

08001944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001948:	f7ff ffdc 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0b5b      	lsrs	r3, r3, #13
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	08002098 	.word	0x08002098

0800196c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e033      	b.n	80019e6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe ff3e 	bl	8000814 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f90b 	bl	8001bbc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c4:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b08a      	sub	sp, #40	; 0x28
 80019f2:	af02      	add	r7, sp, #8
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d17c      	bne.n	8001b04 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_USART_Transmit+0x28>
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e075      	b.n	8001b06 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_USART_Transmit+0x3a>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e06e      	b.n	8001b06 <HAL_USART_Transmit+0x118>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2212      	movs	r2, #18
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3e:	f7fe fffd 	bl	8000a3c <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a58:	d108      	bne.n	8001a6c <HAL_USART_Transmit+0x7e>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e003      	b.n	8001a74 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8001a74:	e02a      	b.n	8001acc <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f844 	bl	8001b0e <USART_WaitOnFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e03a      	b.n	8001b06 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10b      	bne.n	8001aae <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aa4:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e007      	b.n	8001abe <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1cf      	bne.n	8001a76 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f814 	bl	8001b0e <USART_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e00a      	b.n	8001b06 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001b1e:	e038      	b.n	8001b92 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d034      	beq.n	8001b92 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <USART_WaitOnFlagUntilTimeout+0x30>
 8001b2e:	f7fe ff85 	bl	8000a3c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d229      	bcs.n	8001b92 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4c:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0220 	bic.w	r2, r2, #32
 8001b5c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b6c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e00f      	b.n	8001bb2 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d0b7      	beq.n	8001b20 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	b0a5      	sub	sp, #148	; 0x94
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  uint32_t tmpreg = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f021 030c 	bic.w	r3, r1, #12
 8001be0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bfe:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c04:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001c06:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8001c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8001c16:	431a      	orrs	r2, r3
 8001c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c30:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c46:	f023 030c 	bic.w	r3, r3, #12
 8001c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8001c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8001c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8001c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6959      	ldr	r1, [r3, #20]
 8001c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8001c90:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8001c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4bc8      	ldr	r3, [pc, #800]	; (8001fbc <USART_SetConfig+0x400>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d006      	beq.n	8001cac <USART_SetConfig+0xf0>
 8001c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4bc6      	ldr	r3, [pc, #792]	; (8001fc0 <USART_SetConfig+0x404>)
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	f040 80c1 	bne.w	8001e2e <USART_SetConfig+0x272>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cac:	f7ff fe4a 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8001cb0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cb8:	461c      	mov	r4, r3
 8001cba:	f04f 0500 	mov.w	r5, #0
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	1891      	adds	r1, r2, r2
 8001cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cc6:	415b      	adcs	r3, r3
 8001cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cce:	1912      	adds	r2, r2, r4
 8001cd0:	eb45 0303 	adc.w	r3, r5, r3
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	00d9      	lsls	r1, r3, #3
 8001cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce2:	00d0      	lsls	r0, r2, #3
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	eb12 0a04 	adds.w	sl, r2, r4
 8001cec:	eb43 0b05 	adc.w	fp, r3, r5
 8001cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	1891      	adds	r1, r2, r2
 8001cfe:	6539      	str	r1, [r7, #80]	; 0x50
 8001d00:	415b      	adcs	r3, r3
 8001d02:	657b      	str	r3, [r7, #84]	; 0x54
 8001d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d08:	4650      	mov	r0, sl
 8001d0a:	4659      	mov	r1, fp
 8001d0c:	f7fe fa64 	bl	80001d8 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4bab      	ldr	r3, [pc, #684]	; (8001fc4 <USART_SetConfig+0x408>)
 8001d16:	fba3 2302 	umull	r2, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	011e      	lsls	r6, r3, #4
 8001d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d22:	461c      	mov	r4, r3
 8001d24:	f04f 0500 	mov.w	r5, #0
 8001d28:	4622      	mov	r2, r4
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	1891      	adds	r1, r2, r2
 8001d2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d30:	415b      	adcs	r3, r3
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d38:	1912      	adds	r2, r2, r4
 8001d3a:	eb45 0303 	adc.w	r3, r5, r3
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	00d9      	lsls	r1, r3, #3
 8001d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4c:	00d0      	lsls	r0, r2, #3
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	1911      	adds	r1, r2, r4
 8001d54:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d56:	416b      	adcs	r3, r5
 8001d58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	1891      	adds	r1, r2, r2
 8001d68:	6439      	str	r1, [r7, #64]	; 0x40
 8001d6a:	415b      	adcs	r3, r3
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d72:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d76:	f7fe fa2f 	bl	80001d8 <__aeabi_uldivmod>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <USART_SetConfig+0x408>)
 8001d80:	fba3 1302 	umull	r1, r3, r3, r2
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	2164      	movs	r1, #100	; 0x64
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	3332      	adds	r3, #50	; 0x32
 8001d92:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <USART_SetConfig+0x408>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001da0:	441e      	add	r6, r3
 8001da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001da6:	4618      	mov	r0, r3
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	1894      	adds	r4, r2, r2
 8001db2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001db4:	415b      	adcs	r3, r3
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dbc:	1812      	adds	r2, r2, r0
 8001dbe:	eb41 0303 	adc.w	r3, r1, r3
 8001dc2:	f04f 0400 	mov.w	r4, #0
 8001dc6:	f04f 0500 	mov.w	r5, #0
 8001dca:	00dd      	lsls	r5, r3, #3
 8001dcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001dd0:	00d4      	lsls	r4, r2, #3
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	1814      	adds	r4, r2, r0
 8001dd8:	673c      	str	r4, [r7, #112]	; 0x70
 8001dda:	414b      	adcs	r3, r1
 8001ddc:	677b      	str	r3, [r7, #116]	; 0x74
 8001dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	1891      	adds	r1, r2, r2
 8001dec:	6339      	str	r1, [r7, #48]	; 0x30
 8001dee:	415b      	adcs	r3, r3
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
 8001df2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001df6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dfa:	f7fe f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <USART_SetConfig+0x408>)
 8001e04:	fba3 1302 	umull	r1, r3, r3, r2
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	2164      	movs	r1, #100	; 0x64
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	3332      	adds	r3, #50	; 0x32
 8001e16:	4a6b      	ldr	r2, [pc, #428]	; (8001fc4 <USART_SetConfig+0x408>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	f003 0207 	and.w	r2, r3, #7
 8001e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4432      	add	r2, r6
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e0c0      	b.n	8001fb0 <USART_SetConfig+0x3f4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e2e:	f7ff fd75 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8001e32:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8001e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	f04f 0500 	mov.w	r5, #0
 8001e40:	4622      	mov	r2, r4
 8001e42:	462b      	mov	r3, r5
 8001e44:	1891      	adds	r1, r2, r2
 8001e46:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e48:	415b      	adcs	r3, r3
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e50:	1912      	adds	r2, r2, r4
 8001e52:	eb45 0303 	adc.w	r3, r5, r3
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	00d9      	lsls	r1, r3, #3
 8001e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e64:	00d0      	lsls	r0, r2, #3
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	eb12 0804 	adds.w	r8, r2, r4
 8001e6e:	eb43 0905 	adc.w	r9, r3, r5
 8001e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	1891      	adds	r1, r2, r2
 8001e80:	6239      	str	r1, [r7, #32]
 8001e82:	415b      	adcs	r3, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e8a:	4640      	mov	r0, r8
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	f7fe f9a3 	bl	80001d8 <__aeabi_uldivmod>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <USART_SetConfig+0x408>)
 8001e98:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	011e      	lsls	r6, r3, #4
 8001ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	f04f 0500 	mov.w	r5, #0
 8001eaa:	4622      	mov	r2, r4
 8001eac:	462b      	mov	r3, r5
 8001eae:	1891      	adds	r1, r2, r2
 8001eb0:	61b9      	str	r1, [r7, #24]
 8001eb2:	415b      	adcs	r3, r3
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	1912      	adds	r2, r2, r4
 8001ebc:	eb45 0303 	adc.w	r3, r5, r3
 8001ec0:	f04f 0000 	mov.w	r0, #0
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	00d9      	lsls	r1, r3, #3
 8001eca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ece:	00d0      	lsls	r0, r2, #3
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	1911      	adds	r1, r2, r4
 8001ed6:	66b9      	str	r1, [r7, #104]	; 0x68
 8001ed8:	416b      	adcs	r3, r5
 8001eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	1891      	adds	r1, r2, r2
 8001eea:	6139      	str	r1, [r7, #16]
 8001eec:	415b      	adcs	r3, r3
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ef8:	f7fe f96e 	bl	80001d8 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <USART_SetConfig+0x408>)
 8001f02:	fba3 1302 	umull	r1, r3, r3, r2
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2164      	movs	r1, #100	; 0x64
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	3332      	adds	r3, #50	; 0x32
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <USART_SetConfig+0x408>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f22:	441e      	add	r6, r3
 8001f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	1894      	adds	r4, r2, r2
 8001f34:	60bc      	str	r4, [r7, #8]
 8001f36:	415b      	adcs	r3, r3
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3e:	1812      	adds	r2, r2, r0
 8001f40:	eb41 0303 	adc.w	r3, r1, r3
 8001f44:	f04f 0400 	mov.w	r4, #0
 8001f48:	f04f 0500 	mov.w	r5, #0
 8001f4c:	00dd      	lsls	r5, r3, #3
 8001f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f52:	00d4      	lsls	r4, r2, #3
 8001f54:	4622      	mov	r2, r4
 8001f56:	462b      	mov	r3, r5
 8001f58:	1814      	adds	r4, r2, r0
 8001f5a:	663c      	str	r4, [r7, #96]	; 0x60
 8001f5c:	414b      	adcs	r3, r1
 8001f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	1891      	adds	r1, r2, r2
 8001f6e:	6039      	str	r1, [r7, #0]
 8001f70:	415b      	adcs	r3, r3
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f7c:	f7fe f92c 	bl	80001d8 <__aeabi_uldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <USART_SetConfig+0x408>)
 8001f86:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2164      	movs	r1, #100	; 0x64
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	3332      	adds	r3, #50	; 0x32
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <USART_SetConfig+0x408>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	f003 0207 	and.w	r2, r3, #7
 8001fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4432      	add	r2, r6
 8001fac:	609a      	str	r2, [r3, #8]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3794      	adds	r7, #148	; 0x94
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fba:	bf00      	nop
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	51eb851f 	.word	0x51eb851f

08001fc8 <__libc_init_array>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4d0d      	ldr	r5, [pc, #52]	; (8002000 <__libc_init_array+0x38>)
 8001fcc:	4c0d      	ldr	r4, [pc, #52]	; (8002004 <__libc_init_array+0x3c>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	42a6      	cmp	r6, r4
 8001fd6:	d109      	bne.n	8001fec <__libc_init_array+0x24>
 8001fd8:	4d0b      	ldr	r5, [pc, #44]	; (8002008 <__libc_init_array+0x40>)
 8001fda:	4c0c      	ldr	r4, [pc, #48]	; (800200c <__libc_init_array+0x44>)
 8001fdc:	f000 f820 	bl	8002020 <_init>
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	42a6      	cmp	r6, r4
 8001fe8:	d105      	bne.n	8001ff6 <__libc_init_array+0x2e>
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff0:	4798      	blx	r3
 8001ff2:	3601      	adds	r6, #1
 8001ff4:	e7ee      	b.n	8001fd4 <__libc_init_array+0xc>
 8001ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffa:	4798      	blx	r3
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e7f2      	b.n	8001fe6 <__libc_init_array+0x1e>
 8002000:	080020a8 	.word	0x080020a8
 8002004:	080020a8 	.word	0x080020a8
 8002008:	080020a8 	.word	0x080020a8
 800200c:	080020ac 	.word	0x080020ac

08002010 <memset>:
 8002010:	4402      	add	r2, r0
 8002012:	4603      	mov	r3, r0
 8002014:	4293      	cmp	r3, r2
 8002016:	d100      	bne.n	800201a <memset+0xa>
 8002018:	4770      	bx	lr
 800201a:	f803 1b01 	strb.w	r1, [r3], #1
 800201e:	e7f9      	b.n	8002014 <memset+0x4>

08002020 <_init>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr

0800202c <_fini>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr
