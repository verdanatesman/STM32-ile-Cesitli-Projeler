
016_3_SPI_SDKART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004148  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057d8  20000024  080047a0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057fc  080047a0  000257fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012da3  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264f  00000000  00000000  00032df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a7e3  00000000  00000000  00035446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0003fc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  00040569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216f0  00000000  00000000  00040e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001101b  00000000  00000000  00062511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c265b  00000000  00000000  0007352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00135b87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bd0  00000000  00000000  00135bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042b8 	.word	0x080042b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080042b8 	.word	0x080042b8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b96e 	b.w	8000ac8 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468c      	mov	ip, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8083 	bne.w	800091a <__udivmoddi4+0x116>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d947      	bls.n	80008aa <__udivmoddi4+0xa6>
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	b142      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 8000820:	f1c2 0020 	rsb	r0, r2, #32
 8000824:	fa24 f000 	lsr.w	r0, r4, r0
 8000828:	4091      	lsls	r1, r2
 800082a:	4097      	lsls	r7, r2
 800082c:	ea40 0c01 	orr.w	ip, r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fbbc f6f8 	udiv	r6, ip, r8
 800083c:	fa1f fe87 	uxth.w	lr, r7
 8000840:	fb08 c116 	mls	r1, r8, r6, ip
 8000844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000848:	fb06 f10e 	mul.w	r1, r6, lr
 800084c:	4299      	cmp	r1, r3
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x60>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 30ff 	add.w	r0, r6, #4294967295
 8000856:	f080 8119 	bcs.w	8000a8c <__udivmoddi4+0x288>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 8116 	bls.w	8000a8c <__udivmoddi4+0x288>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f0f8 	udiv	r0, r3, r8
 800086c:	fb08 3310 	mls	r3, r8, r0, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb00 fe0e 	mul.w	lr, r0, lr
 8000878:	45a6      	cmp	lr, r4
 800087a:	d909      	bls.n	8000890 <__udivmoddi4+0x8c>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000882:	f080 8105 	bcs.w	8000a90 <__udivmoddi4+0x28c>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f240 8102 	bls.w	8000a90 <__udivmoddi4+0x28c>
 800088c:	3802      	subs	r0, #2
 800088e:	443c      	add	r4, r7
 8000890:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000894:	eba4 040e 	sub.w	r4, r4, lr
 8000898:	2600      	movs	r6, #0
 800089a:	b11d      	cbz	r5, 80008a4 <__udivmoddi4+0xa0>
 800089c:	40d4      	lsrs	r4, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	e9c5 4300 	strd	r4, r3, [r5]
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xaa>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d150      	bne.n	8000958 <__udivmoddi4+0x154>
 80008b6:	1bcb      	subs	r3, r1, r7
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa1f f887 	uxth.w	r8, r7
 80008c0:	2601      	movs	r6, #1
 80008c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008c6:	0c21      	lsrs	r1, r4, #16
 80008c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d0:	fb08 f30c 	mul.w	r3, r8, ip
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d907      	bls.n	80008e8 <__udivmoddi4+0xe4>
 80008d8:	1879      	adds	r1, r7, r1
 80008da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0xe2>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	f200 80e9 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 80008e6:	4684      	mov	ip, r0
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	b2a3      	uxth	r3, r4
 80008ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008f8:	fb08 f800 	mul.w	r8, r8, r0
 80008fc:	45a0      	cmp	r8, r4
 80008fe:	d907      	bls.n	8000910 <__udivmoddi4+0x10c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x10a>
 8000908:	45a0      	cmp	r8, r4
 800090a:	f200 80d9 	bhi.w	8000ac0 <__udivmoddi4+0x2bc>
 800090e:	4618      	mov	r0, r3
 8000910:	eba4 0408 	sub.w	r4, r4, r8
 8000914:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000918:	e7bf      	b.n	800089a <__udivmoddi4+0x96>
 800091a:	428b      	cmp	r3, r1
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x12e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f000 80b1 	beq.w	8000a86 <__udivmoddi4+0x282>
 8000924:	2600      	movs	r6, #0
 8000926:	e9c5 0100 	strd	r0, r1, [r5]
 800092a:	4630      	mov	r0, r6
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	fab3 f683 	clz	r6, r3
 8000936:	2e00      	cmp	r6, #0
 8000938:	d14a      	bne.n	80009d0 <__udivmoddi4+0x1cc>
 800093a:	428b      	cmp	r3, r1
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0x140>
 800093e:	4282      	cmp	r2, r0
 8000940:	f200 80b8 	bhi.w	8000ab4 <__udivmoddi4+0x2b0>
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0103 	sbc.w	r1, r1, r3
 800094a:	2001      	movs	r0, #1
 800094c:	468c      	mov	ip, r1
 800094e:	2d00      	cmp	r5, #0
 8000950:	d0a8      	beq.n	80008a4 <__udivmoddi4+0xa0>
 8000952:	e9c5 4c00 	strd	r4, ip, [r5]
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f603 	lsr.w	r6, r0, r3
 8000960:	4097      	lsls	r7, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096a:	40d9      	lsrs	r1, r3
 800096c:	4330      	orrs	r0, r6
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	fbb1 f6fe 	udiv	r6, r1, lr
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	fb0e 1116 	mls	r1, lr, r6, r1
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f108 	mul.w	r1, r6, r8
 8000984:	4299      	cmp	r1, r3
 8000986:	fa04 f402 	lsl.w	r4, r4, r2
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x19c>
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000992:	f080 808d 	bcs.w	8000ab0 <__udivmoddi4+0x2ac>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 808a 	bls.w	8000ab0 <__udivmoddi4+0x2ac>
 800099c:	3e02      	subs	r6, #2
 800099e:	443b      	add	r3, r7
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b281      	uxth	r1, r0
 80009a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b0:	fb00 f308 	mul.w	r3, r0, r8
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x1c4>
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80009be:	d273      	bcs.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d971      	bls.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4439      	add	r1, r7
 80009c8:	1acb      	subs	r3, r1, r3
 80009ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009ce:	e778      	b.n	80008c2 <__udivmoddi4+0xbe>
 80009d0:	f1c6 0c20 	rsb	ip, r6, #32
 80009d4:	fa03 f406 	lsl.w	r4, r3, r6
 80009d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009dc:	431c      	orrs	r4, r3
 80009de:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e2:	fa01 f306 	lsl.w	r3, r1, r6
 80009e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c3b      	lsrs	r3, r7, #16
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fa1f f884 	uxth.w	r8, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a02:	fb09 fa08 	mul.w	sl, r9, r8
 8000a06:	458a      	cmp	sl, r1
 8000a08:	fa02 f206 	lsl.w	r2, r2, r6
 8000a0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x220>
 8000a12:	1861      	adds	r1, r4, r1
 8000a14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a18:	d248      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a1a:	458a      	cmp	sl, r1
 8000a1c:	d946      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a22:	4421      	add	r1, r4
 8000a24:	eba1 010a 	sub.w	r1, r1, sl
 8000a28:	b2bf      	uxth	r7, r7
 8000a2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a36:	fb00 f808 	mul.w	r8, r0, r8
 8000a3a:	45b8      	cmp	r8, r7
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x24a>
 8000a3e:	19e7      	adds	r7, r4, r7
 8000a40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a44:	d22e      	bcs.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a46:	45b8      	cmp	r8, r7
 8000a48:	d92c      	bls.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	4427      	add	r7, r4
 8000a4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a52:	eba7 0708 	sub.w	r7, r7, r8
 8000a56:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5a:	454f      	cmp	r7, r9
 8000a5c:	46c6      	mov	lr, r8
 8000a5e:	4649      	mov	r1, r9
 8000a60:	d31a      	bcc.n	8000a98 <__udivmoddi4+0x294>
 8000a62:	d017      	beq.n	8000a94 <__udivmoddi4+0x290>
 8000a64:	b15d      	cbz	r5, 8000a7e <__udivmoddi4+0x27a>
 8000a66:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a72:	40f2      	lsrs	r2, r6
 8000a74:	ea4c 0202 	orr.w	r2, ip, r2
 8000a78:	40f7      	lsrs	r7, r6
 8000a7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a7e:	2600      	movs	r6, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	462e      	mov	r6, r5
 8000a88:	4628      	mov	r0, r5
 8000a8a:	e70b      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	e6e9      	b.n	8000864 <__udivmoddi4+0x60>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6fd      	b.n	8000890 <__udivmoddi4+0x8c>
 8000a94:	4543      	cmp	r3, r8
 8000a96:	d2e5      	bcs.n	8000a64 <__udivmoddi4+0x260>
 8000a98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <__udivmoddi4+0x260>
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	e7d2      	b.n	8000a4e <__udivmoddi4+0x24a>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	e78d      	b.n	80009c8 <__udivmoddi4+0x1c4>
 8000aac:	4681      	mov	r9, r0
 8000aae:	e7b9      	b.n	8000a24 <__udivmoddi4+0x220>
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	e775      	b.n	80009a0 <__udivmoddi4+0x19c>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e74a      	b.n	800094e <__udivmoddi4+0x14a>
 8000ab8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000abc:	4439      	add	r1, r7
 8000abe:	e713      	b.n	80008e8 <__udivmoddi4+0xe4>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	e724      	b.n	8000910 <__udivmoddi4+0x10c>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <SD_PowerOff>:
}

/* 전원 끄기 */
static void SD_PowerOff(void)
{
  PowerFlag = 0;
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <SD_PowerOff+0x8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000041 	.word	0x20000041

08000ad8 <SD_CheckPower>:
/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
  /*  0=off, 1=on */
  return PowerFlag;
}
 8000ad8:	4b01      	ldr	r3, [pc, #4]	; (8000ae0 <SD_CheckPower+0x8>)
 8000ada:	7818      	ldrb	r0, [r3, #0]
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000041 	.word	0x20000041

08000ae4 <SPI_TxByte>:
{
 8000ae4:	b500      	push	{lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <SPI_TxByte+0x28>)
 8000aee:	f001 fcd7 	bl	80024a0 <HAL_SPI_GetState>
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d1fa      	bne.n	8000aec <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	2201      	movs	r2, #1
 8000afc:	f10d 0107 	add.w	r1, sp, #7
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <SPI_TxByte+0x28>)
 8000b02:	f001 fada 	bl	80020ba <HAL_SPI_Transmit>
}
 8000b06:	b003      	add	sp, #12
 8000b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b0c:	20003728 	.word	0x20003728

08000b10 <SELECT>:
{
 8000b10:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <SELECT+0x10>)
 8000b18:	f000 febc 	bl	8001894 <HAL_GPIO_WritePin>
}
 8000b1c:	bd08      	pop	{r3, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020800 	.word	0x40020800

08000b24 <DESELECT>:
{
 8000b24:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DESELECT+0x10>)
 8000b2c:	f000 feb2 	bl	8001894 <HAL_GPIO_WritePin>
}
 8000b30:	bd08      	pop	{r3, pc}
 8000b32:	bf00      	nop
 8000b34:	40020800 	.word	0x40020800

08000b38 <SPI_RxByte>:
{
 8000b38:	b500      	push	{lr}
 8000b3a:	b085      	sub	sp, #20
  dummy = 0xFF;
 8000b3c:	23ff      	movs	r3, #255	; 0xff
 8000b3e:	f88d 300f 	strb.w	r3, [sp, #15]
  data = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f88d 300e 	strb.w	r3, [sp, #14]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <SPI_RxByte+0x3c>)
 8000b4a:	f001 fca9 	bl	80024a0 <HAL_SPI_GetState>
 8000b4e:	2801      	cmp	r0, #1
 8000b50:	d1fa      	bne.n	8000b48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f10d 020e 	add.w	r2, sp, #14
 8000b5e:	f10d 010f 	add.w	r1, sp, #15
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <SPI_RxByte+0x3c>)
 8000b64:	f001 fb80 	bl	8002268 <HAL_SPI_TransmitReceive>
}
 8000b68:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000b6c:	b005      	add	sp, #20
 8000b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b72:	bf00      	nop
 8000b74:	20003728 	.word	0x20003728

08000b78 <SD_PowerOn>:
{
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	b082      	sub	sp, #8
  DESELECT();
 8000b7c:	f7ff ffd2 	bl	8000b24 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000b80:	2400      	movs	r4, #0
 8000b82:	2c09      	cmp	r4, #9
 8000b84:	dc04      	bgt.n	8000b90 <SD_PowerOn+0x18>
    SPI_TxByte(0xFF);
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	f7ff ffac 	bl	8000ae4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000b8c:	3401      	adds	r4, #1
 8000b8e:	e7f8      	b.n	8000b82 <SD_PowerOn+0xa>
  SELECT();
 8000b90:	f7ff ffbe 	bl	8000b10 <SELECT>
  cmd_arg[0] = (CMD0 | 0x40);
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	f88d 3000 	strb.w	r3, [sp]
  cmd_arg[1] = 0;
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	f88d 4001 	strb.w	r4, [sp, #1]
  cmd_arg[2] = 0;
 8000ba0:	f88d 4002 	strb.w	r4, [sp, #2]
  cmd_arg[3] = 0;
 8000ba4:	f88d 4003 	strb.w	r4, [sp, #3]
  cmd_arg[4] = 0;
 8000ba8:	f88d 4004 	strb.w	r4, [sp, #4]
  cmd_arg[5] = 0x95;
 8000bac:	2395      	movs	r3, #149	; 0x95
 8000bae:	f88d 3005 	strb.w	r3, [sp, #5]
  for (int i = 0; i < 6; i++)
 8000bb2:	2c05      	cmp	r4, #5
 8000bb4:	dc07      	bgt.n	8000bc6 <SD_PowerOn+0x4e>
    SPI_TxByte(cmd_arg[i]);
 8000bb6:	ab02      	add	r3, sp, #8
 8000bb8:	4423      	add	r3, r4
 8000bba:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8000bbe:	f7ff ff91 	bl	8000ae4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000bc2:	3401      	adds	r4, #1
 8000bc4:	e7f5      	b.n	8000bb2 <SD_PowerOn+0x3a>
  uint32_t Count = 0x1FFF;
 8000bc6:	f641 74ff 	movw	r4, #8191	; 0x1fff
  while ((SPI_RxByte() != 0x01) && Count)
 8000bca:	f7ff ffb5 	bl	8000b38 <SPI_RxByte>
 8000bce:	2801      	cmp	r0, #1
 8000bd0:	d002      	beq.n	8000bd8 <SD_PowerOn+0x60>
 8000bd2:	b10c      	cbz	r4, 8000bd8 <SD_PowerOn+0x60>
    Count--;
 8000bd4:	3c01      	subs	r4, #1
 8000bd6:	e7f8      	b.n	8000bca <SD_PowerOn+0x52>
  DESELECT();
 8000bd8:	f7ff ffa4 	bl	8000b24 <DESELECT>
  SPI_TxByte(0XFF);
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	f7ff ff81 	bl	8000ae4 <SPI_TxByte>
  PowerFlag = 1;
 8000be2:	4b02      	ldr	r3, [pc, #8]	; (8000bec <SD_PowerOn+0x74>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
}
 8000be8:	b002      	add	sp, #8
 8000bea:	bd10      	pop	{r4, pc}
 8000bec:	20000041 	.word	0x20000041

08000bf0 <SD_ReadyWait>:
{
 8000bf0:	b508      	push	{r3, lr}
  Timer2 = 50;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <SD_ReadyWait+0x20>)
 8000bf4:	2232      	movs	r2, #50	; 0x32
 8000bf6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000bf8:	f7ff ff9e 	bl	8000b38 <SPI_RxByte>
    res = SPI_RxByte();
 8000bfc:	f7ff ff9c 	bl	8000b38 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8000c00:	28ff      	cmp	r0, #255	; 0xff
 8000c02:	d003      	beq.n	8000c0c <SD_ReadyWait+0x1c>
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <SD_ReadyWait+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f7      	bne.n	8000bfc <SD_ReadyWait+0xc>
}
 8000c0c:	bd08      	pop	{r3, pc}
 8000c0e:	bf00      	nop
 8000c10:	20003784 	.word	0x20003784

08000c14 <SD_SendCmd>:
}
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4604      	mov	r4, r0
 8000c18:	460d      	mov	r5, r1
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000c1a:	f7ff ffe9 	bl	8000bf0 <SD_ReadyWait>
 8000c1e:	28ff      	cmp	r0, #255	; 0xff
 8000c20:	d001      	beq.n	8000c26 <SD_SendCmd+0x12>
    return 0xFF;
 8000c22:	20ff      	movs	r0, #255	; 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 8000c24:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(cmd); 			/* Command */
 8000c26:	4620      	mov	r0, r4
 8000c28:	f7ff ff5c 	bl	8000ae4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000c2c:	0e28      	lsrs	r0, r5, #24
 8000c2e:	f7ff ff59 	bl	8000ae4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000c32:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000c36:	f7ff ff55 	bl	8000ae4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c3a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000c3e:	f7ff ff51 	bl	8000ae4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000c42:	b2e8      	uxtb	r0, r5
 8000c44:	f7ff ff4e 	bl	8000ae4 <SPI_TxByte>
  if (cmd == CMD0)
 8000c48:	2c40      	cmp	r4, #64	; 0x40
 8000c4a:	d011      	beq.n	8000c70 <SD_SendCmd+0x5c>
  crc = 0;
 8000c4c:	2000      	movs	r0, #0
  if (cmd == CMD8)
 8000c4e:	2c48      	cmp	r4, #72	; 0x48
 8000c50:	d010      	beq.n	8000c74 <SD_SendCmd+0x60>
  SPI_TxByte(crc);
 8000c52:	f7ff ff47 	bl	8000ae4 <SPI_TxByte>
  if (cmd == CMD12)
 8000c56:	2c4c      	cmp	r4, #76	; 0x4c
 8000c58:	d00e      	beq.n	8000c78 <SD_SendCmd+0x64>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c5a:	240a      	movs	r4, #10
    res = SPI_RxByte();
 8000c5c:	f7ff ff6c 	bl	8000b38 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 8000c60:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000c64:	d0de      	beq.n	8000c24 <SD_SendCmd+0x10>
 8000c66:	1e63      	subs	r3, r4, #1
 8000c68:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000c6c:	d1f6      	bne.n	8000c5c <SD_SendCmd+0x48>
 8000c6e:	e7d9      	b.n	8000c24 <SD_SendCmd+0x10>
    crc = 0x95; /* CRC for CMD0(0) */
 8000c70:	2095      	movs	r0, #149	; 0x95
 8000c72:	e7ec      	b.n	8000c4e <SD_SendCmd+0x3a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c74:	2087      	movs	r0, #135	; 0x87
 8000c76:	e7ec      	b.n	8000c52 <SD_SendCmd+0x3e>
    SPI_RxByte();
 8000c78:	f7ff ff5e 	bl	8000b38 <SPI_RxByte>
 8000c7c:	e7ed      	b.n	8000c5a <SD_SendCmd+0x46>

08000c7e <SPI_RxBytePtr>:
{
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	4604      	mov	r4, r0
  *buff = SPI_RxByte();
 8000c82:	f7ff ff59 	bl	8000b38 <SPI_RxByte>
 8000c86:	7020      	strb	r0, [r4, #0]
}
 8000c88:	bd10      	pop	{r4, pc}
	...

08000c8c <SD_RxDataBlock>:
{
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460e      	mov	r6, r1
  Timer1 = 10;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <SD_RxDataBlock+0x44>)
 8000c94:	220a      	movs	r2, #10
 8000c96:	701a      	strb	r2, [r3, #0]
    token = SPI_RxByte();
 8000c98:	f7ff ff4e 	bl	8000b38 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 8000c9c:	28ff      	cmp	r0, #255	; 0xff
 8000c9e:	d103      	bne.n	8000ca8 <SD_RxDataBlock+0x1c>
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <SD_RxDataBlock+0x44>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f7      	bne.n	8000c98 <SD_RxDataBlock+0xc>
  if(token != 0xFE)
 8000ca8:	28fe      	cmp	r0, #254	; 0xfe
 8000caa:	d10f      	bne.n	8000ccc <SD_RxDataBlock+0x40>
    SPI_RxBytePtr(buff++);
 8000cac:	1c65      	adds	r5, r4, #1
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ffe5 	bl	8000c7e <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	3402      	adds	r4, #2
 8000cb8:	f7ff ffe1 	bl	8000c7e <SPI_RxBytePtr>
  } while(btr -= 2);
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	d1f5      	bne.n	8000cac <SD_RxDataBlock+0x20>
  SPI_RxByte(); /* CRC 무시 */
 8000cc0:	f7ff ff3a 	bl	8000b38 <SPI_RxByte>
  SPI_RxByte();
 8000cc4:	f7ff ff38 	bl	8000b38 <SPI_RxByte>
  return TRUE;
 8000cc8:	2001      	movs	r0, #1
}
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e7fc      	b.n	8000cca <SD_RxDataBlock+0x3e>
 8000cd0:	20003785 	.word	0x20003785

08000cd4 <SD_TxDataBlock>:
{
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	460c      	mov	r4, r1
  if (SD_ReadyWait() != 0xFF)
 8000cda:	f7ff ff89 	bl	8000bf0 <SD_ReadyWait>
 8000cde:	28ff      	cmp	r0, #255	; 0xff
 8000ce0:	d001      	beq.n	8000ce6 <SD_TxDataBlock+0x12>
    return FALSE;
 8000ce2:	2000      	movs	r0, #0
}
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	2600      	movs	r6, #0
  SPI_TxByte(token);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f7ff fefb 	bl	8000ae4 <SPI_TxByte>
  if (token != 0xFD)
 8000cee:	2cfd      	cmp	r4, #253	; 0xfd
 8000cf0:	d01f      	beq.n	8000d32 <SD_TxDataBlock+0x5e>
    wc = 0;
 8000cf2:	4634      	mov	r4, r6
      SPI_TxByte(*buff++);
 8000cf4:	7828      	ldrb	r0, [r5, #0]
 8000cf6:	f7ff fef5 	bl	8000ae4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000cfa:	7868      	ldrb	r0, [r5, #1]
 8000cfc:	3502      	adds	r5, #2
 8000cfe:	f7ff fef1 	bl	8000ae4 <SPI_TxByte>
    } while (--wc);
 8000d02:	1e63      	subs	r3, r4, #1
 8000d04:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000d08:	d1f4      	bne.n	8000cf4 <SD_TxDataBlock+0x20>
    SPI_RxByte();       /* CRC 무시 */
 8000d0a:	f7ff ff15 	bl	8000b38 <SPI_RxByte>
    SPI_RxByte();
 8000d0e:	f7ff ff13 	bl	8000b38 <SPI_RxByte>
    while (i <= 64)
 8000d12:	2c40      	cmp	r4, #64	; 0x40
 8000d14:	d809      	bhi.n	8000d2a <SD_TxDataBlock+0x56>
      resp = SPI_RxByte();
 8000d16:	f7ff ff0f 	bl	8000b38 <SPI_RxByte>
 8000d1a:	4606      	mov	r6, r0
      if ((resp & 0x1F) == 0x05)
 8000d1c:	f000 031f 	and.w	r3, r0, #31
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d002      	beq.n	8000d2a <SD_TxDataBlock+0x56>
      i++;
 8000d24:	1c63      	adds	r3, r4, #1
 8000d26:	b2dc      	uxtb	r4, r3
 8000d28:	e7f3      	b.n	8000d12 <SD_TxDataBlock+0x3e>
    while (SPI_RxByte() == 0);
 8000d2a:	f7ff ff05 	bl	8000b38 <SPI_RxByte>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d0fb      	beq.n	8000d2a <SD_TxDataBlock+0x56>
  if ((resp & 0x1F) == 0x05)
 8000d32:	f006 061f 	and.w	r6, r6, #31
 8000d36:	2e05      	cmp	r6, #5
 8000d38:	d001      	beq.n	8000d3e <SD_TxDataBlock+0x6a>
    return FALSE;
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	e7d2      	b.n	8000ce4 <SD_TxDataBlock+0x10>
    return TRUE;
 8000d3e:	2001      	movs	r0, #1
 8000d40:	e7d0      	b.n	8000ce4 <SD_TxDataBlock+0x10>
	...

08000d44 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f040 80b4 	bne.w	8000eb2 <SD_disk_initialize+0x16e>
{
 8000d4a:	b530      	push	{r4, r5, lr}
 8000d4c:	b083      	sub	sp, #12
    return STA_NOINIT;

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000d4e:	4b5a      	ldr	r3, [pc, #360]	; (8000eb8 <SD_disk_initialize+0x174>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	f013 0402 	ands.w	r4, r3, #2
 8000d56:	d004      	beq.n	8000d62 <SD_disk_initialize+0x1e>
    return Stat;
 8000d58:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <SD_disk_initialize+0x174>)
 8000d5a:	7818      	ldrb	r0, [r3, #0]
 8000d5c:	b2c0      	uxtb	r0, r0
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	bd30      	pop	{r4, r5, pc}
  SD_PowerOn();
 8000d62:	f7ff ff09 	bl	8000b78 <SD_PowerOn>
  SELECT();
 8000d66:	f7ff fed3 	bl	8000b10 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2040      	movs	r0, #64	; 0x40
 8000d6e:	f7ff ff51 	bl	8000c14 <SD_SendCmd>
 8000d72:	4605      	mov	r5, r0
 8000d74:	2801      	cmp	r0, #1
 8000d76:	d011      	beq.n	8000d9c <SD_disk_initialize+0x58>
  CardType = type;
 8000d78:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <SD_disk_initialize+0x178>)
 8000d7a:	701c      	strb	r4, [r3, #0]
  DESELECT();
 8000d7c:	f7ff fed2 	bl	8000b24 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000d80:	f7ff feda 	bl	8000b38 <SPI_RxByte>
  if (type)
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	f000 8091 	beq.w	8000eac <SD_disk_initialize+0x168>
    Stat &= ~STA_NOINIT;
 8000d8a:	4a4b      	ldr	r2, [pc, #300]	; (8000eb8 <SD_disk_initialize+0x174>)
 8000d8c:	7813      	ldrb	r3, [r2, #0]
 8000d8e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000d92:	7013      	strb	r3, [r2, #0]
  return Stat;
 8000d94:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <SD_disk_initialize+0x174>)
 8000d96:	7818      	ldrb	r0, [r3, #0]
 8000d98:	b2c0      	uxtb	r0, r0
 8000d9a:	e7e0      	b.n	8000d5e <SD_disk_initialize+0x1a>
    Timer1 = 100;
 8000d9c:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <SD_disk_initialize+0x17c>)
 8000d9e:	2264      	movs	r2, #100	; 0x64
 8000da0:	701a      	strb	r2, [r3, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000da2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000da6:	2048      	movs	r0, #72	; 0x48
 8000da8:	f7ff ff34 	bl	8000c14 <SD_SendCmd>
 8000dac:	2801      	cmp	r0, #1
 8000dae:	d144      	bne.n	8000e3a <SD_disk_initialize+0xf6>
      for (n = 0; n < 4; n++)
 8000db0:	4625      	mov	r5, r4
 8000db2:	e007      	b.n	8000dc4 <SD_disk_initialize+0x80>
        ocr[n] = SPI_RxByte();
 8000db4:	f7ff fec0 	bl	8000b38 <SPI_RxByte>
 8000db8:	ab02      	add	r3, sp, #8
 8000dba:	442b      	add	r3, r5
 8000dbc:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	b2ed      	uxtb	r5, r5
 8000dc4:	2d03      	cmp	r5, #3
 8000dc6:	d9f5      	bls.n	8000db4 <SD_disk_initialize+0x70>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000dc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d1d3      	bne.n	8000d78 <SD_disk_initialize+0x34>
 8000dd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000dd4:	2baa      	cmp	r3, #170	; 0xaa
 8000dd6:	d1cf      	bne.n	8000d78 <SD_disk_initialize+0x34>
 8000dd8:	e002      	b.n	8000de0 <SD_disk_initialize+0x9c>
        } while (Timer1);
 8000dda:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <SD_disk_initialize+0x17c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b163      	cbz	r3, 8000dfa <SD_disk_initialize+0xb6>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000de0:	2100      	movs	r1, #0
 8000de2:	2077      	movs	r0, #119	; 0x77
 8000de4:	f7ff ff16 	bl	8000c14 <SD_SendCmd>
 8000de8:	2801      	cmp	r0, #1
 8000dea:	d8f6      	bhi.n	8000dda <SD_disk_initialize+0x96>
 8000dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000df0:	2069      	movs	r0, #105	; 0x69
 8000df2:	f7ff ff0f 	bl	8000c14 <SD_SendCmd>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d1ef      	bne.n	8000dda <SD_disk_initialize+0x96>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <SD_disk_initialize+0x17c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e02:	b90b      	cbnz	r3, 8000e08 <SD_disk_initialize+0xc4>
  type = 0;
 8000e04:	4614      	mov	r4, r2
 8000e06:	e7b7      	b.n	8000d78 <SD_disk_initialize+0x34>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	207a      	movs	r0, #122	; 0x7a
 8000e0c:	f7ff ff02 	bl	8000c14 <SD_SendCmd>
 8000e10:	4605      	mov	r5, r0
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d1b0      	bne.n	8000d78 <SD_disk_initialize+0x34>
          for (n = 0; n < 4; n++)
 8000e16:	2d03      	cmp	r5, #3
 8000e18:	d808      	bhi.n	8000e2c <SD_disk_initialize+0xe8>
            ocr[n] = SPI_RxByte();
 8000e1a:	f7ff fe8d 	bl	8000b38 <SPI_RxByte>
 8000e1e:	ab02      	add	r3, sp, #8
 8000e20:	442b      	add	r3, r5
 8000e22:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 8000e26:	3501      	adds	r5, #1
 8000e28:	b2ed      	uxtb	r5, r5
 8000e2a:	e7f4      	b.n	8000e16 <SD_disk_initialize+0xd2>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000e2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e34:	d038      	beq.n	8000ea8 <SD_disk_initialize+0x164>
 8000e36:	2406      	movs	r4, #6
 8000e38:	e79e      	b.n	8000d78 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2077      	movs	r0, #119	; 0x77
 8000e3e:	f7ff fee9 	bl	8000c14 <SD_SendCmd>
 8000e42:	2801      	cmp	r0, #1
 8000e44:	d810      	bhi.n	8000e68 <SD_disk_initialize+0x124>
 8000e46:	2100      	movs	r1, #0
 8000e48:	2069      	movs	r0, #105	; 0x69
 8000e4a:	f7ff fee3 	bl	8000c14 <SD_SendCmd>
 8000e4e:	2801      	cmp	r0, #1
 8000e50:	d80a      	bhi.n	8000e68 <SD_disk_initialize+0x124>
 8000e52:	2502      	movs	r5, #2
 8000e54:	e008      	b.n	8000e68 <SD_disk_initialize+0x124>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000e56:	2100      	movs	r1, #0
 8000e58:	2077      	movs	r0, #119	; 0x77
 8000e5a:	f7ff fedb 	bl	8000c14 <SD_SendCmd>
 8000e5e:	2801      	cmp	r0, #1
 8000e60:	d911      	bls.n	8000e86 <SD_disk_initialize+0x142>
      } while (Timer1);
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <SD_disk_initialize+0x17c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b13b      	cbz	r3, 8000e78 <SD_disk_initialize+0x134>
        if (type == 2)
 8000e68:	2d02      	cmp	r5, #2
 8000e6a:	d0f4      	beq.n	8000e56 <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD1, 0) == 0)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2041      	movs	r0, #65	; 0x41
 8000e70:	f7ff fed0 	bl	8000c14 <SD_SendCmd>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d1f4      	bne.n	8000e62 <SD_disk_initialize+0x11e>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <SD_disk_initialize+0x17c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e80:	b943      	cbnz	r3, 8000e94 <SD_disk_initialize+0x150>
        type = 0;
 8000e82:	4614      	mov	r4, r2
 8000e84:	e778      	b.n	8000d78 <SD_disk_initialize+0x34>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000e86:	2100      	movs	r1, #0
 8000e88:	2069      	movs	r0, #105	; 0x69
 8000e8a:	f7ff fec3 	bl	8000c14 <SD_SendCmd>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d1e7      	bne.n	8000e62 <SD_disk_initialize+0x11e>
 8000e92:	e7f1      	b.n	8000e78 <SD_disk_initialize+0x134>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	2050      	movs	r0, #80	; 0x50
 8000e9a:	f7ff febb 	bl	8000c14 <SD_SendCmd>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	f47f af6a 	bne.w	8000d78 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000ea4:	462c      	mov	r4, r5
 8000ea6:	e767      	b.n	8000d78 <SD_disk_initialize+0x34>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000ea8:	2402      	movs	r4, #2
 8000eaa:	e765      	b.n	8000d78 <SD_disk_initialize+0x34>
    SD_PowerOff();
 8000eac:	f7ff fe0e 	bl	8000acc <SD_PowerOff>
 8000eb0:	e770      	b.n	8000d94 <SD_disk_initialize+0x50>
    return STA_NOINIT;
 8000eb2:	2001      	movs	r0, #1
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000040 	.word	0x20000040
 8000ec0:	20003785 	.word	0x20003785

08000ec4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv)
 8000ec4:	b918      	cbnz	r0, 8000ece <SD_disk_status+0xa>
    return STA_NOINIT;

  return Stat;
 8000ec6:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <SD_disk_status+0x10>)
 8000ec8:	7818      	ldrb	r0, [r3, #0]
 8000eca:	b2c0      	uxtb	r0, r0
 8000ecc:	4770      	bx	lr
    return STA_NOINIT;
 8000ece:	2001      	movs	r0, #1
}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d13e      	bne.n	8000f5a <SD_disk_read+0x82>
{
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	460d      	mov	r5, r1
 8000ee0:	4616      	mov	r6, r2
 8000ee2:	461c      	mov	r4, r3
  if (pdrv || !count)
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d03a      	beq.n	8000f5e <SD_disk_read+0x86>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <SD_disk_read+0x90>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f013 0f01 	tst.w	r3, #1
 8000ef0:	d137      	bne.n	8000f62 <SD_disk_read+0x8a>
    return RES_NOTRDY;

  if (!(CardType & 4))
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <SD_disk_read+0x94>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f013 0f04 	tst.w	r3, #4
 8000efa:	d100      	bne.n	8000efe <SD_disk_read+0x26>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000efc:	0256      	lsls	r6, r2, #9

  SELECT();
 8000efe:	f7ff fe07 	bl	8000b10 <SELECT>

  if (count == 1)
 8000f02:	2c01      	cmp	r4, #1
 8000f04:	d01a      	beq.n	8000f3c <SD_disk_read+0x64>
      count = 0;
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000f06:	4631      	mov	r1, r6
 8000f08:	2052      	movs	r0, #82	; 0x52
 8000f0a:	f7ff fe83 	bl	8000c14 <SD_SendCmd>
 8000f0e:	b968      	cbnz	r0, 8000f2c <SD_disk_read+0x54>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f14:	4628      	mov	r0, r5
 8000f16:	f7ff feb9 	bl	8000c8c <SD_RxDataBlock>
 8000f1a:	b118      	cbz	r0, 8000f24 <SD_disk_read+0x4c>
          break;

        buff += 512;
 8000f1c:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8000f20:	3c01      	subs	r4, #1
 8000f22:	d1f5      	bne.n	8000f10 <SD_disk_read+0x38>

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	204c      	movs	r0, #76	; 0x4c
 8000f28:	f7ff fe74 	bl	8000c14 <SD_SendCmd>
    }
  }

  DESELECT();
 8000f2c:	f7ff fdfa 	bl	8000b24 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000f30:	f7ff fe02 	bl	8000b38 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000f34:	1e20      	subs	r0, r4, #0
 8000f36:	bf18      	it	ne
 8000f38:	2001      	movne	r0, #1
}
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	2051      	movs	r0, #81	; 0x51
 8000f40:	f7ff fe68 	bl	8000c14 <SD_SendCmd>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1f1      	bne.n	8000f2c <SD_disk_read+0x54>
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f7ff fe9d 	bl	8000c8c <SD_RxDataBlock>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d0ea      	beq.n	8000f2c <SD_disk_read+0x54>
      count = 0;
 8000f56:	2400      	movs	r4, #0
 8000f58:	e7e8      	b.n	8000f2c <SD_disk_read+0x54>
    return RES_PARERR;
 8000f5a:	2004      	movs	r0, #4
}
 8000f5c:	4770      	bx	lr
    return RES_PARERR;
 8000f5e:	2004      	movs	r0, #4
 8000f60:	e7eb      	b.n	8000f3a <SD_disk_read+0x62>
    return RES_NOTRDY;
 8000f62:	2003      	movs	r0, #3
 8000f64:	e7e9      	b.n	8000f3a <SD_disk_read+0x62>
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000040 	.word	0x20000040

08000f70 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d152      	bne.n	800101a <SD_disk_write+0xaa>
{
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	460d      	mov	r5, r1
 8000f78:	4616      	mov	r6, r2
 8000f7a:	461c      	mov	r4, r3
  if (pdrv || !count)
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d04e      	beq.n	800101e <SD_disk_write+0xae>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <SD_disk_write+0xbc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	f013 0f01 	tst.w	r3, #1
 8000f88:	d14b      	bne.n	8001022 <SD_disk_write+0xb2>
    return RES_NOTRDY;

  if (Stat & STA_PROTECT)
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <SD_disk_write+0xbc>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f013 0f04 	tst.w	r3, #4
 8000f92:	d148      	bne.n	8001026 <SD_disk_write+0xb6>
    return RES_WRPRT;

  if (!(CardType & 4))
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SD_disk_write+0xc0>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f013 0f04 	tst.w	r3, #4
 8000f9c:	d100      	bne.n	8000fa0 <SD_disk_write+0x30>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000f9e:	0256      	lsls	r6, r2, #9

  SELECT();
 8000fa0:	f7ff fdb6 	bl	8000b10 <SELECT>

  if (count == 1)
 8000fa4:	2c01      	cmp	r4, #1
 8000fa6:	d01f      	beq.n	8000fe8 <SD_disk_write+0x78>
      count = 0;
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <SD_disk_write+0xc0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f013 0f02 	tst.w	r3, #2
 8000fb0:	d128      	bne.n	8001004 <SD_disk_write+0x94>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	2059      	movs	r0, #89	; 0x59
 8000fb6:	f7ff fe2d 	bl	8000c14 <SD_SendCmd>
 8000fba:	b968      	cbnz	r0, 8000fd8 <SD_disk_write+0x68>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000fbc:	21fc      	movs	r1, #252	; 0xfc
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f7ff fe88 	bl	8000cd4 <SD_TxDataBlock>
 8000fc4:	b118      	cbz	r0, 8000fce <SD_disk_write+0x5e>
          break;

        buff += 512;
 8000fc6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8000fca:	3c01      	subs	r4, #1
 8000fcc:	d1f6      	bne.n	8000fbc <SD_disk_write+0x4c>

      if(!SD_TxDataBlock(0, 0xFD))
 8000fce:	21fd      	movs	r1, #253	; 0xfd
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fe7f 	bl	8000cd4 <SD_TxDataBlock>
 8000fd6:	b1f0      	cbz	r0, 8001016 <SD_disk_write+0xa6>
        count = 1;
      }
    }
  }

  DESELECT();
 8000fd8:	f7ff fda4 	bl	8000b24 <DESELECT>
  SPI_RxByte();
 8000fdc:	f7ff fdac 	bl	8000b38 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000fe0:	1e20      	subs	r0, r4, #0
 8000fe2:	bf18      	it	ne
 8000fe4:	2001      	movne	r0, #1
}
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fe8:	4631      	mov	r1, r6
 8000fea:	2058      	movs	r0, #88	; 0x58
 8000fec:	f7ff fe12 	bl	8000c14 <SD_SendCmd>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1f1      	bne.n	8000fd8 <SD_disk_write+0x68>
 8000ff4:	21fe      	movs	r1, #254	; 0xfe
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f7ff fe6c 	bl	8000cd4 <SD_TxDataBlock>
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d0eb      	beq.n	8000fd8 <SD_disk_write+0x68>
      count = 0;
 8001000:	2400      	movs	r4, #0
 8001002:	e7e9      	b.n	8000fd8 <SD_disk_write+0x68>
      SD_SendCmd(CMD55, 0);
 8001004:	2100      	movs	r1, #0
 8001006:	2077      	movs	r0, #119	; 0x77
 8001008:	f7ff fe04 	bl	8000c14 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800100c:	4621      	mov	r1, r4
 800100e:	2057      	movs	r0, #87	; 0x57
 8001010:	f7ff fe00 	bl	8000c14 <SD_SendCmd>
 8001014:	e7cd      	b.n	8000fb2 <SD_disk_write+0x42>
        count = 1;
 8001016:	2401      	movs	r4, #1
 8001018:	e7de      	b.n	8000fd8 <SD_disk_write+0x68>
    return RES_PARERR;
 800101a:	2004      	movs	r0, #4
}
 800101c:	4770      	bx	lr
    return RES_PARERR;
 800101e:	2004      	movs	r0, #4
 8001020:	e7e1      	b.n	8000fe6 <SD_disk_write+0x76>
    return RES_NOTRDY;
 8001022:	2003      	movs	r0, #3
 8001024:	e7df      	b.n	8000fe6 <SD_disk_write+0x76>
    return RES_WRPRT;
 8001026:	2002      	movs	r0, #2
 8001028:	e7dd      	b.n	8000fe6 <SD_disk_write+0x76>
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000
 8001030:	20000040 	.word	0x20000040

08001034 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	b084      	sub	sp, #16
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;

  if (drv)
 8001038:	2800      	cmp	r0, #0
 800103a:	f040 80b7 	bne.w	80011ac <SD_disk_ioctl+0x178>
 800103e:	460d      	mov	r5, r1
 8001040:	4616      	mov	r6, r2
 8001042:	4604      	mov	r4, r0
    return RES_PARERR;

  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 8001044:	2905      	cmp	r1, #5
 8001046:	d013      	beq.n	8001070 <SD_disk_ioctl+0x3c>
      res = RES_PARERR;
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <SD_disk_ioctl+0x180>)
 800104a:	781c      	ldrb	r4, [r3, #0]
 800104c:	f014 0401 	ands.w	r4, r4, #1
 8001050:	f040 80ae 	bne.w	80011b0 <SD_disk_ioctl+0x17c>
      return RES_NOTRDY;

    SELECT();
 8001054:	f7ff fd5c 	bl	8000b10 <SELECT>

    switch (ctrl)
 8001058:	2d0d      	cmp	r5, #13
 800105a:	f200 809b 	bhi.w	8001194 <SD_disk_ioctl+0x160>
 800105e:	e8df f005 	tbb	[pc, r5]
 8001062:	2063      	.short	0x2063
 8001064:	9999995f 	.word	0x9999995f
 8001068:	99999999 	.word	0x99999999
 800106c:	87786999 	.word	0x87786999
    switch (*ptr)
 8001070:	7815      	ldrb	r5, [r2, #0]
 8001072:	2d01      	cmp	r5, #1
 8001074:	d00e      	beq.n	8001094 <SD_disk_ioctl+0x60>
 8001076:	2d02      	cmp	r5, #2
 8001078:	d00f      	beq.n	800109a <SD_disk_ioctl+0x66>
 800107a:	b10d      	cbz	r5, 8001080 <SD_disk_ioctl+0x4c>
 800107c:	2404      	movs	r4, #4
 800107e:	e08e      	b.n	800119e <SD_disk_ioctl+0x16a>
      if (SD_CheckPower())
 8001080:	f7ff fd2a 	bl	8000ad8 <SD_CheckPower>
 8001084:	4604      	mov	r4, r0
 8001086:	2800      	cmp	r0, #0
 8001088:	f000 8089 	beq.w	800119e <SD_disk_ioctl+0x16a>
        SD_PowerOff();          /* Power Off */
 800108c:	f7ff fd1e 	bl	8000acc <SD_PowerOff>
      res = RES_OK;
 8001090:	462c      	mov	r4, r5
 8001092:	e084      	b.n	800119e <SD_disk_ioctl+0x16a>
      SD_PowerOn();             /* Power On */
 8001094:	f7ff fd70 	bl	8000b78 <SD_PowerOn>
      break;
 8001098:	e081      	b.n	800119e <SD_disk_ioctl+0x16a>
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800109a:	f7ff fd1d 	bl	8000ad8 <SD_CheckPower>
 800109e:	7070      	strb	r0, [r6, #1]
      break;
 80010a0:	e07d      	b.n	800119e <SD_disk_ioctl+0x16a>
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010a2:	2100      	movs	r1, #0
 80010a4:	2049      	movs	r0, #73	; 0x49
 80010a6:	f7ff fdb5 	bl	8000c14 <SD_SendCmd>
 80010aa:	4604      	mov	r4, r0
 80010ac:	b108      	cbz	r0, 80010b2 <SD_disk_ioctl+0x7e>
  res = RES_ERROR;
 80010ae:	462c      	mov	r4, r5
 80010b0:	e071      	b.n	8001196 <SD_disk_ioctl+0x162>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010b2:	2110      	movs	r1, #16
 80010b4:	4668      	mov	r0, sp
 80010b6:	f7ff fde9 	bl	8000c8c <SD_RxDataBlock>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d072      	beq.n	80011a4 <SD_disk_ioctl+0x170>
      {
        if ((csd[0] >> 6) == 1)
 80010be:	f89d 3000 	ldrb.w	r3, [sp]
 80010c2:	099b      	lsrs	r3, r3, #6
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d01f      	beq.n	8001108 <SD_disk_ioctl+0xd4>
          *(DWORD*) buff = (DWORD) csize << 10;
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80010cc:	f002 020f 	and.w	r2, r2, #15
 80010d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80010d4:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 80010d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	f003 0306 	and.w	r3, r3, #6
 80010e2:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80010e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80010e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010ec:	099b      	lsrs	r3, r3, #6
 80010ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80010f2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80010f6:	0289      	lsls	r1, r1, #10
 80010f8:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80010fc:	440b      	add	r3, r1
 80010fe:	3301      	adds	r3, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001100:	3a07      	subs	r2, #7
 8001102:	4093      	lsls	r3, r2
 8001104:	6033      	str	r3, [r6, #0]
 8001106:	e046      	b.n	8001196 <SD_disk_ioctl+0x162>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001108:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800110c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001110:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001114:	b29b      	uxth	r3, r3
 8001116:	3301      	adds	r3, #1
 8001118:	b29b      	uxth	r3, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	6033      	str	r3, [r6, #0]
 800111e:	e03a      	b.n	8001196 <SD_disk_ioctl+0x162>
      }
      break;

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	8033      	strh	r3, [r6, #0]
      res = RES_OK;
      break;
 8001126:	e036      	b.n	8001196 <SD_disk_ioctl+0x162>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001128:	f7ff fd62 	bl	8000bf0 <SD_ReadyWait>
 800112c:	28ff      	cmp	r0, #255	; 0xff
 800112e:	d03b      	beq.n	80011a8 <SD_disk_ioctl+0x174>
  res = RES_ERROR;
 8001130:	2401      	movs	r4, #1
 8001132:	e030      	b.n	8001196 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001134:	2100      	movs	r1, #0
 8001136:	2049      	movs	r0, #73	; 0x49
 8001138:	f7ff fd6c 	bl	8000c14 <SD_SendCmd>
 800113c:	4604      	mov	r4, r0
 800113e:	b108      	cbz	r0, 8001144 <SD_disk_ioctl+0x110>
  res = RES_ERROR;
 8001140:	2401      	movs	r4, #1
 8001142:	e028      	b.n	8001196 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001144:	2110      	movs	r1, #16
 8001146:	4630      	mov	r0, r6
 8001148:	f7ff fda0 	bl	8000c8c <SD_RxDataBlock>
 800114c:	bb18      	cbnz	r0, 8001196 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 800114e:	2401      	movs	r4, #1
 8001150:	e021      	b.n	8001196 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001152:	2100      	movs	r1, #0
 8001154:	204a      	movs	r0, #74	; 0x4a
 8001156:	f7ff fd5d 	bl	8000c14 <SD_SendCmd>
 800115a:	4604      	mov	r4, r0
 800115c:	b108      	cbz	r0, 8001162 <SD_disk_ioctl+0x12e>
  res = RES_ERROR;
 800115e:	2401      	movs	r4, #1
 8001160:	e019      	b.n	8001196 <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001162:	2110      	movs	r1, #16
 8001164:	4630      	mov	r0, r6
 8001166:	f7ff fd91 	bl	8000c8c <SD_RxDataBlock>
 800116a:	b9a0      	cbnz	r0, 8001196 <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 800116c:	2401      	movs	r4, #1
 800116e:	e012      	b.n	8001196 <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001170:	2100      	movs	r1, #0
 8001172:	207a      	movs	r0, #122	; 0x7a
 8001174:	f7ff fd4e 	bl	8000c14 <SD_SendCmd>
 8001178:	4604      	mov	r4, r0
 800117a:	b138      	cbz	r0, 800118c <SD_disk_ioctl+0x158>

        res = RES_OK;
      }

    default:
      res = RES_PARERR;
 800117c:	2404      	movs	r4, #4
 800117e:	e00a      	b.n	8001196 <SD_disk_ioctl+0x162>
          *ptr++ = SPI_RxByte();
 8001180:	f7ff fcda 	bl	8000b38 <SPI_RxByte>
 8001184:	f806 0b01 	strb.w	r0, [r6], #1
        for (n = 0; n < 4; n++)
 8001188:	3401      	adds	r4, #1
 800118a:	b2e4      	uxtb	r4, r4
 800118c:	2c03      	cmp	r4, #3
 800118e:	d9f7      	bls.n	8001180 <SD_disk_ioctl+0x14c>
      res = RES_PARERR;
 8001190:	2404      	movs	r4, #4
 8001192:	e000      	b.n	8001196 <SD_disk_ioctl+0x162>
    SELECT();
 8001194:	2404      	movs	r4, #4
    }

    DESELECT();
 8001196:	f7ff fcc5 	bl	8000b24 <DESELECT>
    SPI_RxByte();
 800119a:	f7ff fccd 	bl	8000b38 <SPI_RxByte>
  }

  return res;
}
 800119e:	4620      	mov	r0, r4
 80011a0:	b004      	add	sp, #16
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
  res = RES_ERROR;
 80011a4:	462c      	mov	r4, r5
 80011a6:	e7f6      	b.n	8001196 <SD_disk_ioctl+0x162>
        res = RES_OK;
 80011a8:	462c      	mov	r4, r5
 80011aa:	e7f4      	b.n	8001196 <SD_disk_ioctl+0x162>
    return RES_PARERR;
 80011ac:	2404      	movs	r4, #4
 80011ae:	e7f6      	b.n	800119e <SD_disk_ioctl+0x16a>
      return RES_NOTRDY;
 80011b0:	2403      	movs	r4, #3
 80011b2:	e7f4      	b.n	800119e <SD_disk_ioctl+0x16a>
 80011b4:	20000000 	.word	0x20000000

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b530      	push	{r4, r5, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	2400      	movs	r4, #0
 80011be:	9403      	str	r4, [sp, #12]
 80011c0:	9404      	str	r4, [sp, #16]
 80011c2:	9405      	str	r4, [sp, #20]
 80011c4:	9406      	str	r4, [sp, #24]
 80011c6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	9400      	str	r4, [sp, #0]
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_GPIO_Init+0x74>)
 80011cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
 80011d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	9401      	str	r4, [sp, #4]
 80011e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
 80011e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ea:	f002 0201 	and.w	r2, r2, #1
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	9402      	str	r4, [sp, #8]
 80011f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f6:	f042 0204 	orr.w	r2, r2, #4
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001206:	4d0a      	ldr	r5, [pc, #40]	; (8001230 <MX_GPIO_Init+0x78>)
 8001208:	4622      	mov	r2, r4
 800120a:	2110      	movs	r1, #16
 800120c:	4628      	mov	r0, r5
 800120e:	f000 fb41 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001212:	2310      	movs	r3, #16
 8001214:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	a903      	add	r1, sp, #12
 8001220:	4628      	mov	r0, r5
 8001222:	f000 fa4d 	bl	80016c0 <HAL_GPIO_Init>

}
 8001226:	b009      	add	sp, #36	; 0x24
 8001228:	bd30      	pop	{r4, r5, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800

08001234 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001236:	e7fe      	b.n	8001236 <Error_Handler+0x2>

08001238 <MX_SPI1_Init>:
{
 8001238:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_SPI1_Init+0x38>)
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_SPI1_Init+0x3c>)
 800123e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001240:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001244:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	2300      	movs	r3, #0
 8001248:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800124a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001254:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001256:	2228      	movs	r2, #40	; 0x28
 8001258:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001260:	230a      	movs	r3, #10
 8001262:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001264:	f000 feca 	bl	8001ffc <HAL_SPI_Init>
 8001268:	b900      	cbnz	r0, 800126c <MX_SPI1_Init+0x34>
}
 800126a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800126c:	f7ff ffe2 	bl	8001234 <Error_Handler>
 8001270:	20003728 	.word	0x20003728
 8001274:	40013000 	.word	0x40013000

08001278 <SystemClock_Config>:
{
 8001278:	b500      	push	{lr}
 800127a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127c:	2230      	movs	r2, #48	; 0x30
 800127e:	2100      	movs	r1, #0
 8001280:	a808      	add	r0, sp, #32
 8001282:	f003 f811 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001286:	2300      	movs	r3, #0
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	9304      	str	r3, [sp, #16]
 800128c:	9305      	str	r3, [sp, #20]
 800128e:	9306      	str	r3, [sp, #24]
 8001290:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <SystemClock_Config+0xa0>)
 8001296:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001298:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800129c:	6411      	str	r1, [r2, #64]	; 0x40
 800129e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012a0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <SystemClock_Config+0xa4>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012be:	2301      	movs	r3, #1
 80012c0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d2:	2208      	movs	r2, #8
 80012d4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012d6:	22a8      	movs	r2, #168	; 0xa8
 80012d8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012da:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	a808      	add	r0, sp, #32
 80012e2:	f000 fadd 	bl	80018a0 <HAL_RCC_OscConfig>
 80012e6:	b990      	cbnz	r0, 800130e <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2102      	movs	r1, #2
 80012ee:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001300:	a803      	add	r0, sp, #12
 8001302:	f000 fd2f 	bl	8001d64 <HAL_RCC_ClockConfig>
 8001306:	b920      	cbnz	r0, 8001312 <SystemClock_Config+0x9a>
}
 8001308:	b015      	add	sp, #84	; 0x54
 800130a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800130e:	f7ff ff91 	bl	8001234 <Error_Handler>
    Error_Handler();
 8001312:	f7ff ff8f 	bl	8001234 <Error_Handler>
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <main>:
{
 8001320:	b580      	push	{r7, lr}
  HAL_Init();
 8001322:	f000 f945 	bl	80015b0 <HAL_Init>
  SystemClock_Config();
 8001326:	f7ff ffa7 	bl	8001278 <SystemClock_Config>
  MX_GPIO_Init();
 800132a:	f7ff ff45 	bl	80011b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800132e:	f7ff ff83 	bl	8001238 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001332:	f001 f8b9 	bl	80024a8 <MX_FATFS_Init>
  fresult = f_mount(&fs, "", 0);
 8001336:	4f21      	ldr	r7, [pc, #132]	; (80013bc <main+0x9c>)
 8001338:	2200      	movs	r2, #0
 800133a:	4639      	mov	r1, r7
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <main+0xa0>)
 800133e:	f002 fb81 	bl	8003a44 <f_mount>
 8001342:	4c20      	ldr	r4, [pc, #128]	; (80013c4 <main+0xa4>)
 8001344:	7020      	strb	r0, [r4, #0]
  f_getfree("", &fre_clust, &pfs);
 8001346:	4d20      	ldr	r5, [pc, #128]	; (80013c8 <main+0xa8>)
 8001348:	4e20      	ldr	r6, [pc, #128]	; (80013cc <main+0xac>)
 800134a:	462a      	mov	r2, r5
 800134c:	4631      	mov	r1, r6
 800134e:	4638      	mov	r0, r7
 8001350:	f002 fe6f 	bl	8004032 <f_getfree>
  total = (uint32_t)((pfs->n_fatent -2) * pfs->csize *0.5);
 8001354:	682a      	ldr	r2, [r5, #0]
 8001356:	69d3      	ldr	r3, [r2, #28]
 8001358:	3b02      	subs	r3, #2
 800135a:	8955      	ldrh	r5, [r2, #10]
 800135c:	fb05 f003 	mul.w	r0, r5, r3
 8001360:	f7ff f99e 	bl	80006a0 <__aeabi_ui2d>
 8001364:	2200      	movs	r2, #0
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <main+0xb0>)
 8001368:	f7fe ff2e 	bl	80001c8 <__aeabi_dmul>
 800136c:	f7ff fa12 	bl	8000794 <__aeabi_d2uiz>
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <main+0xb4>)
 8001372:	6018      	str	r0, [r3, #0]
  free_space = (uint32_t)(fre_clust * pfs ->csize * 0.5);
 8001374:	6830      	ldr	r0, [r6, #0]
 8001376:	fb00 f005 	mul.w	r0, r0, r5
 800137a:	f7ff f991 	bl	80006a0 <__aeabi_ui2d>
 800137e:	2200      	movs	r2, #0
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <main+0xb0>)
 8001382:	f7fe ff21 	bl	80001c8 <__aeabi_dmul>
 8001386:	f7ff fa05 	bl	8000794 <__aeabi_d2uiz>
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <main+0xb8>)
 800138c:	6018      	str	r0, [r3, #0]
  fresult = f_open(&file, "bismillah.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800138e:	4f13      	ldr	r7, [pc, #76]	; (80013dc <main+0xbc>)
 8001390:	4d13      	ldr	r5, [pc, #76]	; (80013e0 <main+0xc0>)
 8001392:	220b      	movs	r2, #11
 8001394:	4639      	mov	r1, r7
 8001396:	4628      	mov	r0, r5
 8001398:	f002 fb82 	bl	8003aa0 <f_open>
 800139c:	7020      	strb	r0, [r4, #0]
  fresult = f_open(&bebe, "bismillah.txt", FA_CREATE_NEW | FA_READ | FA_WRITE);
 800139e:	4e11      	ldr	r6, [pc, #68]	; (80013e4 <main+0xc4>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	4639      	mov	r1, r7
 80013a4:	4630      	mov	r0, r6
 80013a6:	f002 fb7b 	bl	8003aa0 <f_open>
 80013aa:	7020      	strb	r0, [r4, #0]
  f_puts("Rabbim Sirat i Mustakimden ayirmasin" ,&bebe);
 80013ac:	4631      	mov	r1, r6
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <main+0xc8>)
 80013b0:	f002 fead 	bl	800410e <f_puts>
  fresult = f_close(&file);
 80013b4:	4628      	mov	r0, r5
 80013b6:	f002 fe27 	bl	8004008 <f_close>
  while (1)
 80013ba:	e7fe      	b.n	80013ba <main+0x9a>
 80013bc:	08004304 	.word	0x08004304
 80013c0:	2000027c 	.word	0x2000027c
 80013c4:	20003724 	.word	0x20003724
 80013c8:	20003720 	.word	0x20003720
 80013cc:	20000278 	.word	0x20000278
 80013d0:	3fe00000 	.word	0x3fe00000
 80013d4:	20003780 	.word	0x20003780
 80013d8:	20003318 	.word	0x20003318
 80013dc:	080042d0 	.word	0x080042d0
 80013e0:	200022e8 	.word	0x200022e8
 80013e4:	200012b8 	.word	0x200012b8
 80013e8:	080042e0 	.word	0x080042e0

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2100      	movs	r1, #0
 80013f0:	9100      	str	r1, [sp, #0]
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_MspInit+0x34>)
 80013f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
 80013fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	9101      	str	r1, [sp, #4]
 8001408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	b002      	add	sp, #8
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b500      	push	{lr}
 8001426:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	2300      	movs	r3, #0
 800142a:	9303      	str	r3, [sp, #12]
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	9306      	str	r3, [sp, #24]
 8001432:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001434:	6802      	ldr	r2, [r0, #0]
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_SPI_MspInit+0x68>)
 8001438:	429a      	cmp	r2, r3
 800143a:	d002      	beq.n	8001442 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800143c:	b009      	add	sp, #36	; 0x24
 800143e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001442:	2200      	movs	r2, #0
 8001444:	9201      	str	r2, [sp, #4]
 8001446:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800144a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800144c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001450:	6459      	str	r1, [r3, #68]	; 0x44
 8001452:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001454:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001458:	9101      	str	r1, [sp, #4]
 800145a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001460:	f041 0101 	orr.w	r1, r1, #1
 8001464:	6319      	str	r1, [r3, #48]	; 0x30
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	a903      	add	r1, sp, #12
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <HAL_SPI_MspInit+0x6c>)
 8001486:	f000 f91b 	bl	80016c0 <HAL_GPIO_Init>
}
 800148a:	e7d7      	b.n	800143c <HAL_SPI_MspInit+0x18>
 800148c:	40013000 	.word	0x40013000
 8001490:	40020000 	.word	0x40020000

08001494 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
	if(Timer1 > 0)
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <SDTimer_Handler+0x24>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b123      	cbz	r3, 80014a4 <SDTimer_Handler+0x10>
		Timer1--;
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <SDTimer_Handler+0x24>)
 800149c:	7813      	ldrb	r3, [r2, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	7013      	strb	r3, [r2, #0]
	if(Timer2 > 0)
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SDTimer_Handler+0x28>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b123      	cbz	r3, 80014b4 <SDTimer_Handler+0x20>
		Timer2--;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <SDTimer_Handler+0x28>)
 80014ac:	7813      	ldrb	r3, [r2, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	7013      	strb	r3, [r2, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20003785 	.word	0x20003785
 80014bc:	20003784 	.word	0x20003784

080014c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler>

080014c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler>

080014c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler>

080014c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler>

080014c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler>

080014ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <SysTick_Handler+0x28>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 80014dc:	7813      	ldrb	r3, [r2, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	d802      	bhi.n	80014ea <SysTick_Handler+0x1a>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f87e 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 80014ea:	4613      	mov	r3, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80014f0:	f7ff ffd0 	bl	8001494 <SDTimer_Handler>
 80014f4:	e7f6      	b.n	80014e4 <SysTick_Handler+0x14>
 80014f6:	bf00      	nop
 80014f8:	20000042 	.word	0x20000042

080014fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <SystemInit+0x10>)
 80014fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopFillZerobss+0x12>
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopFillZerobss+0x16>)
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <LoopFillZerobss+0x1a>)
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <LoopFillZerobss+0x1e>)
 800151a:	2300      	movs	r3, #0
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:
 800151e:	58d4      	ldr	r4, [r2, r3]
 8001520:	50c4      	str	r4, [r0, r3]
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:
 8001524:	18c4      	adds	r4, r0, r3
 8001526:	428c      	cmp	r4, r1
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopFillZerobss+0x22>)
 800152c:	4c0b      	ldr	r4, [pc, #44]	; (800155c <LoopFillZerobss+0x26>)
 800152e:	2300      	movs	r3, #0
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:
 8001536:	42a2      	cmp	r2, r4
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>
 800153a:	f7ff ffdf 	bl	80014fc <SystemInit>
 800153e:	f002 fe8f 	bl	8004260 <__libc_init_array>
 8001542:	f7ff feed 	bl	8001320 <main>
 8001546:	4770      	bx	lr
 8001548:	20020000 	.word	0x20020000
 800154c:	20000000 	.word	0x20000000
 8001550:	20000024 	.word	0x20000024
 8001554:	0800477c 	.word	0x0800477c
 8001558:	20000024 	.word	0x20000024
 800155c:	200057fc 	.word	0x200057fc

08001560 <ADC_IRQHandler>:
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b510      	push	{r4, lr}
 8001566:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_InitTick+0x40>)
 800156a:	7818      	ldrb	r0, [r3, #0]
 800156c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001570:	fbb3 f3f0 	udiv	r3, r3, r0
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_InitTick+0x44>)
 8001576:	6810      	ldr	r0, [r2, #0]
 8001578:	fbb0 f0f3 	udiv	r0, r0, r3
 800157c:	f000 f88a 	bl	8001694 <HAL_SYSTICK_Config>
 8001580:	b968      	cbnz	r0, 800159e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	2c0f      	cmp	r4, #15
 8001584:	d901      	bls.n	800158a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	e00a      	b.n	80015a0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158a:	2200      	movs	r2, #0
 800158c:	4621      	mov	r1, r4
 800158e:	f04f 30ff 	mov.w	r0, #4294967295
 8001592:	f000 f84b 	bl	800162c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_InitTick+0x48>)
 8001598:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2000      	movs	r0, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
}
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <HAL_Init>:
{
 80015b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_Init+0x30>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f81b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ffc6 	bl	8001564 <HAL_InitTick>
  HAL_MspInit();
 80015d8:	f7ff ff08 	bl	80013ec <HAL_MspInit>
}
 80015dc:	2000      	movs	r0, #0
 80015de:	bd08      	pop	{r3, pc}
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x10>)
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_IncTick+0x14>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20003788 	.word	0x20003788
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <HAL_GetTick+0x8>)
 80015fe:	6818      	ldr	r0, [r3, #0]
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20003788 	.word	0x20003788

08001608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800160a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	0200      	lsls	r0, r0, #8
 8001616:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001624:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_NVIC_SetPriority+0x60>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001636:	f1c3 0407 	rsb	r4, r3, #7
 800163a:	2c04      	cmp	r4, #4
 800163c:	bf28      	it	cs
 800163e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001640:	1d1d      	adds	r5, r3, #4
 8001642:	2d06      	cmp	r5, #6
 8001644:	d918      	bls.n	8001678 <HAL_NVIC_SetPriority+0x4c>
 8001646:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 35ff 	mov.w	r5, #4294967295
 800164c:	fa05 f404 	lsl.w	r4, r5, r4
 8001650:	ea21 0104 	bic.w	r1, r1, r4
 8001654:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001656:	fa05 f303 	lsl.w	r3, r5, r3
 800165a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001660:	2800      	cmp	r0, #0
 8001662:	db0b      	blt.n	800167c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	0109      	lsls	r1, r1, #4
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800166c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001670:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001674:	bc30      	pop	{r4, r5}
 8001676:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001678:	2300      	movs	r3, #0
 800167a:	e7e5      	b.n	8001648 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	f000 000f 	and.w	r0, r0, #15
 8001680:	0109      	lsls	r1, r1, #4
 8001682:	b2c9      	uxtb	r1, r1
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_NVIC_SetPriority+0x64>)
 8001686:	5419      	strb	r1, [r3, r0]
 8001688:	e7f4      	b.n	8001674 <HAL_NVIC_SetPriority+0x48>
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	e000ed14 	.word	0xe000ed14

08001694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	3801      	subs	r0, #1
 8001696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800169a:	d20a      	bcs.n	80016b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_SYSTICK_Config+0x24>)
 800169e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_SYSTICK_Config+0x28>)
 80016a2:	21f0      	movs	r1, #240	; 0xf0
 80016a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	2000      	movs	r0, #0
 80016aa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f200 80dd 	bhi.w	8001882 <HAL_GPIO_Init+0x1c2>
{
 80016c8:	b4f0      	push	{r4, r5, r6, r7}
 80016ca:	b082      	sub	sp, #8
 80016cc:	e05d      	b.n	800178a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	005f      	lsls	r7, r3, #1
 80016d2:	2403      	movs	r4, #3
 80016d4:	40bc      	lsls	r4, r7
 80016d6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	68cc      	ldr	r4, [r1, #12]
 80016dc:	40bc      	lsls	r4, r7
 80016de:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80016e0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016e8:	684c      	ldr	r4, [r1, #4]
 80016ea:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80016f2:	6042      	str	r2, [r0, #4]
 80016f4:	e057      	b.n	80017a6 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f6:	08dc      	lsrs	r4, r3, #3
 80016f8:	3408      	adds	r4, #8
 80016fa:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	f003 0207 	and.w	r2, r3, #7
 8001702:	0096      	lsls	r6, r2, #2
 8001704:	220f      	movs	r2, #15
 8001706:	40b2      	lsls	r2, r6
 8001708:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	690a      	ldr	r2, [r1, #16]
 800170e:	40b2      	lsls	r2, r6
 8001710:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001712:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001716:	e05a      	b.n	80017ce <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001718:	2207      	movs	r2, #7
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x5e>
 800171c:	2200      	movs	r2, #0
 800171e:	40b2      	lsls	r2, r6
 8001720:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001722:	3402      	adds	r4, #2
 8001724:	4e57      	ldr	r6, [pc, #348]	; (8001884 <HAL_GPIO_Init+0x1c4>)
 8001726:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172a:	4a57      	ldr	r2, [pc, #348]	; (8001888 <HAL_GPIO_Init+0x1c8>)
 800172c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800172e:	43ea      	mvns	r2, r5
 8001730:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	684f      	ldr	r7, [r1, #4]
 8001736:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800173a:	d001      	beq.n	8001740 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800173c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001740:	4c51      	ldr	r4, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x1c8>)
 8001742:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001744:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001746:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174a:	684f      	ldr	r7, [r1, #4]
 800174c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001750:	d001      	beq.n	8001756 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8001752:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001756:	4c4c      	ldr	r4, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x1c8>)
 8001758:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800175c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001760:	684f      	ldr	r7, [r1, #4]
 8001762:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001766:	d001      	beq.n	800176c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001768:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800176c:	4c46      	ldr	r4, [pc, #280]	; (8001888 <HAL_GPIO_Init+0x1c8>)
 800176e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001770:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001772:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	684e      	ldr	r6, [r1, #4]
 8001776:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800177a:	d001      	beq.n	8001780 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800177c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001780:	4c41      	ldr	r4, [pc, #260]	; (8001888 <HAL_GPIO_Init+0x1c8>)
 8001782:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001784:	3301      	adds	r3, #1
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d878      	bhi.n	800187c <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	680c      	ldr	r4, [r1, #0]
 8001790:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001794:	ea32 0404 	bics.w	r4, r2, r4
 8001798:	d1f4      	bne.n	8001784 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	684c      	ldr	r4, [r1, #4]
 800179c:	f004 0403 	and.w	r4, r4, #3
 80017a0:	3c01      	subs	r4, #1
 80017a2:	2c01      	cmp	r4, #1
 80017a4:	d993      	bls.n	80016ce <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a6:	684a      	ldr	r2, [r1, #4]
 80017a8:	f002 0203 	and.w	r2, r2, #3
 80017ac:	2a03      	cmp	r2, #3
 80017ae:	d009      	beq.n	80017c4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80017b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	005e      	lsls	r6, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	40b2      	lsls	r2, r6
 80017b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	688a      	ldr	r2, [r1, #8]
 80017be:	40b2      	lsls	r2, r6
 80017c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80017c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c4:	684a      	ldr	r2, [r1, #4]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	2a02      	cmp	r2, #2
 80017cc:	d093      	beq.n	80016f6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80017ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d0:	005e      	lsls	r6, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	40b2      	lsls	r2, r6
 80017d6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	684a      	ldr	r2, [r1, #4]
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	40b2      	lsls	r2, r6
 80017e2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80017e4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	684a      	ldr	r2, [r1, #4]
 80017e8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80017ec:	d0ca      	beq.n	8001784 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2200      	movs	r2, #0
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <HAL_GPIO_Init+0x1cc>)
 80017f4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80017f6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80017fa:	6454      	str	r4, [r2, #68]	; 0x44
 80017fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	089c      	lsrs	r4, r3, #2
 8001808:	1ca6      	adds	r6, r4, #2
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <HAL_GPIO_Init+0x1c4>)
 800180c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	0096      	lsls	r6, r2, #2
 8001816:	220f      	movs	r2, #15
 8001818:	40b2      	lsls	r2, r6
 800181a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_GPIO_Init+0x1d0>)
 8001820:	4290      	cmp	r0, r2
 8001822:	f43f af7b 	beq.w	800171c <HAL_GPIO_Init+0x5c>
 8001826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800182a:	4290      	cmp	r0, r2
 800182c:	d01a      	beq.n	8001864 <HAL_GPIO_Init+0x1a4>
 800182e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001832:	4290      	cmp	r0, r2
 8001834:	d018      	beq.n	8001868 <HAL_GPIO_Init+0x1a8>
 8001836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800183a:	4290      	cmp	r0, r2
 800183c:	d016      	beq.n	800186c <HAL_GPIO_Init+0x1ac>
 800183e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001842:	4290      	cmp	r0, r2
 8001844:	d014      	beq.n	8001870 <HAL_GPIO_Init+0x1b0>
 8001846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800184a:	4290      	cmp	r0, r2
 800184c:	d012      	beq.n	8001874 <HAL_GPIO_Init+0x1b4>
 800184e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001852:	4290      	cmp	r0, r2
 8001854:	d010      	beq.n	8001878 <HAL_GPIO_Init+0x1b8>
 8001856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800185a:	4290      	cmp	r0, r2
 800185c:	f43f af5c 	beq.w	8001718 <HAL_GPIO_Init+0x58>
 8001860:	2208      	movs	r2, #8
 8001862:	e75c      	b.n	800171e <HAL_GPIO_Init+0x5e>
 8001864:	2201      	movs	r2, #1
 8001866:	e75a      	b.n	800171e <HAL_GPIO_Init+0x5e>
 8001868:	2202      	movs	r2, #2
 800186a:	e758      	b.n	800171e <HAL_GPIO_Init+0x5e>
 800186c:	2203      	movs	r2, #3
 800186e:	e756      	b.n	800171e <HAL_GPIO_Init+0x5e>
 8001870:	2204      	movs	r2, #4
 8001872:	e754      	b.n	800171e <HAL_GPIO_Init+0x5e>
 8001874:	2205      	movs	r2, #5
 8001876:	e752      	b.n	800171e <HAL_GPIO_Init+0x5e>
 8001878:	2206      	movs	r2, #6
 800187a:	e750      	b.n	800171e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800187c:	b002      	add	sp, #8
 800187e:	bcf0      	pop	{r4, r5, r6, r7}
 8001880:	4770      	bx	lr
 8001882:	4770      	bx	lr
 8001884:	40013800 	.word	0x40013800
 8001888:	40013c00 	.word	0x40013c00
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	b10a      	cbz	r2, 800189a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	6181      	str	r1, [r0, #24]
 8001898:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189a:	0409      	lsls	r1, r1, #16
 800189c:	6181      	str	r1, [r0, #24]
  }
}
 800189e:	4770      	bx	lr

080018a0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	2800      	cmp	r0, #0
 80018a2:	f000 81df 	beq.w	8001c64 <HAL_RCC_OscConfig+0x3c4>
{
 80018a6:	b570      	push	{r4, r5, r6, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	f013 0f01 	tst.w	r3, #1
 80018b2:	d03b      	beq.n	800192c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b4:	4ba6      	ldr	r3, [pc, #664]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d02c      	beq.n	800191a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c0:	4ba3      	ldr	r3, [pc, #652]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d021      	beq.n	8001910 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d04f      	beq.n	8001974 <HAL_RCC_OscConfig+0xd4>
 80018d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d8:	d052      	beq.n	8001980 <HAL_RCC_OscConfig+0xe0>
 80018da:	4b9d      	ldr	r3, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ec:	6863      	ldr	r3, [r4, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d050      	beq.n	8001994 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fe83 	bl	80015fc <HAL_GetTick>
 80018f6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	4b95      	ldr	r3, [pc, #596]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001900:	d114      	bne.n	800192c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001902:	f7ff fe7b 	bl	80015fc <HAL_GetTick>
 8001906:	1b40      	subs	r0, r0, r5
 8001908:	2864      	cmp	r0, #100	; 0x64
 800190a:	d9f5      	bls.n	80018f8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
 800190e:	e1b0      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001910:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001918:	d0d8      	beq.n	80018cc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191a:	4b8d      	ldr	r3, [pc, #564]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001922:	d003      	beq.n	800192c <HAL_RCC_OscConfig+0x8c>
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 819e 	beq.w	8001c68 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	f013 0f02 	tst.w	r3, #2
 8001932:	d054      	beq.n	80019de <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001934:	4b86      	ldr	r3, [pc, #536]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f013 0f0c 	tst.w	r3, #12
 800193c:	d03e      	beq.n	80019bc <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b84      	ldr	r3, [pc, #528]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001946:	2b08      	cmp	r3, #8
 8001948:	d033      	beq.n	80019b2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800194a:	68e3      	ldr	r3, [r4, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d067      	beq.n	8001a20 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <HAL_RCC_OscConfig+0x2b4>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fe51 	bl	80015fc <HAL_GetTick>
 800195a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f013 0f02 	tst.w	r3, #2
 8001964:	d153      	bne.n	8001a0e <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fe49 	bl	80015fc <HAL_GetTick>
 800196a:	1b40      	subs	r0, r0, r5
 800196c:	2802      	cmp	r0, #2
 800196e:	d9f5      	bls.n	800195c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001970:	2003      	movs	r0, #3
 8001972:	e17e      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001974:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e7b5      	b.n	80018ec <HAL_RCC_OscConfig+0x4c>
 8001980:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e7ab      	b.n	80018ec <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001994:	f7ff fe32 	bl	80015fc <HAL_GetTick>
 8001998:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019a2:	d0c3      	beq.n	800192c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fe2a 	bl	80015fc <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	2864      	cmp	r0, #100	; 0x64
 80019ac:	d9f5      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e15f      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019ba:	d1c6      	bne.n	800194a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019bc:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f013 0f02 	tst.w	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_OscConfig+0x12e>
 80019c6:	68e3      	ldr	r3, [r4, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f040 814f 	bne.w	8001c6c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019d6:	6921      	ldr	r1, [r4, #16]
 80019d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019dc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f013 0f08 	tst.w	r3, #8
 80019e4:	d040      	beq.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e6:	6963      	ldr	r3, [r4, #20]
 80019e8:	b363      	cbz	r3, 8001a44 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x2b8>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff fe04 	bl	80015fc <HAL_GetTick>
 80019f4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	f013 0f02 	tst.w	r3, #2
 80019fe:	d133      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fdfc 	bl	80015fc <HAL_GetTick>
 8001a04:	1b40      	subs	r0, r0, r5
 8001a06:	2802      	cmp	r0, #2
 8001a08:	d9f5      	bls.n	80019f6 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	e131      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001a10:	6813      	ldr	r3, [r2, #0]
 8001a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a16:	6921      	ldr	r1, [r4, #16]
 8001a18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e7de      	b.n	80019de <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_RCC_OscConfig+0x2b4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a26:	f7ff fde9 	bl	80015fc <HAL_GetTick>
 8001a2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2c:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f013 0f02 	tst.w	r3, #2
 8001a34:	d0d3      	beq.n	80019de <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fde1 	bl	80015fc <HAL_GetTick>
 8001a3a:	1b40      	subs	r0, r0, r5
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9f5      	bls.n	8001a2c <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001a40:	2003      	movs	r0, #3
 8001a42:	e116      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_RCC_OscConfig+0x2b8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fdd7 	bl	80015fc <HAL_GetTick>
 8001a4e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	f013 0f02 	tst.w	r3, #2
 8001a58:	d006      	beq.n	8001a68 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fdcf 	bl	80015fc <HAL_GetTick>
 8001a5e:	1b40      	subs	r0, r0, r5
 8001a60:	2802      	cmp	r0, #2
 8001a62:	d9f5      	bls.n	8001a50 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
 8001a66:	e104      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f013 0f04 	tst.w	r3, #4
 8001a6e:	d078      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a78:	d10d      	bne.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a92:	2501      	movs	r5, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <HAL_RCC_OscConfig+0x2bc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001aa0:	d021      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa2:	68a3      	ldr	r3, [r4, #8]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d032      	beq.n	8001b0e <HAL_RCC_OscConfig+0x26e>
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d036      	beq.n	8001b1a <HAL_RCC_OscConfig+0x27a>
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab8:	f022 0204 	bic.w	r2, r2, #4
 8001abc:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d034      	beq.n	8001b2e <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fd9a 	bl	80015fc <HAL_GetTick>
 8001ac8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	f013 0f02 	tst.w	r3, #2
 8001ad2:	d145      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fd92 	bl	80015fc <HAL_GetTick>
 8001ad8:	1b80      	subs	r0, r0, r6
 8001ada:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d9f3      	bls.n	8001aca <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	e0c5      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x2bc>)
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001af0:	f7ff fd84 	bl	80015fc <HAL_GetTick>
 8001af4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_OscConfig+0x2bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001afe:	d1d0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fd7c 	bl	80015fc <HAL_GetTick>
 8001b04:	1b80      	subs	r0, r0, r6
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d9f5      	bls.n	8001af6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	e0b1      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001b10:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	e7d1      	b.n	8001abe <HAL_RCC_OscConfig+0x21e>
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b1e:	f042 0204 	orr.w	r2, r2, #4
 8001b22:	671a      	str	r2, [r3, #112]	; 0x70
 8001b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	671a      	str	r2, [r3, #112]	; 0x70
 8001b2c:	e7c7      	b.n	8001abe <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fd65 	bl	80015fc <HAL_GetTick>
 8001b32:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_OscConfig+0x2b0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	f013 0f02 	tst.w	r3, #2
 8001b3c:	d010      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fd5d 	bl	80015fc <HAL_GetTick>
 8001b42:	1b80      	subs	r0, r0, r6
 8001b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b48:	4298      	cmp	r0, r3
 8001b4a:	d9f3      	bls.n	8001b34 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	e090      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	42470000 	.word	0x42470000
 8001b58:	42470e80 	.word	0x42470e80
 8001b5c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b60:	b9ed      	cbnz	r5, 8001b9e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	69a3      	ldr	r3, [r4, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8083 	beq.w	8001c70 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b6a:	4a49      	ldr	r2, [pc, #292]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001b6c:	6892      	ldr	r2, [r2, #8]
 8001b6e:	f002 020c 	and.w	r2, r2, #12
 8001b72:	2a08      	cmp	r2, #8
 8001b74:	d051      	beq.n	8001c1a <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d017      	beq.n	8001baa <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x3f4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fd3c 	bl	80015fc <HAL_GetTick>
 8001b84:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b8e:	d042      	beq.n	8001c16 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff fd34 	bl	80015fc <HAL_GetTick>
 8001b94:	1b00      	subs	r0, r0, r4
 8001b96:	2802      	cmp	r0, #2
 8001b98:	d9f5      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	e069      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001ba0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	e7db      	b.n	8001b62 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_OscConfig+0x3f4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fd24 	bl	80015fc <HAL_GetTick>
 8001bb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bbe:	d006      	beq.n	8001bce <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff fd1c 	bl	80015fc <HAL_GetTick>
 8001bc4:	1b40      	subs	r0, r0, r5
 8001bc6:	2802      	cmp	r0, #2
 8001bc8:	d9f5      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
 8001bcc:	e051      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bce:	69e3      	ldr	r3, [r4, #28]
 8001bd0:	6a22      	ldr	r2, [r4, #32]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bd6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bdc:	0852      	lsrs	r2, r2, #1
 8001bde:	3a01      	subs	r2, #1
 8001be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001be4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001be6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001bec:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_RCC_OscConfig+0x3f4>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fd02 	bl	80015fc <HAL_GetTick>
 8001bf8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff fcfa 	bl	80015fc <HAL_GetTick>
 8001c08:	1b00      	subs	r0, r0, r4
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f5      	bls.n	8001bfa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e02f      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2000      	movs	r0, #0
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c16:	2000      	movs	r0, #0
 8001c18:	e02b      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d02b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_RCC_OscConfig+0x3f0>)
 8001c20:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001c26:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	4291      	cmp	r1, r2
 8001c2a:	d126      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c30:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d123      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c36:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001c42:	d11e      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c44:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001c48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c4a:	0852      	lsrs	r2, r2, #1
 8001c4c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001c52:	d118      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c54:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001c5e:	d114      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001c60:	2000      	movs	r0, #0
 8001c62:	e006      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
}
 8001c66:	4770      	bx	lr
        return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001c70:	2000      	movs	r0, #0
}
 8001c72:	b002      	add	sp, #8
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e7fb      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e7f9      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c7e:	2001      	movs	r0, #1
 8001c80:	e7f7      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c82:	2001      	movs	r0, #1
 8001c84:	e7f5      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c86:	2001      	movs	r0, #1
 8001c88:	e7f3      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e7f1      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	42470060 	.word	0x42470060

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d053      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0xb6>
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d153      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001cc2:	0158      	lsls	r0, r3, #5
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	1ac0      	subs	r0, r0, r3
 8001cc8:	f161 0100 	sbc.w	r1, r1, #0
 8001ccc:	018e      	lsls	r6, r1, #6
 8001cce:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001cd2:	0187      	lsls	r7, r0, #6
 8001cd4:	1a3c      	subs	r4, r7, r0
 8001cd6:	eb66 0501 	sbc.w	r5, r6, r1
 8001cda:	00e9      	lsls	r1, r5, #3
 8001cdc:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001ce0:	00e0      	lsls	r0, r4, #3
 8001ce2:	18c0      	adds	r0, r0, r3
 8001ce4:	f141 0100 	adc.w	r1, r1, #0
 8001ce8:	024b      	lsls	r3, r1, #9
 8001cea:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001cee:	0244      	lsls	r4, r0, #9
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f7fe fd6d 	bl	80007d4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d06:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d0a:	e023      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d14:	015c      	lsls	r4, r3, #5
 8001d16:	2500      	movs	r5, #0
 8001d18:	1ae4      	subs	r4, r4, r3
 8001d1a:	f165 0500 	sbc.w	r5, r5, #0
 8001d1e:	01ae      	lsls	r6, r5, #6
 8001d20:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001d24:	01a7      	lsls	r7, r4, #6
 8001d26:	1b38      	subs	r0, r7, r4
 8001d28:	eb66 0105 	sbc.w	r1, r6, r5
 8001d2c:	00cc      	lsls	r4, r1, #3
 8001d2e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001d32:	00c5      	lsls	r5, r0, #3
 8001d34:	18e8      	adds	r0, r5, r3
 8001d36:	f144 0100 	adc.w	r1, r4, #0
 8001d3a:	028b      	lsls	r3, r1, #10
 8001d3c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001d40:	0284      	lsls	r4, r0, #10
 8001d42:	4620      	mov	r0, r4
 8001d44:	4619      	mov	r1, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	f7fe fd44 	bl	80007d4 <__aeabi_uldivmod>
 8001d4c:	e7d5      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	00f42400 	.word	0x00f42400

08001d64 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f000 809b 	beq.w	8001ea0 <HAL_RCC_ClockConfig+0x13c>
{
 8001d6a:	b570      	push	{r4, r5, r6, lr}
 8001d6c:	460d      	mov	r5, r1
 8001d6e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_ClockConfig+0x14c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d208      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	b2cb      	uxtb	r3, r1
 8001d7e:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_RCC_ClockConfig+0x14c>)
 8001d80:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	f040 808b 	bne.w	8001ea4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	f013 0f02 	tst.w	r3, #2
 8001d94:	d017      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	f013 0f04 	tst.w	r3, #4
 8001d9a:	d004      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4a45      	ldr	r2, [pc, #276]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001d9e:	6893      	ldr	r3, [r2, #8]
 8001da0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f013 0f08 	tst.w	r3, #8
 8001dac:	d004      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dae:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001db0:	6893      	ldr	r3, [r2, #8]
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001dba:	6893      	ldr	r3, [r2, #8]
 8001dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc0:	68a1      	ldr	r1, [r4, #8]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f013 0f01 	tst.w	r3, #1
 8001dcc:	d032      	beq.n	8001e34 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d021      	beq.n	8001e18 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd4:	1e9a      	subs	r2, r3, #2
 8001dd6:	2a01      	cmp	r2, #1
 8001dd8:	d925      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	4a36      	ldr	r2, [pc, #216]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f012 0f02 	tst.w	r2, #2
 8001de2:	d061      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4933      	ldr	r1, [pc, #204]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001de6:	688a      	ldr	r2, [r1, #8]
 8001de8:	f022 0203 	bic.w	r2, r2, #3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001df0:	f7ff fc04 	bl	80015fc <HAL_GetTick>
 8001df4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	6862      	ldr	r2, [r4, #4]
 8001e00:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e04:	d016      	beq.n	8001e34 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7ff fbf9 	bl	80015fc <HAL_GetTick>
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e10:	4298      	cmp	r0, r3
 8001e12:	d9f0      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
 8001e16:	e042      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e20:	d1e0      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
 8001e24:	e03b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e2e:	d1d9      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e30:	2001      	movs	r0, #1
 8001e32:	e034      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_ClockConfig+0x14c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	42ab      	cmp	r3, r5
 8001e3e:	d907      	bls.n	8001e50 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e40:	b2ea      	uxtb	r2, r5
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCC_ClockConfig+0x14c>)
 8001e44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	42ab      	cmp	r3, r5
 8001e4e:	d12d      	bne.n	8001eac <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	f013 0f04 	tst.w	r3, #4
 8001e56:	d006      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e5a:	6893      	ldr	r3, [r2, #8]
 8001e5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e60:	68e1      	ldr	r1, [r4, #12]
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f013 0f08 	tst.w	r3, #8
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e76:	6921      	ldr	r1, [r4, #16]
 8001e78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e7c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7e:	f7ff ff0b 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_RCC_ClockConfig+0x150>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x154>)
 8001e8c:	5cd3      	ldrb	r3, [r2, r3]
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x158>)
 8001e92:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x15c>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f7ff fb64 	bl	8001564 <HAL_InitTick>
  return HAL_OK;
 8001e9c:	2000      	movs	r0, #0
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
}
 8001ea2:	4770      	bx	lr
      return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e7fa      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	e7f8      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
 8001eae:	e7f6      	b.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
 8001eb0:	40023c00 	.word	0x40023c00
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08004308 	.word	0x08004308
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	4605      	mov	r5, r0
 8001ecc:	4688      	mov	r8, r1
 8001ece:	4617      	mov	r7, r2
 8001ed0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ed2:	f7ff fb93 	bl	80015fc <HAL_GetTick>
 8001ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ed8:	1a1b      	subs	r3, r3, r0
 8001eda:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8001ede:	f7ff fb8d 	bl	80015fc <HAL_GetTick>
 8001ee2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001eec:	fb09 f303 	mul.w	r3, r9, r3
 8001ef0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	689c      	ldr	r4, [r3, #8]
 8001ef6:	ea38 0304 	bics.w	r3, r8, r4
 8001efa:	bf0c      	ite	eq
 8001efc:	2401      	moveq	r4, #1
 8001efe:	2400      	movne	r4, #0
 8001f00:	42bc      	cmp	r4, r7
 8001f02:	d040      	beq.n	8001f86 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f04:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001f08:	d0f3      	beq.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f0a:	f7ff fb77 	bl	80015fc <HAL_GetTick>
 8001f0e:	eba0 000a 	sub.w	r0, r0, sl
 8001f12:	4548      	cmp	r0, r9
 8001f14:	d20a      	bcs.n	8001f2c <SPI_WaitFlagStateUntilTimeout+0x68>
 8001f16:	f1b9 0f00 	cmp.w	r9, #0
 8001f1a:	d007      	beq.n	8001f2c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f1c:	9a01      	ldr	r2, [sp, #4]
 8001f1e:	b102      	cbz	r2, 8001f22 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8001f20:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4691      	mov	r9, r2
 8001f2a:	e7e2      	b.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f2c:	682a      	ldr	r2, [r5, #0]
 8001f2e:	6853      	ldr	r3, [r2, #4]
 8001f30:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001f34:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f36:	686b      	ldr	r3, [r5, #4]
 8001f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f3c:	d00b      	beq.n	8001f56 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f44:	d014      	beq.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
 8001f54:	e018      	b.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f56:	68ab      	ldr	r3, [r5, #8]
 8001f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5c:	d002      	beq.n	8001f64 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d1ec      	bne.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8001f64:	682a      	ldr	r2, [r5, #0]
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e7e6      	b.n	8001f3e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8001f70:	682a      	ldr	r2, [r5, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	682a      	ldr	r2, [r5, #0]
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e7df      	b.n	8001f46 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8001f86:	2000      	movs	r0, #0
}
 8001f88:	b002      	add	sp, #8
 8001f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000004 	.word	0x20000004

08001f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b530      	push	{r4, r5, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <SPI_EndRxTxTransaction+0x60>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <SPI_EndRxTxTransaction+0x64>)
 8001fa0:	fba3 3000 	umull	r3, r0, r3, r0
 8001fa4:	0d40      	lsrs	r0, r0, #21
 8001fa6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001faa:	fb05 f000 	mul.w	r0, r5, r0
 8001fae:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb6:	d00b      	beq.n	8001fd0 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fb8:	9b03      	ldr	r3, [sp, #12]
 8001fba:	b1bb      	cbz	r3, 8001fec <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8001fbc:	9b03      	ldr	r3, [sp, #12]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fca:	d1f5      	bne.n	8001fb8 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	e00e      	b.n	8001fee <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ff73 	bl	8001ec4 <SPI_WaitFlagStateUntilTimeout>
 8001fde:	b130      	cbz	r0, 8001fee <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fe0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fe8:	2003      	movs	r0, #3
 8001fea:	e000      	b.n	8001fee <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8001fec:	2000      	movs	r0, #0
}
 8001fee:	b005      	add	sp, #20
 8001ff0:	bd30      	pop	{r4, r5, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	165e9f81 	.word	0x165e9f81

08001ffc <HAL_SPI_Init>:
  if (hspi == NULL)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d05a      	beq.n	80020b6 <HAL_SPI_Init+0xba>
{
 8002000:	b510      	push	{r4, lr}
 8002002:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002004:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002006:	b933      	cbnz	r3, 8002016 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002008:	6843      	ldr	r3, [r0, #4]
 800200a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800200e:	d005      	beq.n	800201c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002010:	2300      	movs	r3, #0
 8002012:	61c3      	str	r3, [r0, #28]
 8002014:	e002      	b.n	800201c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800201a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002020:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002024:	2b00      	cmp	r3, #0
 8002026:	d040      	beq.n	80020aa <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002028:	2302      	movs	r3, #2
 800202a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002036:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002038:	6863      	ldr	r3, [r4, #4]
 800203a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800203e:	68a2      	ldr	r2, [r4, #8]
 8002040:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002044:	4313      	orrs	r3, r2
 8002046:	68e2      	ldr	r2, [r4, #12]
 8002048:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800204c:	4313      	orrs	r3, r2
 800204e:	6922      	ldr	r2, [r4, #16]
 8002050:	f002 0202 	and.w	r2, r2, #2
 8002054:	4313      	orrs	r3, r2
 8002056:	6962      	ldr	r2, [r4, #20]
 8002058:	f002 0201 	and.w	r2, r2, #1
 800205c:	4313      	orrs	r3, r2
 800205e:	69a2      	ldr	r2, [r4, #24]
 8002060:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002064:	4313      	orrs	r3, r2
 8002066:	69e2      	ldr	r2, [r4, #28]
 8002068:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800206c:	4313      	orrs	r3, r2
 800206e:	6a22      	ldr	r2, [r4, #32]
 8002070:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002074:	4313      	orrs	r3, r2
 8002076:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002078:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800207c:	6821      	ldr	r1, [r4, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002082:	8b63      	ldrh	r3, [r4, #26]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800208a:	f002 0210 	and.w	r2, r2, #16
 800208e:	6821      	ldr	r1, [r4, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	69d3      	ldr	r3, [r2, #28]
 8002098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800209c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209e:	2000      	movs	r0, #0
 80020a0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80020a8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80020aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff f9b8 	bl	8001424 <HAL_SPI_MspInit>
 80020b4:	e7b8      	b.n	8002028 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
}
 80020b8:	4770      	bx	lr

080020ba <HAL_SPI_Transmit>:
{
 80020ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020be:	b083      	sub	sp, #12
 80020c0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80020c2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f000 80cc 	beq.w	8002264 <HAL_SPI_Transmit+0x1aa>
 80020cc:	4604      	mov	r4, r0
 80020ce:	4688      	mov	r8, r1
 80020d0:	4691      	mov	r9, r2
 80020d2:	2301      	movs	r3, #1
 80020d4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80020d8:	f7ff fa90 	bl	80015fc <HAL_GetTick>
 80020dc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80020de:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80020e2:	b2f6      	uxtb	r6, r6
 80020e4:	2e01      	cmp	r6, #1
 80020e6:	f040 80aa 	bne.w	800223e <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80020ea:	f1b8 0f00 	cmp.w	r8, #0
 80020ee:	f000 80a7 	beq.w	8002240 <HAL_SPI_Transmit+0x186>
 80020f2:	f1b9 0f00 	cmp.w	r9, #0
 80020f6:	f000 80a3 	beq.w	8002240 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002100:	2300      	movs	r3, #0
 8002102:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002104:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002108:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800210c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002110:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002112:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002114:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002116:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002118:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211a:	68a3      	ldr	r3, [r4, #8]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	d01e      	beq.n	8002160 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f012 0f40 	tst.w	r2, #64	; 0x40
 800212a:	d103      	bne.n	8002134 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002132:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002134:	68e3      	ldr	r3, [r4, #12]
 8002136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800213a:	d01c      	beq.n	8002176 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800213c:	6863      	ldr	r3, [r4, #4]
 800213e:	b113      	cbz	r3, 8002146 <HAL_SPI_Transmit+0x8c>
 8002140:	f1b9 0f01 	cmp.w	r9, #1
 8002144:	d152      	bne.n	80021ec <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002146:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800214e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002150:	3301      	adds	r3, #1
 8002152:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800215e:	e045      	b.n	80021ec <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002168:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e7d5      	b.n	8002122 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	b113      	cbz	r3, 8002180 <HAL_SPI_Transmit+0xc6>
 800217a:	f1b9 0f01 	cmp.w	r9, #1
 800217e:	d116      	bne.n	80021ae <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002180:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800218a:	3302      	adds	r3, #2
 800218c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800218e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002198:	e009      	b.n	80021ae <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800219a:	f7ff fa2f 	bl	80015fc <HAL_GetTick>
 800219e:	1bc0      	subs	r0, r0, r7
 80021a0:	42a8      	cmp	r0, r5
 80021a2:	d302      	bcc.n	80021aa <HAL_SPI_Transmit+0xf0>
 80021a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021a8:	d154      	bne.n	8002254 <HAL_SPI_Transmit+0x19a>
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d054      	beq.n	8002258 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80021ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d02e      	beq.n	8002214 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	f012 0f02 	tst.w	r2, #2
 80021be:	d0ec      	beq.n	800219a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021c2:	8812      	ldrh	r2, [r2, #0]
 80021c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021c8:	3302      	adds	r3, #2
 80021ca:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80021cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80021d6:	e7ea      	b.n	80021ae <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d8:	f7ff fa10 	bl	80015fc <HAL_GetTick>
 80021dc:	1bc0      	subs	r0, r0, r7
 80021de:	42a8      	cmp	r0, r5
 80021e0:	d302      	bcc.n	80021e8 <HAL_SPI_Transmit+0x12e>
 80021e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021e6:	d139      	bne.n	800225c <HAL_SPI_Transmit+0x1a2>
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	d039      	beq.n	8002260 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80021ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b183      	cbz	r3, 8002214 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	f012 0f02 	tst.w	r2, #2
 80021fa:	d0ed      	beq.n	80021d8 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002204:	3301      	adds	r3, #1
 8002206:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002208:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800220a:	b292      	uxth	r2, r2
 800220c:	3a01      	subs	r2, #1
 800220e:	b292      	uxth	r2, r2
 8002210:	86e2      	strh	r2, [r4, #54]	; 0x36
 8002212:	e7eb      	b.n	80021ec <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002214:	463a      	mov	r2, r7
 8002216:	4629      	mov	r1, r5
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff febb 	bl	8001f94 <SPI_EndRxTxTransaction>
 800221e:	b108      	cbz	r0, 8002224 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002220:	2320      	movs	r3, #32
 8002222:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002224:	68a3      	ldr	r3, [r4, #8]
 8002226:	b933      	cbnz	r3, 8002236 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	9201      	str	r2, [sp, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002238:	b913      	cbnz	r3, 8002240 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800223a:	2600      	movs	r6, #0
 800223c:	e000      	b.n	8002240 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800223e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002240:	2301      	movs	r3, #1
 8002242:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002246:	2300      	movs	r3, #0
 8002248:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800224c:	4630      	mov	r0, r6
 800224e:	b003      	add	sp, #12
 8002250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002254:	2603      	movs	r6, #3
 8002256:	e7f3      	b.n	8002240 <HAL_SPI_Transmit+0x186>
 8002258:	2603      	movs	r6, #3
 800225a:	e7f1      	b.n	8002240 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 800225c:	2603      	movs	r6, #3
 800225e:	e7ef      	b.n	8002240 <HAL_SPI_Transmit+0x186>
 8002260:	2603      	movs	r6, #3
 8002262:	e7ed      	b.n	8002240 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8002264:	2602      	movs	r6, #2
 8002266:	e7f1      	b.n	800224c <HAL_SPI_Transmit+0x192>

08002268 <HAL_SPI_TransmitReceive>:
{
 8002268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800226c:	b083      	sub	sp, #12
 800226e:	461f      	mov	r7, r3
 8002270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002272:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	f000 8110 	beq.w	800249c <HAL_SPI_TransmitReceive+0x234>
 800227c:	4604      	mov	r4, r0
 800227e:	4688      	mov	r8, r1
 8002280:	4691      	mov	r9, r2
 8002282:	2301      	movs	r3, #1
 8002284:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002288:	f7ff f9b8 	bl	80015fc <HAL_GetTick>
 800228c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800228e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002292:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002294:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00a      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x48>
 800229a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800229e:	f040 80e3 	bne.w	8002468 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022a2:	68a2      	ldr	r2, [r4, #8]
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	f040 80e9 	bne.w	800247c <HAL_SPI_TransmitReceive+0x214>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	f040 80e8 	bne.w	8002480 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022b0:	f1b8 0f00 	cmp.w	r8, #0
 80022b4:	f000 80e6 	beq.w	8002484 <HAL_SPI_TransmitReceive+0x21c>
 80022b8:	f1b9 0f00 	cmp.w	r9, #0
 80022bc:	f000 80e4 	beq.w	8002488 <HAL_SPI_TransmitReceive+0x220>
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	f000 80e3 	beq.w	800248c <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d002      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022d0:	2305      	movs	r3, #5
 80022d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022da:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022de:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022e0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022e2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022e6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022e8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80022ea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022ec:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022f6:	d103      	bne.n	8002300 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002300:	68e3      	ldr	r3, [r4, #12]
 8002302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002306:	d011      	beq.n	800232c <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	b10b      	cbz	r3, 8002310 <HAL_SPI_TransmitReceive+0xa8>
 800230c:	2f01      	cmp	r7, #1
 800230e:	d10b      	bne.n	8002328 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002310:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800231a:	3301      	adds	r3, #1
 800231c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800231e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002328:	2701      	movs	r7, #1
 800232a:	e06b      	b.n	8002404 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	b10b      	cbz	r3, 8002334 <HAL_SPI_TransmitReceive+0xcc>
 8002330:	2f01      	cmp	r7, #1
 8002332:	d10b      	bne.n	800234c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800233e:	3302      	adds	r3, #2
 8002340:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002342:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29b      	uxth	r3, r3
 800234a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800234c:	2701      	movs	r7, #1
 800234e:	e01c      	b.n	800238a <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	f012 0f01 	tst.w	r2, #1
 8002358:	d00e      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x110>
 800235a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800235c:	b292      	uxth	r2, r2
 800235e:	b15a      	cbz	r2, 8002378 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002364:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002368:	3302      	adds	r3, #2
 800236a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800236c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29b      	uxth	r3, r3
 8002374:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002376:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002378:	f7ff f940 	bl	80015fc <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	42a8      	cmp	r0, r5
 8002380:	d303      	bcc.n	800238a <HAL_SPI_TransmitReceive+0x122>
 8002382:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002386:	f040 8083 	bne.w	8002490 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	b91b      	cbnz	r3, 8002398 <HAL_SPI_TransmitReceive+0x130>
 8002390:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d053      	beq.n	8002440 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	f012 0f02 	tst.w	r2, #2
 80023a0:	d0d6      	beq.n	8002350 <HAL_SPI_TransmitReceive+0xe8>
 80023a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80023a4:	b292      	uxth	r2, r2
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d0d2      	beq.n	8002350 <HAL_SPI_TransmitReceive+0xe8>
 80023aa:	2f00      	cmp	r7, #0
 80023ac:	d0d0      	beq.n	8002350 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023b0:	8812      	ldrh	r2, [r2, #0]
 80023b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023b6:	3302      	adds	r3, #2
 80023b8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80023ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80023c4:	2700      	movs	r7, #0
 80023c6:	e7c3      	b.n	8002350 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	f012 0f01 	tst.w	r2, #1
 80023d0:	d00e      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x188>
 80023d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023d4:	b292      	uxth	r2, r2
 80023d6:	b15a      	cbz	r2, 80023f0 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023e0:	3301      	adds	r3, #1
 80023e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80023e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023ee:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023f0:	f7ff f904 	bl	80015fc <HAL_GetTick>
 80023f4:	1b83      	subs	r3, r0, r6
 80023f6:	42ab      	cmp	r3, r5
 80023f8:	d302      	bcc.n	8002400 <HAL_SPI_TransmitReceive+0x198>
 80023fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023fe:	d149      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x22c>
 8002400:	2d00      	cmp	r5, #0
 8002402:	d049      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002404:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002406:	b29b      	uxth	r3, r3
 8002408:	b913      	cbnz	r3, 8002410 <HAL_SPI_TransmitReceive+0x1a8>
 800240a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	b1bb      	cbz	r3, 8002440 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	f012 0f02 	tst.w	r2, #2
 8002418:	d0d6      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x160>
 800241a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800241c:	b292      	uxth	r2, r2
 800241e:	2a00      	cmp	r2, #0
 8002420:	d0d2      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x160>
 8002422:	2f00      	cmp	r7, #0
 8002424:	d0d0      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800242c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800242e:	3301      	adds	r3, #1
 8002430:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002432:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29b      	uxth	r3, r3
 800243a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800243c:	2700      	movs	r7, #0
 800243e:	e7c3      	b.n	80023c8 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002440:	4632      	mov	r2, r6
 8002442:	4629      	mov	r1, r5
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fda5 	bl	8001f94 <SPI_EndRxTxTransaction>
 800244a:	b948      	cbnz	r0, 8002460 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800244c:	68a3      	ldr	r3, [r4, #8]
 800244e:	b963      	cbnz	r3, 800246a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
 800245e:	e004      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002460:	2320      	movs	r3, #32
 8002462:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002464:	2001      	movs	r0, #1
    goto error;
 8002466:	e000      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8002468:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800246a:	2301      	movs	r3, #1
 800246c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002470:	2300      	movs	r3, #0
 8002472:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002476:	b003      	add	sp, #12
 8002478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800247c:	2002      	movs	r0, #2
 800247e:	e7f4      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
 8002480:	2002      	movs	r0, #2
 8002482:	e7f2      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8002484:	2001      	movs	r0, #1
 8002486:	e7f0      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
 8002488:	2001      	movs	r0, #1
 800248a:	e7ee      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
 800248c:	2001      	movs	r0, #1
 800248e:	e7ec      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002490:	2003      	movs	r0, #3
 8002492:	e7ea      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
 8002496:	e7e8      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
 8002498:	2003      	movs	r0, #3
 800249a:	e7e6      	b.n	800246a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 800249c:	2002      	movs	r0, #2
 800249e:	e7ea      	b.n	8002476 <HAL_SPI_TransmitReceive+0x20e>

080024a0 <HAL_SPI_GetState>:
  return hspi->State;
 80024a0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80024a4:	4770      	bx	lr
	...

080024a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80024a8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80024aa:	4903      	ldr	r1, [pc, #12]	; (80024b8 <MX_FATFS_Init+0x10>)
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <MX_FATFS_Init+0x14>)
 80024ae:	f001 fe65 	bl	800417c <FATFS_LinkDriver>
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <MX_FATFS_Init+0x18>)
 80024b4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80024b6:	bd08      	pop	{r3, pc}
 80024b8:	2000378c 	.word	0x2000378c
 80024bc:	20000010 	.word	0x20000010
 80024c0:	20003790 	.word	0x20003790

080024c4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80024c4:	2000      	movs	r0, #0
 80024c6:	4770      	bx	lr

080024c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80024c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80024ca:	f7fe fc3b 	bl	8000d44 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80024ce:	b2c0      	uxtb	r0, r0
 80024d0:	bd08      	pop	{r3, pc}

080024d2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80024d2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80024d4:	f7fe fcf6 	bl	8000ec4 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80024d8:	b2c0      	uxtb	r0, r0
 80024da:	bd08      	pop	{r3, pc}

080024dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80024dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80024de:	f7fe fcfb 	bl	8000ed8 <SD_disk_read>
  /* USER CODE END READ */
}
 80024e2:	b2c0      	uxtb	r0, r0
 80024e4:	bd08      	pop	{r3, pc}

080024e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80024e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80024e8:	f7fe fd42 	bl	8000f70 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80024ec:	b2c0      	uxtb	r0, r0
 80024ee:	bd08      	pop	{r3, pc}

080024f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80024f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
   return SD_disk_ioctl(pdrv, cmd, buff);
 80024f2:	f7fe fd9f 	bl	8001034 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80024f6:	b2c0      	uxtb	r0, r0
 80024f8:	bd08      	pop	{r3, pc}
	...

080024fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80024fc:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <disk_status+0x14>)
 8002500:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002504:	6852      	ldr	r2, [r2, #4]
 8002506:	6852      	ldr	r2, [r2, #4]
 8002508:	4403      	add	r3, r0
 800250a:	7a18      	ldrb	r0, [r3, #8]
 800250c:	4790      	blx	r2
  return stat;
}
 800250e:	bd08      	pop	{r3, pc}
 8002510:	2000026c 	.word	0x2000026c

08002514 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002514:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <disk_initialize+0x24>)
 8002518:	5c1b      	ldrb	r3, [r3, r0]
 800251a:	b953      	cbnz	r3, 8002532 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <disk_initialize+0x24>)
 800251e:	2201      	movs	r2, #1
 8002520:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002522:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002526:	6852      	ldr	r2, [r2, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	4418      	add	r0, r3
 800252c:	7a00      	ldrb	r0, [r0, #8]
 800252e:	4790      	blx	r2
  }
  return stat;
}
 8002530:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8002532:	2000      	movs	r0, #0
 8002534:	e7fc      	b.n	8002530 <disk_initialize+0x1c>
 8002536:	bf00      	nop
 8002538:	2000026c 	.word	0x2000026c

0800253c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800253c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800253e:	4c04      	ldr	r4, [pc, #16]	; (8002550 <disk_read+0x14>)
 8002540:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002544:	686d      	ldr	r5, [r5, #4]
 8002546:	68ad      	ldr	r5, [r5, #8]
 8002548:	4404      	add	r4, r0
 800254a:	7a20      	ldrb	r0, [r4, #8]
 800254c:	47a8      	blx	r5
  return res;
}
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	2000026c 	.word	0x2000026c

08002554 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002554:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002556:	4c04      	ldr	r4, [pc, #16]	; (8002568 <disk_write+0x14>)
 8002558:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800255c:	686d      	ldr	r5, [r5, #4]
 800255e:	68ed      	ldr	r5, [r5, #12]
 8002560:	4404      	add	r4, r0
 8002562:	7a20      	ldrb	r0, [r4, #8]
 8002564:	47a8      	blx	r5
  return res;
}
 8002566:	bd38      	pop	{r3, r4, r5, pc}
 8002568:	2000026c 	.word	0x2000026c

0800256c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800256c:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <disk_ioctl+0x14>)
 8002570:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002574:	6864      	ldr	r4, [r4, #4]
 8002576:	6924      	ldr	r4, [r4, #16]
 8002578:	4403      	add	r3, r0
 800257a:	7a18      	ldrb	r0, [r3, #8]
 800257c:	47a0      	blx	r4
  return res;
}
 800257e:	bd10      	pop	{r4, pc}
 8002580:	2000026c 	.word	0x2000026c

08002584 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8002584:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8002586:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002588:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800258c:	4770      	bx	lr

0800258e <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800258e:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8002590:	7883      	ldrb	r3, [r0, #2]
 8002592:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8002596:	7843      	ldrb	r3, [r0, #1]
 8002598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800259c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800259e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80025a2:	4770      	bx	lr

080025a4 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80025a4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80025a6:	0a09      	lsrs	r1, r1, #8
 80025a8:	7041      	strb	r1, [r0, #1]
}
 80025aa:	4770      	bx	lr

080025ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80025ac:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80025ae:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80025b2:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80025b4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80025b8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80025ba:	0e09      	lsrs	r1, r1, #24
 80025bc:	70c1      	strb	r1, [r0, #3]
}
 80025be:	4770      	bx	lr

080025c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80025c0:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80025c2:	4614      	mov	r4, r2
 80025c4:	b12a      	cbz	r2, 80025d2 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 80025c6:	780a      	ldrb	r2, [r1, #0]
 80025c8:	3101      	adds	r1, #1
 80025ca:	7002      	strb	r2, [r0, #0]
 80025cc:	3001      	adds	r0, #1
		} while (--cnt);
 80025ce:	3c01      	subs	r4, #1
 80025d0:	d1f9      	bne.n	80025c6 <mem_cpy+0x6>
	}
}
 80025d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80025d8:	7001      	strb	r1, [r0, #0]
 80025da:	3001      	adds	r0, #1
	} while (--cnt);
 80025dc:	3a01      	subs	r2, #1
 80025de:	d1fb      	bne.n	80025d8 <mem_set>
}
 80025e0:	4770      	bx	lr

080025e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80025e2:	b410      	push	{r4}
 80025e4:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80025e6:	7820      	ldrb	r0, [r4, #0]
 80025e8:	3401      	adds	r4, #1
 80025ea:	780b      	ldrb	r3, [r1, #0]
 80025ec:	3101      	adds	r1, #1
 80025ee:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80025f0:	3a01      	subs	r2, #1
 80025f2:	d001      	beq.n	80025f8 <mem_cmp+0x16>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d0f6      	beq.n	80025e6 <mem_cmp+0x4>

	return r;
}
 80025f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80025fe:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8002600:	7818      	ldrb	r0, [r3, #0]
 8002602:	b118      	cbz	r0, 800260c <chk_chr+0xe>
 8002604:	4288      	cmp	r0, r1
 8002606:	d001      	beq.n	800260c <chk_chr+0xe>
 8002608:	3301      	adds	r3, #1
 800260a:	e7f9      	b.n	8002600 <chk_chr+0x2>
	return *str;
}
 800260c:	4770      	bx	lr
	...

08002610 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002610:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002612:	2500      	movs	r5, #0
 8002614:	462b      	mov	r3, r5
 8002616:	e001      	b.n	800261c <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002618:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800261a:	3301      	adds	r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d815      	bhi.n	800264c <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8002620:	011a      	lsls	r2, r3, #4
 8002622:	4c17      	ldr	r4, [pc, #92]	; (8002680 <chk_lock+0x70>)
 8002624:	58a2      	ldr	r2, [r4, r2]
 8002626:	2a00      	cmp	r2, #0
 8002628:	d0f6      	beq.n	8002618 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800262a:	6804      	ldr	r4, [r0, #0]
 800262c:	42a2      	cmp	r2, r4
 800262e:	d1f4      	bne.n	800261a <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <chk_lock+0x70>)
 8002632:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002636:	6854      	ldr	r4, [r2, #4]
 8002638:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800263a:	4294      	cmp	r4, r2
 800263c:	d1ed      	bne.n	800261a <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <chk_lock+0x70>)
 8002640:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002644:	6894      	ldr	r4, [r2, #8]
 8002646:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8002648:	4294      	cmp	r4, r2
 800264a:	d1e6      	bne.n	800261a <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800264c:	2b02      	cmp	r3, #2
 800264e:	d00a      	beq.n	8002666 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002650:	b9a1      	cbnz	r1, 800267c <chk_lock+0x6c>
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <chk_lock+0x70>)
 8002654:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002658:	899b      	ldrh	r3, [r3, #12]
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	d00b      	beq.n	8002678 <chk_lock+0x68>
 8002660:	2000      	movs	r0, #0
}
 8002662:	bc30      	pop	{r4, r5}
 8002664:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002666:	b92d      	cbnz	r5, 8002674 <chk_lock+0x64>
 8002668:	2902      	cmp	r1, #2
 800266a:	d001      	beq.n	8002670 <chk_lock+0x60>
 800266c:	2012      	movs	r0, #18
 800266e:	e7f8      	b.n	8002662 <chk_lock+0x52>
 8002670:	2000      	movs	r0, #0
 8002672:	e7f6      	b.n	8002662 <chk_lock+0x52>
 8002674:	2000      	movs	r0, #0
 8002676:	e7f4      	b.n	8002662 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002678:	2010      	movs	r0, #16
 800267a:	e7f2      	b.n	8002662 <chk_lock+0x52>
 800267c:	2010      	movs	r0, #16
 800267e:	e7f0      	b.n	8002662 <chk_lock+0x52>
 8002680:	20000048 	.word	0x20000048

08002684 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002684:	2000      	movs	r0, #0
 8002686:	e000      	b.n	800268a <enq_lock+0x6>
 8002688:	3001      	adds	r0, #1
 800268a:	2801      	cmp	r0, #1
 800268c:	d804      	bhi.n	8002698 <enq_lock+0x14>
 800268e:	0103      	lsls	r3, r0, #4
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <enq_lock+0x1c>)
 8002692:	58d3      	ldr	r3, [r2, r3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f7      	bne.n	8002688 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8002698:	3802      	subs	r0, #2
 800269a:	bf18      	it	ne
 800269c:	2001      	movne	r0, #1
 800269e:	4770      	bx	lr
 80026a0:	20000048 	.word	0x20000048

080026a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80026a4:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <inc_lock+0x8>
 80026aa:	3301      	adds	r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d813      	bhi.n	80026d8 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80026b0:	011a      	lsls	r2, r3, #4
 80026b2:	4c24      	ldr	r4, [pc, #144]	; (8002744 <inc_lock+0xa0>)
 80026b4:	58a4      	ldr	r4, [r4, r2]
 80026b6:	6802      	ldr	r2, [r0, #0]
 80026b8:	4294      	cmp	r4, r2
 80026ba:	d1f6      	bne.n	80026aa <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <inc_lock+0xa0>)
 80026be:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80026c2:	6854      	ldr	r4, [r2, #4]
 80026c4:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80026c6:	4294      	cmp	r4, r2
 80026c8:	d1ef      	bne.n	80026aa <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <inc_lock+0xa0>)
 80026cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80026d0:	6894      	ldr	r4, [r2, #8]
 80026d2:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 80026d4:	4294      	cmp	r4, r2
 80026d6:	d1e8      	bne.n	80026aa <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d013      	beq.n	8002704 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80026dc:	b121      	cbz	r1, 80026e8 <inc_lock+0x44>
 80026de:	4a19      	ldr	r2, [pc, #100]	; (8002744 <inc_lock+0xa0>)
 80026e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80026e4:	8992      	ldrh	r2, [r2, #12]
 80026e6:	bb52      	cbnz	r2, 800273e <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80026e8:	bb21      	cbnz	r1, 8002734 <inc_lock+0x90>
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <inc_lock+0xa0>)
 80026ec:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80026f0:	8991      	ldrh	r1, [r2, #12]
 80026f2:	3101      	adds	r1, #1
 80026f4:	b289      	uxth	r1, r1
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <inc_lock+0xa0>)
 80026f8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80026fc:	8191      	strh	r1, [r2, #12]

	return i + 1;
 80026fe:	1c58      	adds	r0, r3, #1
}
 8002700:	bc70      	pop	{r4, r5, r6}
 8002702:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002704:	2300      	movs	r3, #0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d805      	bhi.n	8002716 <inc_lock+0x72>
 800270a:	011a      	lsls	r2, r3, #4
 800270c:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <inc_lock+0xa0>)
 800270e:	58a2      	ldr	r2, [r4, r2]
 8002710:	b10a      	cbz	r2, 8002716 <inc_lock+0x72>
 8002712:	3301      	adds	r3, #1
 8002714:	e7f7      	b.n	8002706 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002716:	2b02      	cmp	r3, #2
 8002718:	d00f      	beq.n	800273a <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800271a:	6806      	ldr	r6, [r0, #0]
 800271c:	4d09      	ldr	r5, [pc, #36]	; (8002744 <inc_lock+0xa0>)
 800271e:	011c      	lsls	r4, r3, #4
 8002720:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8002724:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8002726:	6884      	ldr	r4, [r0, #8]
 8002728:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800272a:	6940      	ldr	r0, [r0, #20]
 800272c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800272e:	2000      	movs	r0, #0
 8002730:	8190      	strh	r0, [r2, #12]
 8002732:	e7d3      	b.n	80026dc <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002738:	e7dd      	b.n	80026f6 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800273a:	2000      	movs	r0, #0
 800273c:	e7e0      	b.n	8002700 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800273e:	2000      	movs	r0, #0
 8002740:	e7de      	b.n	8002700 <inc_lock+0x5c>
 8002742:	bf00      	nop
 8002744:	20000048 	.word	0x20000048

08002748 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002748:	3801      	subs	r0, #1
 800274a:	2801      	cmp	r0, #1
 800274c:	d815      	bhi.n	800277a <dec_lock+0x32>
		n = Files[i].ctr;
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <dec_lock+0x3c>)
 8002750:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002754:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275a:	d003      	beq.n	8002764 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800275c:	b11b      	cbz	r3, 8002766 <dec_lock+0x1e>
 800275e:	3b01      	subs	r3, #1
 8002760:	b29b      	uxth	r3, r3
 8002762:	e000      	b.n	8002766 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002764:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <dec_lock+0x3c>)
 8002768:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800276c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800276e:	b933      	cbnz	r3, 800277e <dec_lock+0x36>
 8002770:	0103      	lsls	r3, r0, #4
 8002772:	2000      	movs	r0, #0
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <dec_lock+0x3c>)
 8002776:	50d0      	str	r0, [r2, r3]
 8002778:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800277a:	2002      	movs	r0, #2
 800277c:	4770      	bx	lr
		res = FR_OK;
 800277e:	2000      	movs	r0, #0
	}
	return res;
}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000048 	.word	0x20000048

08002788 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	e003      	b.n	8002794 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 800278c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002790:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8002792:	3301      	adds	r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d811      	bhi.n	80027bc <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002798:	011a      	lsls	r2, r3, #4
 800279a:	4909      	ldr	r1, [pc, #36]	; (80027c0 <clear_lock+0x38>)
 800279c:	588a      	ldr	r2, [r1, r2]
 800279e:	4282      	cmp	r2, r0
 80027a0:	d1f7      	bne.n	8002792 <clear_lock+0xa>
{
 80027a2:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	2400      	movs	r4, #0
 80027a8:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80027aa:	3301      	adds	r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d8ed      	bhi.n	800278c <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	4903      	ldr	r1, [pc, #12]	; (80027c0 <clear_lock+0x38>)
 80027b4:	588a      	ldr	r2, [r1, r2]
 80027b6:	4282      	cmp	r2, r0
 80027b8:	d1f7      	bne.n	80027aa <clear_lock+0x22>
 80027ba:	e7f3      	b.n	80027a4 <clear_lock+0x1c>
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000048 	.word	0x20000048

080027c4 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80027c4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80027c6:	69c3      	ldr	r3, [r0, #28]
 80027c8:	3b02      	subs	r3, #2
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d904      	bls.n	80027d8 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80027ce:	8943      	ldrh	r3, [r0, #10]
 80027d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80027d2:	fb01 0003 	mla	r0, r1, r3, r0
 80027d6:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80027d8:	2000      	movs	r0, #0
}
 80027da:	4770      	bx	lr

080027dc <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80027dc:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80027de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027e0:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80027e2:	8990      	ldrh	r0, [r2, #12]
 80027e4:	fbb1 f1f0 	udiv	r1, r1, r0
 80027e8:	8952      	ldrh	r2, [r2, #10]
 80027ea:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80027ee:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80027f0:	b130      	cbz	r0, 8002800 <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 80027f2:	4281      	cmp	r1, r0
 80027f4:	d302      	bcc.n	80027fc <clmt_clust+0x20>
		cl -= ncl; tbl++;		/* Next fragment */
 80027f6:	1a09      	subs	r1, r1, r0
 80027f8:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80027fa:	e7f8      	b.n	80027ee <clmt_clust+0x12>
	}
	return cl + *tbl;	/* Return the cluster number */
 80027fc:	6858      	ldr	r0, [r3, #4]
 80027fe:	4408      	add	r0, r1
}
 8002800:	4770      	bx	lr

08002802 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	4606      	mov	r6, r0
 8002806:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002808:	f101 001a 	add.w	r0, r1, #26
 800280c:	f7ff feba 	bl	8002584 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8002810:	7833      	ldrb	r3, [r6, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d000      	beq.n	8002818 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8002816:	bd70      	pop	{r4, r5, r6, pc}
 8002818:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800281a:	f105 0014 	add.w	r0, r5, #20
 800281e:	f7ff feb1 	bl	8002584 <ld_word>
 8002822:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8002826:	e7f6      	b.n	8002816 <ld_clust+0x14>

08002828 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	4606      	mov	r6, r0
 800282c:	460c      	mov	r4, r1
 800282e:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002830:	b291      	uxth	r1, r2
 8002832:	f104 001a 	add.w	r0, r4, #26
 8002836:	f7ff feb5 	bl	80025a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800283a:	7833      	ldrb	r3, [r6, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d000      	beq.n	8002842 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002840:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002842:	0c29      	lsrs	r1, r5, #16
 8002844:	f104 0014 	add.w	r0, r4, #20
 8002848:	f7ff feac 	bl	80025a4 <st_word>
}
 800284c:	e7f8      	b.n	8002840 <st_clust+0x18>
	...

08002850 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8002850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002854:	4680      	mov	r8, r0
 8002856:	460f      	mov	r7, r1
 8002858:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800285a:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800285c:	230f      	movs	r3, #15
 800285e:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8002860:	2400      	movs	r4, #0
 8002862:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8002864:	4621      	mov	r1, r4
 8002866:	f107 001a 	add.w	r0, r7, #26
 800286a:	f7ff fe9b 	bl	80025a4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800286e:	f109 36ff 	add.w	r6, r9, #4294967295
 8002872:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002876:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800287a:	4625      	mov	r5, r4
 800287c:	e002      	b.n	8002884 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800287e:	3401      	adds	r4, #1
 8002880:	2c0c      	cmp	r4, #12
 8002882:	d811      	bhi.n	80028a8 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8002884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002888:	429d      	cmp	r5, r3
 800288a:	d002      	beq.n	8002892 <put_lfn+0x42>
 800288c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8002890:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <put_lfn+0x74>)
 8002894:	5d18      	ldrb	r0, [r3, r4]
 8002896:	4629      	mov	r1, r5
 8002898:	4438      	add	r0, r7
 800289a:	f7ff fe83 	bl	80025a4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800289e:	2d00      	cmp	r5, #0
 80028a0:	d1ed      	bne.n	800287e <put_lfn+0x2e>
 80028a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80028a6:	e7ea      	b.n	800287e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80028a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ac:	429d      	cmp	r5, r3
 80028ae:	d002      	beq.n	80028b6 <put_lfn+0x66>
 80028b0:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 80028b4:	b90b      	cbnz	r3, 80028ba <put_lfn+0x6a>
 80028b6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80028ba:	f887 9000 	strb.w	r9, [r7]
}
 80028be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028c2:	bf00      	nop
 80028c4:	080043ac 	.word	0x080043ac

080028c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b083      	sub	sp, #12
 80028cc:	4606      	mov	r6, r0
 80028ce:	4617      	mov	r7, r2
 80028d0:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80028d2:	220b      	movs	r2, #11
 80028d4:	f7ff fe74 	bl	80025c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80028d8:	2c05      	cmp	r4, #5
 80028da:	d811      	bhi.n	8002900 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80028dc:	2307      	movs	r3, #7
 80028de:	e01f      	b.n	8002920 <gen_numname+0x58>
 80028e0:	3101      	adds	r1, #1
 80028e2:	290f      	cmp	r1, #15
 80028e4:	d80c      	bhi.n	8002900 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80028e6:	f003 0501 	and.w	r5, r3, #1
 80028ea:	eb05 0444 	add.w	r4, r5, r4, lsl #1
				wc >>= 1;
 80028ee:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80028f0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80028f4:	d0f4      	beq.n	80028e0 <gen_numname+0x18>
 80028f6:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80028fa:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80028fe:	e7ef      	b.n	80028e0 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8002900:	883b      	ldrh	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ea      	beq.n	80028dc <gen_numname+0x14>
			wc = *lfn++;
 8002906:	3702      	adds	r7, #2
			for (i = 0; i < 16; i++) {
 8002908:	2100      	movs	r1, #0
 800290a:	e7ea      	b.n	80028e2 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	a802      	add	r0, sp, #8
 8002910:	4403      	add	r3, r0
 8002912:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 8002916:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8002918:	2c0f      	cmp	r4, #15
 800291a:	d90a      	bls.n	8002932 <gen_numname+0x6a>
		ns[i--] = c;
 800291c:	4613      	mov	r3, r2
		seq /= 16;
 800291e:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8002920:	f004 020f 	and.w	r2, r4, #15
 8002924:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 8002928:	2939      	cmp	r1, #57	; 0x39
 800292a:	d9ef      	bls.n	800290c <gen_numname+0x44>
 800292c:	f102 0137 	add.w	r1, r2, #55	; 0x37
 8002930:	e7ec      	b.n	800290c <gen_numname+0x44>
	ns[i] = '~';
 8002932:	217e      	movs	r1, #126	; 0x7e
 8002934:	4603      	mov	r3, r0
 8002936:	4413      	add	r3, r2
 8002938:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <gen_numname+0x7a>
 8002940:	3301      	adds	r3, #1
 8002942:	4293      	cmp	r3, r2
 8002944:	d209      	bcs.n	800295a <gen_numname+0x92>
 8002946:	5cf1      	ldrb	r1, [r6, r3]
 8002948:	2920      	cmp	r1, #32
 800294a:	d1f9      	bne.n	8002940 <gen_numname+0x78>
 800294c:	e005      	b.n	800295a <gen_numname+0x92>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800294e:	2020      	movs	r0, #32
 8002950:	1c59      	adds	r1, r3, #1
 8002952:	54f0      	strb	r0, [r6, r3]
	} while (j < 8);
 8002954:	2907      	cmp	r1, #7
 8002956:	d808      	bhi.n	800296a <gen_numname+0xa2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002958:	460b      	mov	r3, r1
 800295a:	2a07      	cmp	r2, #7
 800295c:	d8f7      	bhi.n	800294e <gen_numname+0x86>
 800295e:	a902      	add	r1, sp, #8
 8002960:	4411      	add	r1, r2
 8002962:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8002966:	3201      	adds	r2, #1
 8002968:	e7f2      	b.n	8002950 <gen_numname+0x88>
}
 800296a:	b003      	add	sp, #12
 800296c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800296e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800296e:	b410      	push	{r4}
 8002970:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8002972:	240b      	movs	r4, #11
	BYTE sum = 0;
 8002974:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002976:	01c3      	lsls	r3, r0, #7
 8002978:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800297c:	7808      	ldrb	r0, [r1, #0]
 800297e:	3101      	adds	r1, #1
 8002980:	fa50 f383 	uxtab	r3, r0, r3
 8002984:	b2d8      	uxtb	r0, r3
	} while (--n);
 8002986:	3c01      	subs	r4, #1
 8002988:	d1f5      	bne.n	8002976 <sum_sfn+0x8>
	return sum;
}
 800298a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800298e:	4770      	bx	lr

08002990 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002990:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002992:	6800      	ldr	r0, [r0, #0]
 8002994:	b108      	cbz	r0, 800299a <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002996:	4602      	mov	r2, r0
 8002998:	e003      	b.n	80029a2 <get_ldnumber+0x12>
	int vol = -1;
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
 800299e:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80029a0:	3201      	adds	r2, #1
 80029a2:	7813      	ldrb	r3, [r2, #0]
 80029a4:	2b1f      	cmp	r3, #31
 80029a6:	d901      	bls.n	80029ac <get_ldnumber+0x1c>
 80029a8:	2b3a      	cmp	r3, #58	; 0x3a
 80029aa:	d1f9      	bne.n	80029a0 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80029ac:	2b3a      	cmp	r3, #58	; 0x3a
 80029ae:	d001      	beq.n	80029b4 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80029b0:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80029b2:	4770      	bx	lr
{
 80029b4:	b410      	push	{r4}
			i = *tp++ - '0';
 80029b6:	4603      	mov	r3, r0
 80029b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80029bc:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80029be:	2809      	cmp	r0, #9
 80029c0:	d808      	bhi.n	80029d4 <get_ldnumber+0x44>
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d002      	beq.n	80029cc <get_ldnumber+0x3c>
	int vol = -1;
 80029c6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ca:	e005      	b.n	80029d8 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80029cc:	b938      	cbnz	r0, 80029de <get_ldnumber+0x4e>
					*path = ++tt;
 80029ce:	3201      	adds	r2, #1
 80029d0:	600a      	str	r2, [r1, #0]
 80029d2:	e001      	b.n	80029d8 <get_ldnumber+0x48>
	int vol = -1;
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80029d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029dc:	4770      	bx	lr
	int vol = -1;
 80029de:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 80029e2:	e7f9      	b.n	80029d8 <get_ldnumber+0x48>

080029e4 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 80029e4:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	6043      	str	r3, [r0, #4]
 80029ea:	6083      	str	r3, [r0, #8]
}
 80029ec:	4770      	bx	lr

080029ee <validate>:
{
 80029ee:	b538      	push	{r3, r4, r5, lr}
 80029f0:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80029f2:	4604      	mov	r4, r0
 80029f4:	b198      	cbz	r0, 8002a1e <validate+0x30>
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	b19b      	cbz	r3, 8002a22 <validate+0x34>
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	b1a2      	cbz	r2, 8002a28 <validate+0x3a>
 80029fe:	8881      	ldrh	r1, [r0, #4]
 8002a00:	88da      	ldrh	r2, [r3, #6]
 8002a02:	4291      	cmp	r1, r2
 8002a04:	d003      	beq.n	8002a0e <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8002a06:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a08:	2400      	movs	r4, #0
 8002a0a:	602c      	str	r4, [r5, #0]
}
 8002a0c:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002a0e:	7858      	ldrb	r0, [r3, #1]
 8002a10:	f7ff fd74 	bl	80024fc <disk_status>
 8002a14:	f010 0001 	ands.w	r0, r0, #1
 8002a18:	d109      	bne.n	8002a2e <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a1a:	6824      	ldr	r4, [r4, #0]
 8002a1c:	e7f5      	b.n	8002a0a <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002a1e:	2009      	movs	r0, #9
 8002a20:	e7f3      	b.n	8002a0a <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a22:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8002a24:	2009      	movs	r0, #9
 8002a26:	e7f0      	b.n	8002a0a <validate+0x1c>
 8002a28:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	e7ed      	b.n	8002a0a <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002a2e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a30:	2400      	movs	r4, #0
 8002a32:	e7ea      	b.n	8002a0a <validate+0x1c>

08002a34 <sync_window>:
{
 8002a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002a38:	78c5      	ldrb	r5, [r0, #3]
 8002a3a:	b915      	cbnz	r5, 8002a42 <sync_window+0xe>
}
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a42:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002a44:	6b47      	ldr	r7, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002a46:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	463a      	mov	r2, r7
 8002a4e:	4641      	mov	r1, r8
 8002a50:	7840      	ldrb	r0, [r0, #1]
 8002a52:	f7ff fd7f 	bl	8002554 <disk_write>
 8002a56:	4605      	mov	r5, r0
 8002a58:	b998      	cbnz	r0, 8002a82 <sync_window+0x4e>
			fs->wflag = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a60:	1afb      	subs	r3, r7, r3
 8002a62:	6a22      	ldr	r2, [r4, #32]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d2e9      	bcs.n	8002a3c <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a68:	78a6      	ldrb	r6, [r4, #2]
 8002a6a:	2e01      	cmp	r6, #1
 8002a6c:	d9e6      	bls.n	8002a3c <sync_window+0x8>
					wsect += fs->fsize;
 8002a6e:	6a23      	ldr	r3, [r4, #32]
 8002a70:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002a72:	2301      	movs	r3, #1
 8002a74:	463a      	mov	r2, r7
 8002a76:	4641      	mov	r1, r8
 8002a78:	7860      	ldrb	r0, [r4, #1]
 8002a7a:	f7ff fd6b 	bl	8002554 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a7e:	3e01      	subs	r6, #1
 8002a80:	e7f3      	b.n	8002a6a <sync_window+0x36>
			res = FR_DISK_ERR;
 8002a82:	2501      	movs	r5, #1
 8002a84:	e7da      	b.n	8002a3c <sync_window+0x8>

08002a86 <move_window>:
{
 8002a86:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d102      	bne.n	8002a94 <move_window+0xe>
	FRESULT res = FR_OK;
 8002a8e:	2600      	movs	r6, #0
}
 8002a90:	4630      	mov	r0, r6
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8002a98:	f7ff ffcc 	bl	8002a34 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d1f6      	bne.n	8002a90 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8002aaa:	7860      	ldrb	r0, [r4, #1]
 8002aac:	f7ff fd46 	bl	800253c <disk_read>
 8002ab0:	b110      	cbz	r0, 8002ab8 <move_window+0x32>
				res = FR_DISK_ERR;
 8002ab2:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002ab4:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8002ab8:	6365      	str	r5, [r4, #52]	; 0x34
 8002aba:	e7e9      	b.n	8002a90 <move_window+0xa>

08002abc <check_fs>:
{
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	70c3      	strb	r3, [r0, #3]
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac8:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002aca:	f7ff ffdc 	bl	8002a86 <move_window>
 8002ace:	bb30      	cbnz	r0, 8002b1e <check_fs+0x62>
 8002ad0:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002ad2:	f204 2036 	addw	r0, r4, #566	; 0x236
 8002ad6:	f7ff fd55 	bl	8002584 <ld_word>
 8002ada:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002ade:	4298      	cmp	r0, r3
 8002ae0:	d11f      	bne.n	8002b22 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002ae2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002ae6:	2be9      	cmp	r3, #233	; 0xe9
 8002ae8:	d007      	beq.n	8002afa <check_fs+0x3e>
 8002aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <check_fs+0x6c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d001      	beq.n	8002afa <check_fs+0x3e>
	return 2;
 8002af6:	2502      	movs	r5, #2
 8002af8:	e014      	b.n	8002b24 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002afa:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8002afe:	f7ff fd46 	bl	800258e <ld_dword>
 8002b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <check_fs+0x70>)
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	d00b      	beq.n	8002b24 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002b0c:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8002b10:	f7ff fd3d 	bl	800258e <ld_dword>
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <check_fs+0x74>)
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d004      	beq.n	8002b24 <check_fs+0x68>
	return 2;
 8002b1a:	2502      	movs	r5, #2
 8002b1c:	e002      	b.n	8002b24 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002b1e:	2504      	movs	r5, #4
 8002b20:	e000      	b.n	8002b24 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002b22:	2503      	movs	r5, #3
}
 8002b24:	4628      	mov	r0, r5
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	009000eb 	.word	0x009000eb
 8002b2c:	00544146 	.word	0x00544146
 8002b30:	33544146 	.word	0x33544146

08002b34 <find_volume>:
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	460d      	mov	r5, r1
 8002b3c:	4616      	mov	r6, r2
	*rfs = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8002b42:	f7ff ff25 	bl	8002990 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002b46:	1e07      	subs	r7, r0, #0
 8002b48:	f2c0 8168 	blt.w	8002e1c <find_volume+0x2e8>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002b4c:	4bc7      	ldr	r3, [pc, #796]	; (8002e6c <find_volume+0x338>)
 8002b4e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002b52:	2c00      	cmp	r4, #0
 8002b54:	f000 8167 	beq.w	8002e26 <find_volume+0x2f2>
	*rfs = fs;							/* Return pointer to the file system object */
 8002b58:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002b5a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002b5e:	7823      	ldrb	r3, [r4, #0]
 8002b60:	b173      	cbz	r3, 8002b80 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8002b62:	7860      	ldrb	r0, [r4, #1]
 8002b64:	f7ff fcca 	bl	80024fc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002b68:	f010 0501 	ands.w	r5, r0, #1
 8002b6c:	d108      	bne.n	8002b80 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	f000 8155 	beq.w	8002e1e <find_volume+0x2ea>
 8002b74:	f010 0f04 	tst.w	r0, #4
 8002b78:	f000 8151 	beq.w	8002e1e <find_volume+0x2ea>
				return FR_WRITE_PROTECTED;
 8002b7c:	250a      	movs	r5, #10
 8002b7e:	e14e      	b.n	8002e1e <find_volume+0x2ea>
	fs->fs_type = 0;					/* Clear the file system object */
 8002b80:	2300      	movs	r3, #0
 8002b82:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002b84:	b2f8      	uxtb	r0, r7
 8002b86:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002b88:	f7ff fcc4 	bl	8002514 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002b8c:	f010 0f01 	tst.w	r0, #1
 8002b90:	f040 814b 	bne.w	8002e2a <find_volume+0x2f6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002b94:	b11e      	cbz	r6, 8002b9e <find_volume+0x6a>
 8002b96:	f010 0f04 	tst.w	r0, #4
 8002b9a:	f040 8148 	bne.w	8002e2e <find_volume+0x2fa>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8002b9e:	f104 020c 	add.w	r2, r4, #12
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	7860      	ldrb	r0, [r4, #1]
 8002ba6:	f7ff fce1 	bl	800256c <disk_ioctl>
 8002baa:	4605      	mov	r5, r0
 8002bac:	2800      	cmp	r0, #0
 8002bae:	f040 8140 	bne.w	8002e32 <find_volume+0x2fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8002bb2:	89a2      	ldrh	r2, [r4, #12]
 8002bb4:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002bbe:	f200 813a 	bhi.w	8002e36 <find_volume+0x302>
 8002bc2:	1e53      	subs	r3, r2, #1
 8002bc4:	421a      	tst	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <find_volume+0x98>
 8002bc8:	2501      	movs	r5, #1
 8002bca:	e128      	b.n	8002e1e <find_volume+0x2ea>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ff74 	bl	8002abc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002bd4:	2802      	cmp	r0, #2
 8002bd6:	f000 80c3 	beq.w	8002d60 <find_volume+0x22c>
	bsect = 0;
 8002bda:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002bdc:	2804      	cmp	r0, #4
 8002bde:	f000 812c 	beq.w	8002e3a <find_volume+0x306>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002be2:	2801      	cmp	r0, #1
 8002be4:	f200 812b 	bhi.w	8002e3e <find_volume+0x30a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002be8:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8002bec:	f7ff fcca 	bl	8002584 <ld_word>
 8002bf0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8002bf4:	4540      	cmp	r0, r8
 8002bf6:	f040 8124 	bne.w	8002e42 <find_volume+0x30e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002bfa:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 8002bfe:	f7ff fcc1 	bl	8002584 <ld_word>
 8002c02:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002c04:	b920      	cbnz	r0, 8002c10 <find_volume+0xdc>
 8002c06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c0a:	f7ff fcc0 	bl	800258e <ld_dword>
 8002c0e:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8002c10:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002c12:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002c16:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002c18:	1e53      	subs	r3, r2, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f200 8112 	bhi.w	8002e46 <find_volume+0x312>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002c22:	fb07 f302 	mul.w	r3, r7, r2
 8002c26:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002c28:	f894 9045 	ldrb.w	r9, [r4, #69]	; 0x45
 8002c2c:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002c30:	f1b9 0f00 	cmp.w	r9, #0
 8002c34:	f000 8109 	beq.w	8002e4a <find_volume+0x316>
 8002c38:	f109 33ff 	add.w	r3, r9, #4294967295
 8002c3c:	ea19 0f03 	tst.w	r9, r3
 8002c40:	f040 8105 	bne.w	8002e4e <find_volume+0x31a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002c44:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8002c48:	f7ff fc9c 	bl	8002584 <ld_word>
 8002c4c:	4682      	mov	sl, r0
 8002c4e:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002c50:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 8002c54:	fbb0 f3fb 	udiv	r3, r0, fp
 8002c58:	fb0b 0313 	mls	r3, fp, r3, r0
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 80f7 	bne.w	8002e52 <find_volume+0x31e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002c64:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8002c68:	f7ff fc8c 	bl	8002584 <ld_word>
 8002c6c:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002c6e:	b920      	cbnz	r0, 8002c7a <find_volume+0x146>
 8002c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c74:	f7ff fc8b 	bl	800258e <ld_dword>
 8002c78:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002c7a:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8002c7e:	f7ff fc81 	bl	8002584 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002c82:	4601      	mov	r1, r0
 8002c84:	2800      	cmp	r0, #0
 8002c86:	f000 80e6 	beq.w	8002e56 <find_volume+0x322>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002c8a:	9b00      	ldr	r3, [sp, #0]
 8002c8c:	18c3      	adds	r3, r0, r3
 8002c8e:	fbba fbfb 	udiv	fp, sl, fp
 8002c92:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002c94:	9a01      	ldr	r2, [sp, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f0c0 80df 	bcc.w	8002e5a <find_volume+0x326>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ca2:	454a      	cmp	r2, r9
 8002ca4:	f0c0 80db 	bcc.w	8002e5e <find_volume+0x32a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ca8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002cac:	4290      	cmp	r0, r2
 8002cae:	d96f      	bls.n	8002d90 <find_volume+0x25c>
		fmt = FS_FAT32;
 8002cb0:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002cb4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002cb8:	4290      	cmp	r0, r2
 8002cba:	d801      	bhi.n	8002cc0 <find_volume+0x18c>
 8002cbc:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002cc0:	f100 0902 	add.w	r9, r0, #2
 8002cc4:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002cc8:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002cca:	198a      	adds	r2, r1, r6
 8002ccc:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002cce:	4433      	add	r3, r6
 8002cd0:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8002cd2:	f1bb 0f03 	cmp.w	fp, #3
 8002cd6:	d05e      	beq.n	8002d96 <find_volume+0x262>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002cd8:	f1ba 0f00 	cmp.w	sl, #0
 8002cdc:	f000 80d0 	beq.w	8002e80 <find_volume+0x34c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002ce0:	9b00      	ldr	r3, [sp, #0]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002ce6:	f1bb 0f02 	cmp.w	fp, #2
 8002cea:	d065      	beq.n	8002db8 <find_volume+0x284>
 8002cec:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8002cf0:	f009 0301 	and.w	r3, r9, #1
 8002cf4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002cf8:	4443      	add	r3, r8
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	fbb3 f8f8 	udiv	r8, r3, r8
 8002d00:	45b8      	cmp	r8, r7
 8002d02:	f200 80bf 	bhi.w	8002e84 <find_volume+0x350>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	61a3      	str	r3, [r4, #24]
 8002d0c:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002d12:	f1bb 0f03 	cmp.w	fp, #3
 8002d16:	d052      	beq.n	8002dbe <find_volume+0x28a>
	fs->fs_type = fmt;		/* FAT sub-type */
 8002d18:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8002d1c:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <find_volume+0x33c>)
 8002d1e:	8813      	ldrh	r3, [r2, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	8013      	strh	r3, [r2, #0]
 8002d26:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8002d28:	4b52      	ldr	r3, [pc, #328]	; (8002e74 <find_volume+0x340>)
 8002d2a:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff fd2b 	bl	8002788 <clear_lock>
	return FR_OK;
 8002d32:	e074      	b.n	8002e1e <find_volume+0x2ea>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002d34:	2000      	movs	r0, #0
 8002d36:	ab06      	add	r3, sp, #24
 8002d38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002d3c:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002d40:	3601      	adds	r6, #1
 8002d42:	2e03      	cmp	r6, #3
 8002d44:	d80e      	bhi.n	8002d64 <find_volume+0x230>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002d46:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002d4a:	0133      	lsls	r3, r6, #4
 8002d4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002d50:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002d52:	7903      	ldrb	r3, [r0, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ed      	beq.n	8002d34 <find_volume+0x200>
 8002d58:	3008      	adds	r0, #8
 8002d5a:	f7ff fc18 	bl	800258e <ld_dword>
 8002d5e:	e7ea      	b.n	8002d36 <find_volume+0x202>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002d60:	2600      	movs	r6, #0
 8002d62:	e7ee      	b.n	8002d42 <find_volume+0x20e>
 8002d64:	2700      	movs	r7, #0
 8002d66:	e00a      	b.n	8002d7e <find_volume+0x24a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002d68:	4631      	mov	r1, r6
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7ff fea6 	bl	8002abc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002d70:	2801      	cmp	r0, #1
 8002d72:	f67f af33 	bls.w	8002bdc <find_volume+0xa8>
 8002d76:	3701      	adds	r7, #1
 8002d78:	2f03      	cmp	r7, #3
 8002d7a:	f63f af2f 	bhi.w	8002bdc <find_volume+0xa8>
			bsect = br[i];
 8002d7e:	ab06      	add	r3, sp, #24
 8002d80:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002d84:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002d88:	2e00      	cmp	r6, #0
 8002d8a:	d1ed      	bne.n	8002d68 <find_volume+0x234>
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	e7f2      	b.n	8002d76 <find_volume+0x242>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002d90:	f04f 0b02 	mov.w	fp, #2
 8002d94:	e78e      	b.n	8002cb4 <find_volume+0x180>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002d96:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8002d9a:	f7ff fbf3 	bl	8002584 <ld_word>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d15f      	bne.n	8002e62 <find_volume+0x32e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002da2:	f1ba 0f00 	cmp.w	sl, #0
 8002da6:	d15e      	bne.n	8002e66 <find_volume+0x332>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002da8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002dac:	f7ff fbef 	bl	800258e <ld_dword>
 8002db0:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002db2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002db6:	e79f      	b.n	8002cf8 <find_volume+0x1c4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002db8:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8002dbc:	e79c      	b.n	8002cf8 <find_volume+0x1c4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002dbe:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002dc2:	f7ff fbdf 	bl	8002584 <ld_word>
 8002dc6:	2801      	cmp	r0, #1
 8002dc8:	d1a6      	bne.n	8002d18 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002dca:	1c71      	adds	r1, r6, #1
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7ff fe5a 	bl	8002a86 <move_window>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d1a0      	bne.n	8002d18 <find_volume+0x1e4>
			fs->fsi_flag = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002dda:	f204 2036 	addw	r0, r4, #566	; 0x236
 8002dde:	f7ff fbd1 	bl	8002584 <ld_word>
 8002de2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002de6:	4298      	cmp	r0, r3
 8002de8:	d196      	bne.n	8002d18 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002dea:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002dee:	f7ff fbce 	bl	800258e <ld_dword>
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <find_volume+0x344>)
 8002df4:	4298      	cmp	r0, r3
 8002df6:	d18f      	bne.n	8002d18 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002df8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002dfc:	f7ff fbc7 	bl	800258e <ld_dword>
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <find_volume+0x348>)
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d188      	bne.n	8002d18 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002e06:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8002e0a:	f7ff fbc0 	bl	800258e <ld_dword>
 8002e0e:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002e10:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8002e14:	f7ff fbbb 	bl	800258e <ld_dword>
 8002e18:	6160      	str	r0, [r4, #20]
 8002e1a:	e77d      	b.n	8002d18 <find_volume+0x1e4>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002e1c:	250b      	movs	r5, #11
}
 8002e1e:	4628      	mov	r0, r5
 8002e20:	b007      	add	sp, #28
 8002e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002e26:	250c      	movs	r5, #12
 8002e28:	e7f9      	b.n	8002e1e <find_volume+0x2ea>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002e2a:	2503      	movs	r5, #3
 8002e2c:	e7f7      	b.n	8002e1e <find_volume+0x2ea>
		return FR_WRITE_PROTECTED;
 8002e2e:	250a      	movs	r5, #10
 8002e30:	e7f5      	b.n	8002e1e <find_volume+0x2ea>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8002e32:	2501      	movs	r5, #1
 8002e34:	e7f3      	b.n	8002e1e <find_volume+0x2ea>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8002e36:	2501      	movs	r5, #1
 8002e38:	e7f1      	b.n	8002e1e <find_volume+0x2ea>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002e3a:	2501      	movs	r5, #1
 8002e3c:	e7ef      	b.n	8002e1e <find_volume+0x2ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002e3e:	250d      	movs	r5, #13
 8002e40:	e7ed      	b.n	8002e1e <find_volume+0x2ea>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002e42:	250d      	movs	r5, #13
 8002e44:	e7eb      	b.n	8002e1e <find_volume+0x2ea>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002e46:	250d      	movs	r5, #13
 8002e48:	e7e9      	b.n	8002e1e <find_volume+0x2ea>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e4a:	250d      	movs	r5, #13
 8002e4c:	e7e7      	b.n	8002e1e <find_volume+0x2ea>
 8002e4e:	250d      	movs	r5, #13
 8002e50:	e7e5      	b.n	8002e1e <find_volume+0x2ea>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e52:	250d      	movs	r5, #13
 8002e54:	e7e3      	b.n	8002e1e <find_volume+0x2ea>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002e56:	250d      	movs	r5, #13
 8002e58:	e7e1      	b.n	8002e1e <find_volume+0x2ea>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002e5a:	250d      	movs	r5, #13
 8002e5c:	e7df      	b.n	8002e1e <find_volume+0x2ea>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002e5e:	250d      	movs	r5, #13
 8002e60:	e7dd      	b.n	8002e1e <find_volume+0x2ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002e62:	250d      	movs	r5, #13
 8002e64:	e7db      	b.n	8002e1e <find_volume+0x2ea>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002e66:	250d      	movs	r5, #13
 8002e68:	e7d9      	b.n	8002e1e <find_volume+0x2ea>
 8002e6a:	bf00      	nop
 8002e6c:	20000044 	.word	0x20000044
 8002e70:	20000068 	.word	0x20000068
 8002e74:	2000006c 	.word	0x2000006c
 8002e78:	41615252 	.word	0x41615252
 8002e7c:	61417272 	.word	0x61417272
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002e80:	250d      	movs	r5, #13
 8002e82:	e7cc      	b.n	8002e1e <find_volume+0x2ea>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002e84:	250d      	movs	r5, #13
 8002e86:	e7ca      	b.n	8002e1e <find_volume+0x2ea>

08002e88 <put_fat>:
{
 8002e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002e8c:	2901      	cmp	r1, #1
 8002e8e:	f240 8096 	bls.w	8002fbe <put_fat+0x136>
 8002e92:	4604      	mov	r4, r0
 8002e94:	460d      	mov	r5, r1
 8002e96:	4617      	mov	r7, r2
 8002e98:	69c3      	ldr	r3, [r0, #28]
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	f240 8091 	bls.w	8002fc2 <put_fat+0x13a>
		switch (fs->fs_type) {
 8002ea0:	7803      	ldrb	r3, [r0, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d04f      	beq.n	8002f46 <put_fat+0xbe>
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d067      	beq.n	8002f7a <put_fat+0xf2>
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d003      	beq.n	8002eb6 <put_fat+0x2e>
 8002eae:	2602      	movs	r6, #2
}
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8002eb6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002eba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002ebc:	8983      	ldrh	r3, [r0, #12]
 8002ebe:	fbb8 f3f3 	udiv	r3, r8, r3
 8002ec2:	4419      	add	r1, r3
 8002ec4:	f7ff fddf 	bl	8002a86 <move_window>
			if (res != FR_OK) break;
 8002ec8:	4606      	mov	r6, r0
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8002ece:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8002ed2:	f108 0a01 	add.w	sl, r8, #1
 8002ed6:	89a2      	ldrh	r2, [r4, #12]
 8002ed8:	fbb8 f3f2 	udiv	r3, r8, r2
 8002edc:	fb02 8813 	mls	r8, r2, r3, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ee0:	f015 0501 	ands.w	r5, r5, #1
 8002ee4:	d024      	beq.n	8002f30 <put_fat+0xa8>
 8002ee6:	f919 3008 	ldrsb.w	r3, [r9, r8]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	013a      	lsls	r2, r7, #4
 8002ef0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002f00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	fbba f3f3 	udiv	r3, sl, r3
 8002f08:	4419      	add	r1, r3
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff fdbb 	bl	8002a86 <move_window>
			if (res != FR_OK) break;
 8002f10:	4606      	mov	r6, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d1cc      	bne.n	8002eb0 <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 8002f16:	89a2      	ldrh	r2, [r4, #12]
 8002f18:	fbba f3f2 	udiv	r3, sl, r2
 8002f1c:	fb02 aa13 	mls	sl, r2, r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002f20:	b145      	cbz	r5, 8002f34 <put_fat+0xac>
 8002f22:	f3c7 1207 	ubfx	r2, r7, #4, #8
 8002f26:	f809 200a 	strb.w	r2, [r9, sl]
			fs->wflag = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	70e3      	strb	r3, [r4, #3]
			break;
 8002f2e:	e7bf      	b.n	8002eb0 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002f30:	b2fb      	uxtb	r3, r7
 8002f32:	e7e1      	b.n	8002ef8 <put_fat+0x70>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002f34:	f919 200a 	ldrsb.w	r2, [r9, sl]
 8002f38:	f022 020f 	bic.w	r2, r2, #15
 8002f3c:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8002f40:	433a      	orrs	r2, r7
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	e7ef      	b.n	8002f26 <put_fat+0x9e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002f46:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f48:	8983      	ldrh	r3, [r0, #12]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	fbb5 f3f3 	udiv	r3, r5, r3
 8002f50:	4419      	add	r1, r3
 8002f52:	f7ff fd98 	bl	8002a86 <move_window>
			if (res != FR_OK) break;
 8002f56:	4606      	mov	r6, r0
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1a9      	bne.n	8002eb0 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002f5c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002f60:	006d      	lsls	r5, r5, #1
 8002f62:	89a2      	ldrh	r2, [r4, #12]
 8002f64:	fbb5 f3f2 	udiv	r3, r5, r2
 8002f68:	fb02 5513 	mls	r5, r2, r3, r5
 8002f6c:	b2b9      	uxth	r1, r7
 8002f6e:	4428      	add	r0, r5
 8002f70:	f7ff fb18 	bl	80025a4 <st_word>
			fs->wflag = 1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	70e3      	strb	r3, [r4, #3]
			break;
 8002f78:	e79a      	b.n	8002eb0 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002f7a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f7c:	8983      	ldrh	r3, [r0, #12]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	fbb5 f3f3 	udiv	r3, r5, r3
 8002f84:	4419      	add	r1, r3
 8002f86:	f7ff fd7e 	bl	8002a86 <move_window>
			if (res != FR_OK) break;
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d18f      	bne.n	8002eb0 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002f90:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8002f94:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8002f98:	00ad      	lsls	r5, r5, #2
 8002f9a:	89a1      	ldrh	r1, [r4, #12]
 8002f9c:	fbb5 f2f1 	udiv	r2, r5, r1
 8002fa0:	fb01 5512 	mls	r5, r1, r2, r5
 8002fa4:	441d      	add	r5, r3
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f7ff faf1 	bl	800258e <ld_dword>
 8002fac:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002fb0:	4339      	orrs	r1, r7
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7ff fafa 	bl	80025ac <st_dword>
			fs->wflag = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	70e3      	strb	r3, [r4, #3]
			break;
 8002fbc:	e778      	b.n	8002eb0 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8002fbe:	2602      	movs	r6, #2
 8002fc0:	e776      	b.n	8002eb0 <put_fat+0x28>
 8002fc2:	2602      	movs	r6, #2
 8002fc4:	e774      	b.n	8002eb0 <put_fat+0x28>

08002fc6 <get_fat>:
{
 8002fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8002fc8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002fca:	2901      	cmp	r1, #1
 8002fcc:	d96c      	bls.n	80030a8 <get_fat+0xe2>
 8002fce:	460c      	mov	r4, r1
 8002fd0:	69eb      	ldr	r3, [r5, #28]
 8002fd2:	428b      	cmp	r3, r1
 8002fd4:	d96a      	bls.n	80030ac <get_fat+0xe6>
		switch (fs->fs_type) {
 8002fd6:	782b      	ldrb	r3, [r5, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d037      	beq.n	800304c <get_fat+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d04b      	beq.n	8003078 <get_fat+0xb2>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <get_fat+0x22>
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e060      	b.n	80030aa <get_fat+0xe4>
			bc = (UINT)clst; bc += bc / 2;
 8002fe8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002fec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002fee:	89ab      	ldrh	r3, [r5, #12]
 8002ff0:	fbb6 f3f3 	udiv	r3, r6, r3
 8002ff4:	4419      	add	r1, r3
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f7ff fd45 	bl	8002a86 <move_window>
 8002ffc:	b110      	cbz	r0, 8003004 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8003002:	e052      	b.n	80030aa <get_fat+0xe4>
			wc = fs->win[bc++ % SS(fs)];
 8003004:	1c77      	adds	r7, r6, #1
 8003006:	89ab      	ldrh	r3, [r5, #12]
 8003008:	fbb6 f2f3 	udiv	r2, r6, r3
 800300c:	fb03 6612 	mls	r6, r3, r2, r6
 8003010:	442e      	add	r6, r5
 8003012:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003016:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003018:	fbb7 f3f3 	udiv	r3, r7, r3
 800301c:	4419      	add	r1, r3
 800301e:	4628      	mov	r0, r5
 8003020:	f7ff fd31 	bl	8002a86 <move_window>
 8003024:	2800      	cmp	r0, #0
 8003026:	d143      	bne.n	80030b0 <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003028:	89aa      	ldrh	r2, [r5, #12]
 800302a:	fbb7 f3f2 	udiv	r3, r7, r2
 800302e:	fb02 7713 	mls	r7, r2, r3, r7
 8003032:	443d      	add	r5, r7
 8003034:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 8003038:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800303c:	f014 0f01 	tst.w	r4, #1
 8003040:	d001      	beq.n	8003046 <get_fat+0x80>
 8003042:	0900      	lsrs	r0, r0, #4
 8003044:	e031      	b.n	80030aa <get_fat+0xe4>
 8003046:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800304a:	e02e      	b.n	80030aa <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800304c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	fbb4 f3f3 	udiv	r3, r4, r3
 8003056:	4419      	add	r1, r3
 8003058:	4628      	mov	r0, r5
 800305a:	f7ff fd14 	bl	8002a86 <move_window>
 800305e:	bb50      	cbnz	r0, 80030b6 <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003060:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8003064:	0064      	lsls	r4, r4, #1
 8003066:	89aa      	ldrh	r2, [r5, #12]
 8003068:	fbb4 f3f2 	udiv	r3, r4, r2
 800306c:	fb02 4413 	mls	r4, r2, r3, r4
 8003070:	4420      	add	r0, r4
 8003072:	f7ff fa87 	bl	8002584 <ld_word>
			break;
 8003076:	e018      	b.n	80030aa <get_fat+0xe4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003078:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800307a:	89ab      	ldrh	r3, [r5, #12]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003082:	4419      	add	r1, r3
 8003084:	4628      	mov	r0, r5
 8003086:	f7ff fcfe 	bl	8002a86 <move_window>
 800308a:	b9b8      	cbnz	r0, 80030bc <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800308c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8003090:	00a4      	lsls	r4, r4, #2
 8003092:	89aa      	ldrh	r2, [r5, #12]
 8003094:	fbb4 f3f2 	udiv	r3, r4, r2
 8003098:	fb02 4413 	mls	r4, r2, r3, r4
 800309c:	4420      	add	r0, r4
 800309e:	f7ff fa76 	bl	800258e <ld_dword>
 80030a2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80030a6:	e000      	b.n	80030aa <get_fat+0xe4>
		val = 1;	/* Internal error */
 80030a8:	2001      	movs	r0, #1
}
 80030aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80030ac:	2001      	movs	r0, #1
 80030ae:	e7fc      	b.n	80030aa <get_fat+0xe4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e7f9      	b.n	80030aa <get_fat+0xe4>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	e7f6      	b.n	80030aa <get_fat+0xe4>
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80030c0:	e7f3      	b.n	80030aa <get_fat+0xe4>

080030c2 <dir_sdi>:
{
 80030c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80030c6:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80030ca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80030ce:	d24c      	bcs.n	800316a <dir_sdi+0xa8>
 80030d0:	4607      	mov	r7, r0
 80030d2:	460e      	mov	r6, r1
 80030d4:	f011 0f1f 	tst.w	r1, #31
 80030d8:	d149      	bne.n	800316e <dir_sdi+0xac>
	dp->dptr = ofs;				/* Set current offset */
 80030da:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80030dc:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80030de:	b92c      	cbnz	r4, 80030ec <dir_sdi+0x2a>
 80030e0:	f898 3000 	ldrb.w	r3, [r8]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <dir_sdi+0x2a>
		clst = fs->dirbase;
 80030e8:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80030ec:	b9ec      	cbnz	r4, 800312a <dir_sdi+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80030ee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80030f2:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80030f6:	d93c      	bls.n	8003172 <dir_sdi+0xb0>
		dp->sect = fs->dirbase;
 80030f8:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80030fc:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80030fe:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	b3e3      	cbz	r3, 800317e <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003104:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8003108:	fbb6 f2f2 	udiv	r2, r6, r2
 800310c:	4413      	add	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003110:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8003114:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8003118:	fbb6 f1f2 	udiv	r1, r6, r2
 800311c:	fb02 6611 	mls	r6, r2, r1, r6
 8003120:	441e      	add	r6, r3
 8003122:	623e      	str	r6, [r7, #32]
	return FR_OK;
 8003124:	2000      	movs	r0, #0
}
 8003126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800312a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800312e:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8003132:	fb05 f503 	mul.w	r5, r5, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003136:	e000      	b.n	800313a <dir_sdi+0x78>
			ofs -= csz;
 8003138:	1b76      	subs	r6, r6, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 800313a:	42ae      	cmp	r6, r5
 800313c:	d30f      	bcc.n	800315e <dir_sdi+0x9c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800313e:	4621      	mov	r1, r4
 8003140:	4638      	mov	r0, r7
 8003142:	f7ff ff40 	bl	8002fc6 <get_fat>
 8003146:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003148:	f1b0 3fff 	cmp.w	r0, #4294967295
 800314c:	d013      	beq.n	8003176 <dir_sdi+0xb4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800314e:	2801      	cmp	r0, #1
 8003150:	d913      	bls.n	800317a <dir_sdi+0xb8>
 8003152:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003156:	4283      	cmp	r3, r0
 8003158:	d8ee      	bhi.n	8003138 <dir_sdi+0x76>
 800315a:	2002      	movs	r0, #2
 800315c:	e7e3      	b.n	8003126 <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 800315e:	4621      	mov	r1, r4
 8003160:	4640      	mov	r0, r8
 8003162:	f7ff fb2f 	bl	80027c4 <clust2sect>
 8003166:	61f8      	str	r0, [r7, #28]
 8003168:	e7c9      	b.n	80030fe <dir_sdi+0x3c>
		return FR_INT_ERR;
 800316a:	2002      	movs	r0, #2
 800316c:	e7db      	b.n	8003126 <dir_sdi+0x64>
 800316e:	2002      	movs	r0, #2
 8003170:	e7d9      	b.n	8003126 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003172:	2002      	movs	r0, #2
 8003174:	e7d7      	b.n	8003126 <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003176:	2001      	movs	r0, #1
 8003178:	e7d5      	b.n	8003126 <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800317a:	2002      	movs	r0, #2
 800317c:	e7d3      	b.n	8003126 <dir_sdi+0x64>
	if (!dp->sect) return FR_INT_ERR;
 800317e:	2002      	movs	r0, #2
 8003180:	e7d1      	b.n	8003126 <dir_sdi+0x64>

08003182 <create_chain>:
{
 8003182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003186:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8003188:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800318a:	460f      	mov	r7, r1
 800318c:	b951      	cbnz	r1, 80031a4 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800318e:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003192:	f1b8 0f00 	cmp.w	r8, #0
 8003196:	d012      	beq.n	80031be <create_chain+0x3c>
 8003198:	69f3      	ldr	r3, [r6, #28]
 800319a:	4543      	cmp	r3, r8
 800319c:	d811      	bhi.n	80031c2 <create_chain+0x40>
 800319e:	f04f 0801 	mov.w	r8, #1
 80031a2:	e00e      	b.n	80031c2 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80031a4:	f7ff ff0f 	bl	8002fc6 <get_fat>
 80031a8:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80031aa:	2801      	cmp	r0, #1
 80031ac:	d947      	bls.n	800323e <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80031ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031b2:	d049      	beq.n	8003248 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80031b4:	69f2      	ldr	r2, [r6, #28]
 80031b6:	4282      	cmp	r2, r0
 80031b8:	d846      	bhi.n	8003248 <create_chain+0xc6>
		scl = clst;
 80031ba:	46b8      	mov	r8, r7
 80031bc:	e001      	b.n	80031c2 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80031be:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 80031c2:	4644      	mov	r4, r8
 80031c4:	e00c      	b.n	80031e0 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff fefc 	bl	8002fc6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80031ce:	4603      	mov	r3, r0
 80031d0:	b178      	cbz	r0, 80031f2 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80031d2:	2801      	cmp	r0, #1
 80031d4:	d038      	beq.n	8003248 <create_chain+0xc6>
 80031d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031da:	d035      	beq.n	8003248 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 80031dc:	4544      	cmp	r4, r8
 80031de:	d032      	beq.n	8003246 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 80031e0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80031e2:	69f3      	ldr	r3, [r6, #28]
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	d8ee      	bhi.n	80031c6 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 80031e8:	f1b8 0f01 	cmp.w	r8, #1
 80031ec:	d929      	bls.n	8003242 <create_chain+0xc0>
				ncl = 2;
 80031ee:	2402      	movs	r4, #2
 80031f0:	e7e9      	b.n	80031c6 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295
 80031f6:	4621      	mov	r1, r4
 80031f8:	4630      	mov	r0, r6
 80031fa:	f7ff fe45 	bl	8002e88 <put_fat>
		if (res == FR_OK && clst != 0) {
 80031fe:	4603      	mov	r3, r0
 8003200:	b900      	cbnz	r0, 8003204 <create_chain+0x82>
 8003202:	b977      	cbnz	r7, 8003222 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003204:	b9a3      	cbnz	r3, 8003230 <create_chain+0xae>
		fs->last_clst = ncl;
 8003206:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003208:	69b2      	ldr	r2, [r6, #24]
 800320a:	69f3      	ldr	r3, [r6, #28]
 800320c:	3b02      	subs	r3, #2
 800320e:	429a      	cmp	r2, r3
 8003210:	d801      	bhi.n	8003216 <create_chain+0x94>
 8003212:	3a01      	subs	r2, #1
 8003214:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8003216:	7933      	ldrb	r3, [r6, #4]
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	7133      	strb	r3, [r6, #4]
 800321e:	4623      	mov	r3, r4
 8003220:	e012      	b.n	8003248 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003222:	4622      	mov	r2, r4
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	f7ff fe2e 	bl	8002e88 <put_fat>
 800322c:	4603      	mov	r3, r0
 800322e:	e7e9      	b.n	8003204 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <create_chain+0xb6>
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <create_chain+0xc6>
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e004      	b.n	8003248 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800323e:	2301      	movs	r3, #1
 8003240:	e002      	b.n	8003248 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800324e <remove_chain>:
{
 800324e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003250:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8003252:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003254:	2901      	cmp	r1, #1
 8003256:	d92e      	bls.n	80032b6 <remove_chain+0x68>
 8003258:	4606      	mov	r6, r0
 800325a:	4611      	mov	r1, r2
 800325c:	69eb      	ldr	r3, [r5, #28]
 800325e:	42a3      	cmp	r3, r4
 8003260:	d92b      	bls.n	80032ba <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003262:	b14a      	cbz	r2, 8003278 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	4628      	mov	r0, r5
 800326a:	f7ff fe0d 	bl	8002e88 <put_fat>
		if (res != FR_OK) return res;
 800326e:	4607      	mov	r7, r0
 8003270:	b110      	cbz	r0, 8003278 <remove_chain+0x2a>
 8003272:	e023      	b.n	80032bc <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003274:	42a2      	cmp	r2, r4
 8003276:	d921      	bls.n	80032bc <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003278:	4627      	mov	r7, r4
 800327a:	4621      	mov	r1, r4
 800327c:	4630      	mov	r0, r6
 800327e:	f7ff fea2 	bl	8002fc6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8003282:	4604      	mov	r4, r0
 8003284:	b1e0      	cbz	r0, 80032c0 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003286:	2801      	cmp	r0, #1
 8003288:	d01c      	beq.n	80032c4 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800328a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800328e:	d01b      	beq.n	80032c8 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003290:	2200      	movs	r2, #0
 8003292:	4639      	mov	r1, r7
 8003294:	4628      	mov	r0, r5
 8003296:	f7ff fdf7 	bl	8002e88 <put_fat>
			if (res != FR_OK) return res;
 800329a:	4607      	mov	r7, r0
 800329c:	b970      	cbnz	r0, 80032bc <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800329e:	69ab      	ldr	r3, [r5, #24]
 80032a0:	69ea      	ldr	r2, [r5, #28]
 80032a2:	1e91      	subs	r1, r2, #2
 80032a4:	428b      	cmp	r3, r1
 80032a6:	d2e5      	bcs.n	8003274 <remove_chain+0x26>
			fs->free_clst++;
 80032a8:	3301      	adds	r3, #1
 80032aa:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 80032ac:	792b      	ldrb	r3, [r5, #4]
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	712b      	strb	r3, [r5, #4]
 80032b4:	e7de      	b.n	8003274 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80032b6:	2702      	movs	r7, #2
 80032b8:	e000      	b.n	80032bc <remove_chain+0x6e>
 80032ba:	2702      	movs	r7, #2
}
 80032bc:	4638      	mov	r0, r7
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80032c0:	2700      	movs	r7, #0
 80032c2:	e7fb      	b.n	80032bc <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80032c4:	2702      	movs	r7, #2
 80032c6:	e7f9      	b.n	80032bc <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80032c8:	2701      	movs	r7, #1
 80032ca:	e7f7      	b.n	80032bc <remove_chain+0x6e>

080032cc <dir_next>:
{
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80032d0:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80032d2:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80032d4:	69c3      	ldr	r3, [r0, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d074      	beq.n	80033c4 <dir_next+0xf8>
 80032da:	4604      	mov	r4, r0
 80032dc:	460f      	mov	r7, r1
 80032de:	3520      	adds	r5, #32
 80032e0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80032e4:	d270      	bcs.n	80033c8 <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80032e6:	89b1      	ldrh	r1, [r6, #12]
 80032e8:	fbb5 f2f1 	udiv	r2, r5, r1
 80032ec:	fb01 5212 	mls	r2, r1, r2, r5
 80032f0:	b93a      	cbnz	r2, 8003302 <dir_next+0x36>
		dp->sect++;				/* Next sector */
 80032f2:	3301      	adds	r3, #1
 80032f4:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80032f6:	6981      	ldr	r1, [r0, #24]
 80032f8:	b9a1      	cbnz	r1, 8003324 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80032fa:	8933      	ldrh	r3, [r6, #8]
 80032fc:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8003300:	d90c      	bls.n	800331c <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 8003302:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003304:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8003308:	89b1      	ldrh	r1, [r6, #12]
 800330a:	fbb5 f2f1 	udiv	r2, r5, r1
 800330e:	fb01 5512 	mls	r5, r1, r2, r5
 8003312:	441d      	add	r5, r3
 8003314:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8003316:	2000      	movs	r0, #0
}
 8003318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 800331c:	2300      	movs	r3, #0
 800331e:	61c3      	str	r3, [r0, #28]
 8003320:	2004      	movs	r0, #4
 8003322:	e7f9      	b.n	8003318 <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003324:	89b2      	ldrh	r2, [r6, #12]
 8003326:	fbb5 f2f2 	udiv	r2, r5, r2
 800332a:	8973      	ldrh	r3, [r6, #10]
 800332c:	3b01      	subs	r3, #1
 800332e:	ea12 0803 	ands.w	r8, r2, r3
 8003332:	d1e6      	bne.n	8003302 <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003334:	f7ff fe47 	bl	8002fc6 <get_fat>
 8003338:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800333a:	2801      	cmp	r0, #1
 800333c:	d946      	bls.n	80033cc <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800333e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003342:	d045      	beq.n	80033d0 <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003344:	69f3      	ldr	r3, [r6, #28]
 8003346:	4283      	cmp	r3, r0
 8003348:	d834      	bhi.n	80033b4 <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 800334a:	b18f      	cbz	r7, 8003370 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800334c:	69a1      	ldr	r1, [r4, #24]
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff ff17 	bl	8003182 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003354:	4681      	mov	r9, r0
 8003356:	2800      	cmp	r0, #0
 8003358:	d03c      	beq.n	80033d4 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800335a:	2801      	cmp	r0, #1
 800335c:	d03c      	beq.n	80033d8 <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800335e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003362:	d03b      	beq.n	80033dc <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003364:	4630      	mov	r0, r6
 8003366:	f7ff fb65 	bl	8002a34 <sync_window>
 800336a:	b128      	cbz	r0, 8003378 <dir_next+0xac>
 800336c:	2001      	movs	r0, #1
 800336e:	e7d3      	b.n	8003318 <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 8003370:	2300      	movs	r3, #0
 8003372:	61e3      	str	r3, [r4, #28]
 8003374:	2004      	movs	r0, #4
 8003376:	e7cf      	b.n	8003318 <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003378:	89b2      	ldrh	r2, [r6, #12]
 800337a:	2100      	movs	r1, #0
 800337c:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003380:	f7ff f92a 	bl	80025d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003384:	4649      	mov	r1, r9
 8003386:	4630      	mov	r0, r6
 8003388:	f7ff fa1c 	bl	80027c4 <clust2sect>
 800338c:	6370      	str	r0, [r6, #52]	; 0x34
 800338e:	8973      	ldrh	r3, [r6, #10]
 8003390:	4598      	cmp	r8, r3
 8003392:	d20b      	bcs.n	80033ac <dir_next+0xe0>
						fs->wflag = 1;
 8003394:	2301      	movs	r3, #1
 8003396:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003398:	4630      	mov	r0, r6
 800339a:	f7ff fb4b 	bl	8002a34 <sync_window>
 800339e:	b9f8      	cbnz	r0, 80033e0 <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80033a0:	f108 0801 	add.w	r8, r8, #1
 80033a4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80033a6:	3301      	adds	r3, #1
 80033a8:	6373      	str	r3, [r6, #52]	; 0x34
 80033aa:	e7f0      	b.n	800338e <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 80033ac:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80033ae:	eba3 0308 	sub.w	r3, r3, r8
 80033b2:	6373      	str	r3, [r6, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80033b4:	f8c4 9018 	str.w	r9, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80033b8:	4649      	mov	r1, r9
 80033ba:	4630      	mov	r0, r6
 80033bc:	f7ff fa02 	bl	80027c4 <clust2sect>
 80033c0:	61e0      	str	r0, [r4, #28]
 80033c2:	e79e      	b.n	8003302 <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80033c4:	2004      	movs	r0, #4
 80033c6:	e7a7      	b.n	8003318 <dir_next+0x4c>
 80033c8:	2004      	movs	r0, #4
 80033ca:	e7a5      	b.n	8003318 <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80033cc:	2002      	movs	r0, #2
 80033ce:	e7a3      	b.n	8003318 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80033d0:	2001      	movs	r0, #1
 80033d2:	e7a1      	b.n	8003318 <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80033d4:	2007      	movs	r0, #7
 80033d6:	e79f      	b.n	8003318 <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80033d8:	2002      	movs	r0, #2
 80033da:	e79d      	b.n	8003318 <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80033dc:	2001      	movs	r0, #1
 80033de:	e79b      	b.n	8003318 <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80033e0:	2001      	movs	r0, #1
 80033e2:	e799      	b.n	8003318 <dir_next+0x4c>

080033e4 <dir_alloc>:
{
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	4604      	mov	r4, r0
 80033e8:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80033ea:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80033ec:	2100      	movs	r1, #0
 80033ee:	f7ff fe68 	bl	80030c2 <dir_sdi>
	if (res == FR_OK) {
 80033f2:	4602      	mov	r2, r0
 80033f4:	b9c0      	cbnz	r0, 8003428 <dir_alloc+0x44>
		n = 0;
 80033f6:	2500      	movs	r5, #0
 80033f8:	e008      	b.n	800340c <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80033fa:	3501      	adds	r5, #1
 80033fc:	42b5      	cmp	r5, r6
 80033fe:	d013      	beq.n	8003428 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8003400:	2101      	movs	r1, #1
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff62 	bl	80032cc <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003408:	4602      	mov	r2, r0
 800340a:	b968      	cbnz	r0, 8003428 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 800340c:	69e1      	ldr	r1, [r4, #28]
 800340e:	4638      	mov	r0, r7
 8003410:	f7ff fb39 	bl	8002a86 <move_window>
			if (res != FR_OK) break;
 8003414:	4602      	mov	r2, r0
 8003416:	b938      	cbnz	r0, 8003428 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003418:	6a23      	ldr	r3, [r4, #32]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2be5      	cmp	r3, #229	; 0xe5
 800341e:	d0ec      	beq.n	80033fa <dir_alloc+0x16>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ea      	beq.n	80033fa <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8003424:	2500      	movs	r5, #0
 8003426:	e7eb      	b.n	8003400 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003428:	2a04      	cmp	r2, #4
 800342a:	d001      	beq.n	8003430 <dir_alloc+0x4c>
}
 800342c:	4610      	mov	r0, r2
 800342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003430:	2207      	movs	r2, #7
 8003432:	e7fb      	b.n	800342c <dir_alloc+0x48>

08003434 <sync_fs>:
{
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003438:	f7ff fafc 	bl	8002a34 <sync_window>
	if (res == FR_OK) {
 800343c:	4605      	mov	r5, r0
 800343e:	b948      	cbnz	r0, 8003454 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003440:	7823      	ldrb	r3, [r4, #0]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d008      	beq.n	8003458 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003446:	2200      	movs	r2, #0
 8003448:	4611      	mov	r1, r2
 800344a:	7860      	ldrb	r0, [r4, #1]
 800344c:	f7ff f88e 	bl	800256c <disk_ioctl>
 8003450:	b100      	cbz	r0, 8003454 <sync_fs+0x20>
 8003452:	2501      	movs	r5, #1
}
 8003454:	4628      	mov	r0, r5
 8003456:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003458:	7923      	ldrb	r3, [r4, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d1f3      	bne.n	8003446 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800345e:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8003462:	89a2      	ldrh	r2, [r4, #12]
 8003464:	2100      	movs	r1, #0
 8003466:	4630      	mov	r0, r6
 8003468:	f7ff f8b6 	bl	80025d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800346c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003470:	f204 2036 	addw	r0, r4, #566	; 0x236
 8003474:	f7ff f896 	bl	80025a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003478:	490e      	ldr	r1, [pc, #56]	; (80034b4 <sync_fs+0x80>)
 800347a:	4630      	mov	r0, r6
 800347c:	f7ff f896 	bl	80025ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003480:	490d      	ldr	r1, [pc, #52]	; (80034b8 <sync_fs+0x84>)
 8003482:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003486:	f7ff f891 	bl	80025ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800348a:	69a1      	ldr	r1, [r4, #24]
 800348c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8003490:	f7ff f88c 	bl	80025ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003494:	6961      	ldr	r1, [r4, #20]
 8003496:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800349a:	f7ff f887 	bl	80025ac <st_dword>
			fs->winsect = fs->volbase + 1;
 800349e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034a0:	3201      	adds	r2, #1
 80034a2:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80034a4:	2301      	movs	r3, #1
 80034a6:	4631      	mov	r1, r6
 80034a8:	7860      	ldrb	r0, [r4, #1]
 80034aa:	f7ff f853 	bl	8002554 <disk_write>
			fs->fsi_flag = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	7123      	strb	r3, [r4, #4]
 80034b2:	e7c8      	b.n	8003446 <sync_fs+0x12>
 80034b4:	41615252 	.word	0x41615252
 80034b8:	61417272 	.word	0x61417272

080034bc <create_name>:
{
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b083      	sub	sp, #12
 80034c2:	4607      	mov	r7, r0
 80034c4:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80034c6:	f8d1 9000 	ldr.w	r9, [r1]
 80034ca:	6803      	ldr	r3, [r0, #0]
 80034cc:	691d      	ldr	r5, [r3, #16]
 80034ce:	2400      	movs	r4, #0
 80034d0:	4623      	mov	r3, r4
 80034d2:	e012      	b.n	80034fa <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80034d4:	3601      	adds	r6, #1
 80034d6:	f819 3006 	ldrb.w	r3, [r9, r6]
 80034da:	2b2f      	cmp	r3, #47	; 0x2f
 80034dc:	d0fa      	beq.n	80034d4 <create_name+0x18>
 80034de:	2b5c      	cmp	r3, #92	; 0x5c
 80034e0:	d0f8      	beq.n	80034d4 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 80034e2:	444e      	add	r6, r9
 80034e4:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80034e8:	281f      	cmp	r0, #31
 80034ea:	d823      	bhi.n	8003534 <create_name+0x78>
 80034ec:	f04f 0804 	mov.w	r8, #4
 80034f0:	e024      	b.n	800353c <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 80034f2:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 80034f6:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 80034f8:	4633      	mov	r3, r6
 80034fa:	1c5e      	adds	r6, r3, #1
 80034fc:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8003500:	281f      	cmp	r0, #31
 8003502:	d9ee      	bls.n	80034e2 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003504:	282f      	cmp	r0, #47	; 0x2f
 8003506:	d0e6      	beq.n	80034d6 <create_name+0x1a>
 8003508:	285c      	cmp	r0, #92	; 0x5c
 800350a:	d0e4      	beq.n	80034d6 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800350c:	2cfe      	cmp	r4, #254	; 0xfe
 800350e:	f200 80df 	bhi.w	80036d0 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003512:	2101      	movs	r1, #1
 8003514:	f000 fe38 	bl	8004188 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003518:	4680      	mov	r8, r0
 800351a:	2800      	cmp	r0, #0
 800351c:	f000 80da 	beq.w	80036d4 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003520:	287f      	cmp	r0, #127	; 0x7f
 8003522:	d8e6      	bhi.n	80034f2 <create_name+0x36>
 8003524:	4601      	mov	r1, r0
 8003526:	486d      	ldr	r0, [pc, #436]	; (80036dc <create_name+0x220>)
 8003528:	f7ff f869 	bl	80025fe <chk_chr>
 800352c:	2800      	cmp	r0, #0
 800352e:	d0e0      	beq.n	80034f2 <create_name+0x36>
 8003530:	2006      	movs	r0, #6
 8003532:	e085      	b.n	8003640 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003534:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003538:	e000      	b.n	800353c <create_name+0x80>
		di--;
 800353a:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800353c:	b144      	cbz	r4, 8003550 <create_name+0x94>
		w = lfn[di - 1];
 800353e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003542:	3b01      	subs	r3, #1
 8003544:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8003548:	2b20      	cmp	r3, #32
 800354a:	d0f6      	beq.n	800353a <create_name+0x7e>
 800354c:	2b2e      	cmp	r3, #46	; 0x2e
 800354e:	d0f4      	beq.n	800353a <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 8003550:	2300      	movs	r3, #0
 8003552:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003556:	2c00      	cmp	r4, #0
 8003558:	f000 80be 	beq.w	80036d8 <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 800355c:	220b      	movs	r2, #11
 800355e:	2120      	movs	r1, #32
 8003560:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003564:	f7ff f838 	bl	80025d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <create_name+0xb2>
 800356c:	3301      	adds	r3, #1
 800356e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8003572:	2a20      	cmp	r2, #32
 8003574:	d0fa      	beq.n	800356c <create_name+0xb0>
 8003576:	2a2e      	cmp	r2, #46	; 0x2e
 8003578:	d0f8      	beq.n	800356c <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 800357a:	b10b      	cbz	r3, 8003580 <create_name+0xc4>
 800357c:	f048 0803 	orr.w	r8, r8, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003580:	b17c      	cbz	r4, 80035a2 <create_name+0xe6>
 8003582:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8003586:	3a01      	subs	r2, #1
 8003588:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800358c:	2a2e      	cmp	r2, #46	; 0x2e
 800358e:	d001      	beq.n	8003594 <create_name+0xd8>
 8003590:	3c01      	subs	r4, #1
 8003592:	e7f5      	b.n	8003580 <create_name+0xc4>
 8003594:	f04f 0b08 	mov.w	fp, #8
 8003598:	f04f 0a00 	mov.w	sl, #0
 800359c:	f8cd a004 	str.w	sl, [sp, #4]
 80035a0:	e00a      	b.n	80035b8 <create_name+0xfc>
 80035a2:	46a2      	mov	sl, r4
 80035a4:	f04f 0b08 	mov.w	fp, #8
 80035a8:	2200      	movs	r2, #0
 80035aa:	9201      	str	r2, [sp, #4]
 80035ac:	e004      	b.n	80035b8 <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80035ae:	454c      	cmp	r4, r9
 80035b0:	d00b      	beq.n	80035ca <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 80035b2:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 80035b6:	464b      	mov	r3, r9
 80035b8:	f103 0901 	add.w	r9, r3, #1
 80035bc:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80035c0:	b1fe      	cbz	r6, 8003602 <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80035c2:	2e20      	cmp	r6, #32
 80035c4:	d0f5      	beq.n	80035b2 <create_name+0xf6>
 80035c6:	2e2e      	cmp	r6, #46	; 0x2e
 80035c8:	d0f1      	beq.n	80035ae <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80035ca:	45da      	cmp	sl, fp
 80035cc:	d210      	bcs.n	80035f0 <create_name+0x134>
 80035ce:	454c      	cmp	r4, r9
 80035d0:	d00e      	beq.n	80035f0 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 80035d2:	2e7f      	cmp	r6, #127	; 0x7f
 80035d4:	d844      	bhi.n	8003660 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80035d6:	2e00      	cmp	r6, #0
 80035d8:	d14f      	bne.n	800367a <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80035da:	f048 0803 	orr.w	r8, r8, #3
 80035de:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80035e0:	eb07 030a 	add.w	r3, r7, sl
 80035e4:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80035e8:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 80035ea:	f10a 0a01 	add.w	sl, sl, #1
 80035ee:	e7e3      	b.n	80035b8 <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 80035f0:	f1bb 0f0b 	cmp.w	fp, #11
 80035f4:	d027      	beq.n	8003646 <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80035f6:	454c      	cmp	r4, r9
 80035f8:	d001      	beq.n	80035fe <create_name+0x142>
 80035fa:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 80035fe:	454c      	cmp	r4, r9
 8003600:	d224      	bcs.n	800364c <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003606:	2be5      	cmp	r3, #229	; 0xe5
 8003608:	d053      	beq.n	80036b2 <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 800360a:	f1bb 0f08 	cmp.w	fp, #8
 800360e:	d054      	beq.n	80036ba <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003610:	9b01      	ldr	r3, [sp, #4]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	2a0c      	cmp	r2, #12
 8003618:	d003      	beq.n	8003622 <create_name+0x166>
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d101      	bne.n	8003626 <create_name+0x16a>
 8003622:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003626:	f018 0f02 	tst.w	r8, #2
 800362a:	d106      	bne.n	800363a <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800362c:	9b01      	ldr	r3, [sp, #4]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d046      	beq.n	80036c4 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003636:	2a04      	cmp	r2, #4
 8003638:	d047      	beq.n	80036ca <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800363a:	f887 802f 	strb.w	r8, [r7, #47]	; 0x2f
	return FR_OK;
 800363e:	2000      	movs	r0, #0
}
 8003640:	b003      	add	sp, #12
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8003646:	f048 0803 	orr.w	r8, r8, #3
 800364a:	e7da      	b.n	8003602 <create_name+0x146>
			b <<= 2; continue;
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003654:	4623      	mov	r3, r4
 8003656:	f04f 0b0b 	mov.w	fp, #11
 800365a:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800365e:	e7ab      	b.n	80035b8 <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003660:	2100      	movs	r1, #0
 8003662:	4630      	mov	r0, r6
 8003664:	f000 fd90 	bl	8004188 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003668:	4606      	mov	r6, r0
 800366a:	b118      	cbz	r0, 8003674 <create_name+0x1b8>
 800366c:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <create_name+0x224>)
 8003672:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8003674:	f048 0802 	orr.w	r8, r8, #2
 8003678:	e7ad      	b.n	80035d6 <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800367a:	4631      	mov	r1, r6
 800367c:	4819      	ldr	r0, [pc, #100]	; (80036e4 <create_name+0x228>)
 800367e:	f7fe ffbe 	bl	80025fe <chk_chr>
 8003682:	2800      	cmp	r0, #0
 8003684:	d1a9      	bne.n	80035da <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003686:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b19      	cmp	r3, #25
 800368e:	d804      	bhi.n	800369a <create_name+0x1de>
					b |= 2;
 8003690:	9b01      	ldr	r3, [sp, #4]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	e7a2      	b.n	80035e0 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 800369a:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b19      	cmp	r3, #25
 80036a2:	d89d      	bhi.n	80035e0 <create_name+0x124>
						b |= 1; w -= 0x20;
 80036a4:	9b01      	ldr	r3, [sp, #4]
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	3e20      	subs	r6, #32
 80036ae:	b2b6      	uxth	r6, r6
 80036b0:	e796      	b.n	80035e0 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80036b2:	2305      	movs	r3, #5
 80036b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80036b8:	e7a7      	b.n	800360a <create_name+0x14e>
	if (ni == 8) b <<= 2;
 80036ba:	9b01      	ldr	r3, [sp, #4]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	e7a5      	b.n	8003610 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80036c4:	f048 0810 	orr.w	r8, r8, #16
 80036c8:	e7b5      	b.n	8003636 <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80036ca:	f048 0808 	orr.w	r8, r8, #8
 80036ce:	e7b4      	b.n	800363a <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80036d0:	2006      	movs	r0, #6
 80036d2:	e7b5      	b.n	8003640 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80036d4:	2006      	movs	r0, #6
 80036d6:	e7b3      	b.n	8003640 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80036d8:	2006      	movs	r0, #6
 80036da:	e7b1      	b.n	8003640 <create_name+0x184>
 80036dc:	08004318 	.word	0x08004318
 80036e0:	0800432c 	.word	0x0800432c
 80036e4:	08004324 	.word	0x08004324

080036e8 <cmp_lfn>:
{
 80036e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	4681      	mov	r9, r0
 80036ee:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80036f0:	f101 001a 	add.w	r0, r1, #26
 80036f4:	f7fe ff46 	bl	8002584 <ld_word>
 80036f8:	bbc8      	cbnz	r0, 800376e <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80036fa:	783e      	ldrb	r6, [r7, #0]
 80036fc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8003700:	3e01      	subs	r6, #1
 8003702:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003706:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800370a:	f04f 0801 	mov.w	r8, #1
 800370e:	2500      	movs	r5, #0
 8003710:	e006      	b.n	8003720 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8003712:	2000      	movs	r0, #0
 8003714:	e02c      	b.n	8003770 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800371a:	4298      	cmp	r0, r3
 800371c:	d12a      	bne.n	8003774 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800371e:	3501      	adds	r5, #1
 8003720:	2d0c      	cmp	r5, #12
 8003722:	d818      	bhi.n	8003756 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <cmp_lfn+0x9c>)
 8003726:	5d58      	ldrb	r0, [r3, r5]
 8003728:	4438      	add	r0, r7
 800372a:	f7fe ff2b 	bl	8002584 <ld_word>
 800372e:	4604      	mov	r4, r0
		if (wc) {
 8003730:	f1b8 0f00 	cmp.w	r8, #0
 8003734:	d0ef      	beq.n	8003716 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003736:	2efe      	cmp	r6, #254	; 0xfe
 8003738:	d8eb      	bhi.n	8003712 <cmp_lfn+0x2a>
 800373a:	f000 fd43 	bl	80041c4 <ff_wtoupper>
 800373e:	4680      	mov	r8, r0
 8003740:	f106 0a01 	add.w	sl, r6, #1
 8003744:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8003748:	f000 fd3c 	bl	80041c4 <ff_wtoupper>
 800374c:	4580      	cmp	r8, r0
 800374e:	d1e0      	bne.n	8003712 <cmp_lfn+0x2a>
			wc = uc;
 8003750:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003752:	4656      	mov	r6, sl
 8003754:	e7e3      	b.n	800371e <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003756:	783b      	ldrb	r3, [r7, #0]
 8003758:	f013 0f40 	tst.w	r3, #64	; 0x40
 800375c:	d00c      	beq.n	8003778 <cmp_lfn+0x90>
 800375e:	f1b8 0f00 	cmp.w	r8, #0
 8003762:	d00b      	beq.n	800377c <cmp_lfn+0x94>
 8003764:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8003768:	b953      	cbnz	r3, 8003780 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800376a:	2001      	movs	r0, #1
 800376c:	e000      	b.n	8003770 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800376e:	2000      	movs	r0, #0
}
 8003770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003774:	2000      	movs	r0, #0
 8003776:	e7fb      	b.n	8003770 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8003778:	2001      	movs	r0, #1
 800377a:	e7f9      	b.n	8003770 <cmp_lfn+0x88>
 800377c:	2001      	movs	r0, #1
 800377e:	e7f7      	b.n	8003770 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003780:	2000      	movs	r0, #0
 8003782:	e7f5      	b.n	8003770 <cmp_lfn+0x88>
 8003784:	080043ac 	.word	0x080043ac

08003788 <dir_find>:
{
 8003788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800378c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800378e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003792:	2100      	movs	r1, #0
 8003794:	f7ff fc95 	bl	80030c2 <dir_sdi>
	if (res != FR_OK) return res;
 8003798:	4606      	mov	r6, r0
 800379a:	2800      	cmp	r0, #0
 800379c:	d164      	bne.n	8003868 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	6323      	str	r3, [r4, #48]	; 0x30
 80037a4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80037a8:	464f      	mov	r7, r9
 80037aa:	e00a      	b.n	80037c2 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	6323      	str	r3, [r4, #48]	; 0x30
 80037b2:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80037b4:	2100      	movs	r1, #0
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff fd88 	bl	80032cc <dir_next>
	} while (res == FR_OK);
 80037bc:	4606      	mov	r6, r0
 80037be:	2800      	cmp	r0, #0
 80037c0:	d152      	bne.n	8003868 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 80037c2:	69e1      	ldr	r1, [r4, #28]
 80037c4:	4640      	mov	r0, r8
 80037c6:	f7ff f95e 	bl	8002a86 <move_window>
		if (res != FR_OK) break;
 80037ca:	4606      	mov	r6, r0
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d14b      	bne.n	8003868 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 80037d0:	6a25      	ldr	r5, [r4, #32]
 80037d2:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d046      	beq.n	8003866 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80037d8:	7ae9      	ldrb	r1, [r5, #11]
 80037da:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80037de:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80037e0:	2be5      	cmp	r3, #229	; 0xe5
 80037e2:	d0e3      	beq.n	80037ac <dir_find+0x24>
 80037e4:	f011 0f08 	tst.w	r1, #8
 80037e8:	d001      	beq.n	80037ee <dir_find+0x66>
 80037ea:	2a0f      	cmp	r2, #15
 80037ec:	d1de      	bne.n	80037ac <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80037ee:	2a0f      	cmp	r2, #15
 80037f0:	d016      	beq.n	8003820 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80037f2:	b927      	cbnz	r7, 80037fe <dir_find+0x76>
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff f8ba 	bl	800296e <sum_sfn>
 80037fa:	4548      	cmp	r0, r9
 80037fc:	d034      	beq.n	8003868 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80037fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003802:	f013 0f01 	tst.w	r3, #1
 8003806:	d106      	bne.n	8003816 <dir_find+0x8e>
 8003808:	220b      	movs	r2, #11
 800380a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800380e:	4628      	mov	r0, r5
 8003810:	f7fe fee7 	bl	80025e2 <mem_cmp>
 8003814:	b340      	cbz	r0, 8003868 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	6323      	str	r3, [r4, #48]	; 0x30
 800381c:	27ff      	movs	r7, #255	; 0xff
 800381e:	e7c9      	b.n	80037b4 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003820:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8003824:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003828:	d1c4      	bne.n	80037b4 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800382a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800382e:	d006      	beq.n	800383e <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8003830:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003834:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003838:	6962      	ldr	r2, [r4, #20]
 800383a:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800383c:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800383e:	42bb      	cmp	r3, r7
 8003840:	d001      	beq.n	8003846 <dir_find+0xbe>
 8003842:	27ff      	movs	r7, #255	; 0xff
 8003844:	e7b6      	b.n	80037b4 <dir_find+0x2c>
 8003846:	7b6b      	ldrb	r3, [r5, #13]
 8003848:	454b      	cmp	r3, r9
 800384a:	d001      	beq.n	8003850 <dir_find+0xc8>
 800384c:	27ff      	movs	r7, #255	; 0xff
 800384e:	e7b1      	b.n	80037b4 <dir_find+0x2c>
 8003850:	4629      	mov	r1, r5
 8003852:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003856:	f7ff ff47 	bl	80036e8 <cmp_lfn>
 800385a:	b110      	cbz	r0, 8003862 <dir_find+0xda>
 800385c:	3f01      	subs	r7, #1
 800385e:	b2ff      	uxtb	r7, r7
 8003860:	e7a8      	b.n	80037b4 <dir_find+0x2c>
 8003862:	27ff      	movs	r7, #255	; 0xff
 8003864:	e7a6      	b.n	80037b4 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003866:	2604      	movs	r6, #4
}
 8003868:	4630      	mov	r0, r6
 800386a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800386e <follow_path>:
{
 800386e:	b530      	push	{r4, r5, lr}
 8003870:	b083      	sub	sp, #12
 8003872:	4604      	mov	r4, r0
 8003874:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8003876:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003878:	e001      	b.n	800387e <follow_path+0x10>
 800387a:	3301      	adds	r3, #1
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	2a2f      	cmp	r2, #47	; 0x2f
 8003884:	d0f9      	beq.n	800387a <follow_path+0xc>
 8003886:	2a5c      	cmp	r2, #92	; 0x5c
 8003888:	d0f7      	beq.n	800387a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800388a:	2200      	movs	r2, #0
 800388c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b1f      	cmp	r3, #31
 8003892:	d81e      	bhi.n	80038d2 <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800389a:	4611      	mov	r1, r2
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff fc10 	bl	80030c2 <dir_sdi>
 80038a2:	4603      	mov	r3, r0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	b003      	add	sp, #12
 80038a8:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80038aa:	2804      	cmp	r0, #4
 80038ac:	d1fa      	bne.n	80038a4 <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80038ae:	f012 0f04 	tst.w	r2, #4
 80038b2:	d1f7      	bne.n	80038a4 <follow_path+0x36>
 80038b4:	2305      	movs	r3, #5
 80038b6:	e7f5      	b.n	80038a4 <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80038b8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80038bc:	6960      	ldr	r0, [r4, #20]
 80038be:	89aa      	ldrh	r2, [r5, #12]
 80038c0:	fbb0 f3f2 	udiv	r3, r0, r2
 80038c4:	fb02 0313 	mls	r3, r2, r3, r0
 80038c8:	4419      	add	r1, r3
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7fe ff99 	bl	8002802 <ld_clust>
 80038d0:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80038d2:	a901      	add	r1, sp, #4
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff fdf1 	bl	80034bc <create_name>
			if (res != FR_OK) break;
 80038da:	4603      	mov	r3, r0
 80038dc:	2800      	cmp	r0, #0
 80038de:	d1e1      	bne.n	80038a4 <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff51 	bl	8003788 <dir_find>
			ns = dp->fn[NSFLAG];
 80038e6:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80038ea:	4603      	mov	r3, r0
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1dc      	bne.n	80038aa <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80038f0:	f012 0f04 	tst.w	r2, #4
 80038f4:	d1d6      	bne.n	80038a4 <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80038f6:	79a3      	ldrb	r3, [r4, #6]
 80038f8:	f013 0f10 	tst.w	r3, #16
 80038fc:	d1dc      	bne.n	80038b8 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 80038fe:	2305      	movs	r3, #5
 8003900:	e7d0      	b.n	80038a4 <follow_path+0x36>
	...

08003904 <dir_register>:
{
 8003904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003908:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800390a:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800390c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003910:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8003914:	f040 808d 	bne.w	8003a32 <dir_register+0x12e>
 8003918:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800391a:	2400      	movs	r4, #0
 800391c:	e000      	b.n	8003920 <dir_register+0x1c>
 800391e:	3401      	adds	r4, #1
 8003920:	6933      	ldr	r3, [r6, #16]
 8003922:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f9      	bne.n	800391e <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800392a:	f107 0824 	add.w	r8, r7, #36	; 0x24
 800392e:	220c      	movs	r2, #12
 8003930:	4641      	mov	r1, r8
 8003932:	a801      	add	r0, sp, #4
 8003934:	f7fe fe44 	bl	80025c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003938:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800393c:	f013 0f01 	tst.w	r3, #1
 8003940:	d01b      	beq.n	800397a <dir_register+0x76>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003948:	2501      	movs	r5, #1
 800394a:	2d63      	cmp	r5, #99	; 0x63
 800394c:	d80c      	bhi.n	8003968 <dir_register+0x64>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800394e:	462b      	mov	r3, r5
 8003950:	6932      	ldr	r2, [r6, #16]
 8003952:	a901      	add	r1, sp, #4
 8003954:	4640      	mov	r0, r8
 8003956:	f7fe ffb7 	bl	80028c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800395a:	4638      	mov	r0, r7
 800395c:	f7ff ff14 	bl	8003788 <dir_find>
			if (res != FR_OK) break;
 8003960:	4681      	mov	r9, r0
 8003962:	b908      	cbnz	r0, 8003968 <dir_register+0x64>
		for (n = 1; n < 100; n++) {
 8003964:	3501      	adds	r5, #1
 8003966:	e7f0      	b.n	800394a <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003968:	2d64      	cmp	r5, #100	; 0x64
 800396a:	d065      	beq.n	8003a38 <dir_register+0x134>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800396c:	f1b9 0f04 	cmp.w	r9, #4
 8003970:	d119      	bne.n	80039a6 <dir_register+0xa2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003972:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800397a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800397e:	f013 0f02 	tst.w	r3, #2
 8003982:	d014      	beq.n	80039ae <dir_register+0xaa>
 8003984:	340c      	adds	r4, #12
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <dir_register+0x13c>)
 8003988:	fba3 3404 	umull	r3, r4, r3, r4
 800398c:	08a4      	lsrs	r4, r4, #2
 800398e:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003990:	4621      	mov	r1, r4
 8003992:	4638      	mov	r0, r7
 8003994:	f7ff fd26 	bl	80033e4 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003998:	4681      	mov	r9, r0
 800399a:	b908      	cbnz	r0, 80039a0 <dir_register+0x9c>
 800399c:	3c01      	subs	r4, #1
 800399e:	d108      	bne.n	80039b2 <dir_register+0xae>
	if (res == FR_OK) {
 80039a0:	f1b9 0f00 	cmp.w	r9, #0
 80039a4:	d02b      	beq.n	80039fe <dir_register+0xfa>
}
 80039a6:	4648      	mov	r0, r9
 80039a8:	b005      	add	sp, #20
 80039aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80039ae:	2401      	movs	r4, #1
 80039b0:	e7ee      	b.n	8003990 <dir_register+0x8c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff fb82 	bl	80030c2 <dir_sdi>
		if (res == FR_OK) {
 80039be:	4681      	mov	r9, r0
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d1ed      	bne.n	80039a0 <dir_register+0x9c>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80039c4:	4640      	mov	r0, r8
 80039c6:	f7fe ffd2 	bl	800296e <sum_sfn>
 80039ca:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff f859 	bl	8002a86 <move_window>
				if (res != FR_OK) break;
 80039d4:	4681      	mov	r9, r0
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d1e2      	bne.n	80039a0 <dir_register+0x9c>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80039da:	462b      	mov	r3, r5
 80039dc:	b2e2      	uxtb	r2, r4
 80039de:	6a39      	ldr	r1, [r7, #32]
 80039e0:	6930      	ldr	r0, [r6, #16]
 80039e2:	f7fe ff35 	bl	8002850 <put_lfn>
				fs->wflag = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80039ea:	2100      	movs	r1, #0
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff fc6d 	bl	80032cc <dir_next>
			} while (res == FR_OK && --nent);
 80039f2:	4681      	mov	r9, r0
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1d3      	bne.n	80039a0 <dir_register+0x9c>
 80039f8:	3c01      	subs	r4, #1
 80039fa:	d1e7      	bne.n	80039cc <dir_register+0xc8>
 80039fc:	e7d0      	b.n	80039a0 <dir_register+0x9c>
		res = move_window(fs, dp->sect);
 80039fe:	69f9      	ldr	r1, [r7, #28]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff f840 	bl	8002a86 <move_window>
		if (res == FR_OK) {
 8003a06:	4681      	mov	r9, r0
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d1cc      	bne.n	80039a6 <dir_register+0xa2>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	2100      	movs	r1, #0
 8003a10:	6a38      	ldr	r0, [r7, #32]
 8003a12:	f7fe fde1 	bl	80025d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003a16:	220b      	movs	r2, #11
 8003a18:	4641      	mov	r1, r8
 8003a1a:	6a38      	ldr	r0, [r7, #32]
 8003a1c:	f7fe fdd0 	bl	80025c0 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	f003 0318 	and.w	r3, r3, #24
 8003a2a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	70f3      	strb	r3, [r6, #3]
 8003a30:	e7b9      	b.n	80039a6 <dir_register+0xa2>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003a32:	f04f 0906 	mov.w	r9, #6
 8003a36:	e7b6      	b.n	80039a6 <dir_register+0xa2>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003a38:	f04f 0907 	mov.w	r9, #7
 8003a3c:	e7b3      	b.n	80039a6 <dir_register+0xa2>
 8003a3e:	bf00      	nop
 8003a40:	4ec4ec4f 	.word	0x4ec4ec4f

08003a44 <f_mount>:
{
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	9001      	str	r0, [sp, #4]
 8003a4a:	9100      	str	r1, [sp, #0]
 8003a4c:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 8003a4e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003a50:	a803      	add	r0, sp, #12
 8003a52:	f7fe ff9d 	bl	8002990 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a56:	1e04      	subs	r4, r0, #0
 8003a58:	db1c      	blt.n	8003a94 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <f_mount+0x58>)
 8003a5c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 8003a60:	b125      	cbz	r5, 8003a6c <f_mount+0x28>
		clear_lock(cfs);
 8003a62:	4628      	mov	r0, r5
 8003a64:	f7fe fe90 	bl	8002788 <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	702b      	strb	r3, [r5, #0]
	if (fs) {
 8003a6c:	9b01      	ldr	r3, [sp, #4]
 8003a6e:	b10b      	cbz	r3, 8003a74 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8003a74:	9b01      	ldr	r3, [sp, #4]
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <f_mount+0x58>)
 8003a78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a7c:	b163      	cbz	r3, 8003a98 <f_mount+0x54>
 8003a7e:	2e01      	cmp	r6, #1
 8003a80:	d002      	beq.n	8003a88 <f_mount+0x44>
 8003a82:	2000      	movs	r0, #0
}
 8003a84:	b004      	add	sp, #16
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003a88:	2200      	movs	r2, #0
 8003a8a:	a901      	add	r1, sp, #4
 8003a8c:	4668      	mov	r0, sp
 8003a8e:	f7ff f851 	bl	8002b34 <find_volume>
	LEAVE_FF(fs, res);
 8003a92:	e7f7      	b.n	8003a84 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a94:	200b      	movs	r0, #11
 8003a96:	e7f5      	b.n	8003a84 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e7f3      	b.n	8003a84 <f_mount+0x40>
 8003a9c:	20000044 	.word	0x20000044

08003aa0 <f_open>:
{
 8003aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	b091      	sub	sp, #68	; 0x44
 8003aa6:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	f000 8111 	beq.w	8003cd0 <f_open+0x230>
 8003aae:	4615      	mov	r5, r2
 8003ab0:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003ab2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003ab6:	463a      	mov	r2, r7
 8003ab8:	a902      	add	r1, sp, #8
 8003aba:	a801      	add	r0, sp, #4
 8003abc:	f7ff f83a 	bl	8002b34 <find_volume>
	if (res == FR_OK) {
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	b130      	cbz	r0, 8003ad2 <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003ac4:	b10c      	cbz	r4, 8003aca <f_open+0x2a>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6033      	str	r3, [r6, #0]
}
 8003aca:	4620      	mov	r0, r4
 8003acc:	b011      	add	sp, #68	; 0x44
 8003ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8003ad2:	9b02      	ldr	r3, [sp, #8]
 8003ad4:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003ad6:	9901      	ldr	r1, [sp, #4]
 8003ad8:	a803      	add	r0, sp, #12
 8003ada:	f7ff fec8 	bl	800386e <follow_path>
		if (res == FR_OK) {
 8003ade:	4604      	mov	r4, r0
 8003ae0:	b960      	cbnz	r0, 8003afc <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003ae2:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db50      	blt.n	8003b8c <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003aea:	f037 0301 	bics.w	r3, r7, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2101      	movne	r1, #1
 8003af2:	2100      	moveq	r1, #0
 8003af4:	a803      	add	r0, sp, #12
 8003af6:	f7fe fd8b 	bl	8002610 <chk_lock>
 8003afa:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003afc:	f015 0f1c 	tst.w	r5, #28
 8003b00:	d05a      	beq.n	8003bb8 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8003b02:	2c00      	cmp	r4, #0
 8003b04:	d04e      	beq.n	8003ba4 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003b06:	2c04      	cmp	r4, #4
 8003b08:	d042      	beq.n	8003b90 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003b0a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003b0e:	2c00      	cmp	r4, #0
 8003b10:	d161      	bne.n	8003bd6 <f_open+0x136>
 8003b12:	f017 0f08 	tst.w	r7, #8
 8003b16:	d05e      	beq.n	8003bd6 <f_open+0x136>
				dw = GET_FATTIME();
 8003b18:	f7fe fcd4 	bl	80024c4 <get_fattime>
 8003b1c:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003b1e:	4601      	mov	r1, r0
 8003b20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b22:	300e      	adds	r0, #14
 8003b24:	f7fe fd42 	bl	80025ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003b28:	4629      	mov	r1, r5
 8003b2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b2c:	3016      	adds	r0, #22
 8003b2e:	f7fe fd3d 	bl	80025ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b34:	2220      	movs	r2, #32
 8003b36:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003b38:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003b3c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003b40:	4649      	mov	r1, r9
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7fe fe5d 	bl	8002802 <ld_clust>
 8003b48:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4640      	mov	r0, r8
 8003b50:	f7fe fe6a 	bl	8002828 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003b54:	2100      	movs	r1, #0
 8003b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b58:	301c      	adds	r0, #28
 8003b5a:	f7fe fd27 	bl	80025ac <st_dword>
					fs->wflag = 1;
 8003b5e:	9b02      	ldr	r3, [sp, #8]
 8003b60:	2201      	movs	r2, #1
 8003b62:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003b64:	b3bd      	cbz	r5, 8003bd6 <f_open+0x136>
						dw = fs->winsect;
 8003b66:	9b02      	ldr	r3, [sp, #8]
 8003b68:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4629      	mov	r1, r5
 8003b70:	a803      	add	r0, sp, #12
 8003b72:	f7ff fb6c 	bl	800324e <remove_chain>
						if (res == FR_OK) {
 8003b76:	4604      	mov	r4, r0
 8003b78:	bb68      	cbnz	r0, 8003bd6 <f_open+0x136>
							res = move_window(fs, dw);
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	9802      	ldr	r0, [sp, #8]
 8003b7e:	f7fe ff82 	bl	8002a86 <move_window>
 8003b82:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003b84:	3d01      	subs	r5, #1
 8003b86:	9b02      	ldr	r3, [sp, #8]
 8003b88:	615d      	str	r5, [r3, #20]
 8003b8a:	e024      	b.n	8003bd6 <f_open+0x136>
				res = FR_INVALID_NAME;
 8003b8c:	2406      	movs	r4, #6
 8003b8e:	e7b5      	b.n	8003afc <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003b90:	f7fe fd78 	bl	8002684 <enq_lock>
 8003b94:	b908      	cbnz	r0, 8003b9a <f_open+0xfa>
 8003b96:	2412      	movs	r4, #18
 8003b98:	e7b7      	b.n	8003b0a <f_open+0x6a>
 8003b9a:	a803      	add	r0, sp, #12
 8003b9c:	f7ff feb2 	bl	8003904 <dir_register>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	e7b2      	b.n	8003b0a <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003ba4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003ba8:	f013 0f11 	tst.w	r3, #17
 8003bac:	d112      	bne.n	8003bd4 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003bae:	f015 0f04 	tst.w	r5, #4
 8003bb2:	d0ac      	beq.n	8003b0e <f_open+0x6e>
 8003bb4:	2408      	movs	r4, #8
 8003bb6:	e00e      	b.n	8003bd6 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8003bb8:	b96c      	cbnz	r4, 8003bd6 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003bbe:	f013 0f10 	tst.w	r3, #16
 8003bc2:	d14e      	bne.n	8003c62 <f_open+0x1c2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003bc4:	f015 0f02 	tst.w	r5, #2
 8003bc8:	d005      	beq.n	8003bd6 <f_open+0x136>
 8003bca:	f013 0f01 	tst.w	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <f_open+0x136>
						res = FR_DENIED;
 8003bd0:	2407      	movs	r4, #7
 8003bd2:	e016      	b.n	8003c02 <f_open+0x162>
					res = FR_DENIED;
 8003bd4:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8003bd6:	b9a4      	cbnz	r4, 8003c02 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003bd8:	f017 0f08 	tst.w	r7, #8
 8003bdc:	d001      	beq.n	8003be2 <f_open+0x142>
				mode |= FA_MODIFIED;
 8003bde:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003be2:	9b02      	ldr	r3, [sp, #8]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8003be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bea:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003bec:	f037 0301 	bics.w	r3, r7, #1
 8003bf0:	bf14      	ite	ne
 8003bf2:	2101      	movne	r1, #1
 8003bf4:	2100      	moveq	r1, #0
 8003bf6:	a803      	add	r0, sp, #12
 8003bf8:	f7fe fd54 	bl	80026a4 <inc_lock>
 8003bfc:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d064      	beq.n	8003ccc <f_open+0x22c>
		if (res == FR_OK) {
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	f47f af5e 	bne.w	8003ac4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003c08:	9d02      	ldr	r5, [sp, #8]
 8003c0a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003c0e:	4641      	mov	r1, r8
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7fe fdf6 	bl	8002802 <ld_clust>
 8003c16:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003c18:	f108 001c 	add.w	r0, r8, #28
 8003c1c:	f7fe fcb7 	bl	800258e <ld_dword>
 8003c20:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003c22:	2100      	movs	r1, #0
 8003c24:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003c26:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8003c28:	88eb      	ldrh	r3, [r5, #6]
 8003c2a:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8003c2c:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8003c2e:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003c30:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003c32:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003c34:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8003c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	f7fe fccb 	bl	80025d8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003c42:	f017 0f20 	tst.w	r7, #32
 8003c46:	f43f af3d 	beq.w	8003ac4 <f_open+0x24>
 8003c4a:	68f5      	ldr	r5, [r6, #12]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	f43f af39 	beq.w	8003ac4 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003c52:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003c54:	9b02      	ldr	r3, [sp, #8]
 8003c56:	895a      	ldrh	r2, [r3, #10]
 8003c58:	899f      	ldrh	r7, [r3, #12]
 8003c5a:	fb07 f702 	mul.w	r7, r7, r2
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003c5e:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003c60:	e005      	b.n	8003c6e <f_open+0x1ce>
					res = FR_NO_FILE;
 8003c62:	2404      	movs	r4, #4
 8003c64:	e7cd      	b.n	8003c02 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003c66:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003c6a:	d00b      	beq.n	8003c84 <f_open+0x1e4>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003c6c:	1bed      	subs	r5, r5, r7
 8003c6e:	b95c      	cbnz	r4, 8003c88 <f_open+0x1e8>
 8003c70:	42bd      	cmp	r5, r7
 8003c72:	d909      	bls.n	8003c88 <f_open+0x1e8>
					clst = get_fat(&fp->obj, clst);
 8003c74:	4630      	mov	r0, r6
 8003c76:	f7ff f9a6 	bl	8002fc6 <get_fat>
 8003c7a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d8f2      	bhi.n	8003c66 <f_open+0x1c6>
 8003c80:	2402      	movs	r4, #2
 8003c82:	e7f0      	b.n	8003c66 <f_open+0x1c6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003c84:	2401      	movs	r4, #1
 8003c86:	e7f1      	b.n	8003c6c <f_open+0x1cc>
				fp->clust = clst;
 8003c88:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003c8a:	2c00      	cmp	r4, #0
 8003c8c:	f47f af1a 	bne.w	8003ac4 <f_open+0x24>
 8003c90:	9f02      	ldr	r7, [sp, #8]
 8003c92:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 8003c96:	fbb5 f3f9 	udiv	r3, r5, r9
 8003c9a:	fb09 5313 	mls	r3, r9, r3, r5
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f43f af10 	beq.w	8003ac4 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f7fe fd8d 	bl	80027c4 <clust2sect>
 8003caa:	b908      	cbnz	r0, 8003cb0 <f_open+0x210>
						res = FR_INT_ERR;
 8003cac:	2402      	movs	r4, #2
 8003cae:	e70a      	b.n	8003ac6 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003cb0:	fbb5 f2f9 	udiv	r2, r5, r9
 8003cb4:	4402      	add	r2, r0
 8003cb6:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4641      	mov	r1, r8
 8003cbc:	7878      	ldrb	r0, [r7, #1]
 8003cbe:	f7fe fc3d 	bl	800253c <disk_read>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	f43f aefe 	beq.w	8003ac4 <f_open+0x24>
 8003cc8:	2401      	movs	r4, #1
 8003cca:	e6fc      	b.n	8003ac6 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003ccc:	2402      	movs	r4, #2
 8003cce:	e6f9      	b.n	8003ac4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8003cd0:	2409      	movs	r4, #9
 8003cd2:	e6fa      	b.n	8003aca <f_open+0x2a>

08003cd4 <f_write>:
{
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	4604      	mov	r4, r0
 8003cdc:	460f      	mov	r7, r1
 8003cde:	4615      	mov	r5, r2
 8003ce0:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003ce8:	9001      	str	r0, [sp, #4]
 8003cea:	a903      	add	r1, sp, #12
 8003cec:	f7fe fe7f 	bl	80029ee <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003cf0:	9000      	str	r0, [sp, #0]
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d14b      	bne.n	8003d8e <f_write+0xba>
 8003cf6:	7d63      	ldrb	r3, [r4, #21]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d147      	bne.n	8003d8e <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003cfe:	7d23      	ldrb	r3, [r4, #20]
 8003d00:	f013 0f02 	tst.w	r3, #2
 8003d04:	f000 80ed 	beq.w	8003ee2 <f_write+0x20e>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003d08:	69a3      	ldr	r3, [r4, #24]
 8003d0a:	42eb      	cmn	r3, r5
 8003d0c:	f0c0 80b7 	bcc.w	8003e7e <f_write+0x1aa>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003d10:	43dd      	mvns	r5, r3
 8003d12:	e0b4      	b.n	8003e7e <f_write+0x1aa>
					if (fp->cltbl) {
 8003d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03d      	beq.n	8003d96 <f_write+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7fe fd5e 	bl	80027dc <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003d20:	2800      	cmp	r0, #0
 8003d22:	f000 80d9 	beq.w	8003ed8 <f_write+0x204>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003d26:	2801      	cmp	r0, #1
 8003d28:	d03a      	beq.n	8003da0 <f_write+0xcc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003d2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d2e:	d03e      	beq.n	8003dae <f_write+0xda>
				fp->clust = clst;			/* Update current cluster */
 8003d30:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003d32:	68a3      	ldr	r3, [r4, #8]
 8003d34:	b903      	cbnz	r3, 8003d38 <f_write+0x64>
 8003d36:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003d38:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db3d      	blt.n	8003dbc <f_write+0xe8>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003d40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003d44:	69e1      	ldr	r1, [r4, #28]
 8003d46:	4658      	mov	r0, fp
 8003d48:	f7fe fd3c 	bl	80027c4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003d4c:	4681      	mov	r9, r0
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d049      	beq.n	8003de6 <f_write+0x112>
			sect += csect;
 8003d52:	44b1      	add	r9, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003d54:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003d58:	fbb5 faf3 	udiv	sl, r5, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	d860      	bhi.n	8003e22 <f_write+0x14e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003d60:	eb06 030a 	add.w	r3, r6, sl
 8003d64:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <f_write+0x9c>
					cc = fs->csize - csect;
 8003d6c:	eba2 0a06 	sub.w	sl, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003d70:	4653      	mov	r3, sl
 8003d72:	464a      	mov	r2, r9
 8003d74:	4639      	mov	r1, r7
 8003d76:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003d7a:	f7fe fbeb 	bl	8002554 <disk_write>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d038      	beq.n	8003df4 <f_write+0x120>
 8003d82:	f04f 0a01 	mov.w	sl, #1
 8003d86:	f884 a015 	strb.w	sl, [r4, #21]
 8003d8a:	f8cd a000 	str.w	sl, [sp]
}
 8003d8e:	9800      	ldr	r0, [sp, #0]
 8003d90:	b005      	add	sp, #20
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003d96:	69e1      	ldr	r1, [r4, #28]
 8003d98:	9801      	ldr	r0, [sp, #4]
 8003d9a:	f7ff f9f2 	bl	8003182 <create_chain>
 8003d9e:	e7bf      	b.n	8003d20 <f_write+0x4c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003da0:	f04f 0a02 	mov.w	sl, #2
 8003da4:	f884 a015 	strb.w	sl, [r4, #21]
 8003da8:	f8cd a000 	str.w	sl, [sp]
 8003dac:	e7ef      	b.n	8003d8e <f_write+0xba>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003dae:	f04f 0a01 	mov.w	sl, #1
 8003db2:	f884 a015 	strb.w	sl, [r4, #21]
 8003db6:	f8cd a000 	str.w	sl, [sp]
 8003dba:	e7e8      	b.n	8003d8e <f_write+0xba>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	6a22      	ldr	r2, [r4, #32]
 8003dc0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003dc4:	9803      	ldr	r0, [sp, #12]
 8003dc6:	7840      	ldrb	r0, [r0, #1]
 8003dc8:	f7fe fbc4 	bl	8002554 <disk_write>
 8003dcc:	b920      	cbnz	r0, 8003dd8 <f_write+0x104>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003dce:	7d23      	ldrb	r3, [r4, #20]
 8003dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd4:	7523      	strb	r3, [r4, #20]
 8003dd6:	e7b3      	b.n	8003d40 <f_write+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003dd8:	f04f 0a01 	mov.w	sl, #1
 8003ddc:	f884 a015 	strb.w	sl, [r4, #21]
 8003de0:	f8cd a000 	str.w	sl, [sp]
 8003de4:	e7d3      	b.n	8003d8e <f_write+0xba>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003de6:	f04f 0a02 	mov.w	sl, #2
 8003dea:	f884 a015 	strb.w	sl, [r4, #21]
 8003dee:	f8cd a000 	str.w	sl, [sp]
 8003df2:	e7cc      	b.n	8003d8e <f_write+0xba>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003df4:	6a21      	ldr	r1, [r4, #32]
 8003df6:	eba1 0109 	sub.w	r1, r1, r9
 8003dfa:	4551      	cmp	r1, sl
 8003dfc:	d304      	bcc.n	8003e08 <f_write+0x134>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	899e      	ldrh	r6, [r3, #12]
 8003e02:	fb0a f606 	mul.w	r6, sl, r6
				continue;
 8003e06:	e02b      	b.n	8003e60 <f_write+0x18c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	899a      	ldrh	r2, [r3, #12]
 8003e0c:	fb02 7101 	mla	r1, r2, r1, r7
 8003e10:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003e14:	f7fe fbd4 	bl	80025c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003e18:	7d23      	ldrb	r3, [r4, #20]
 8003e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1e:	7523      	strb	r3, [r4, #20]
 8003e20:	e7ed      	b.n	8003dfe <f_write+0x12a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003e22:	6a23      	ldr	r3, [r4, #32]
 8003e24:	454b      	cmp	r3, r9
 8003e26:	d003      	beq.n	8003e30 <f_write+0x15c>
				fp->fptr < fp->obj.objsize &&
 8003e28:	69a2      	ldr	r2, [r4, #24]
 8003e2a:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d342      	bcc.n	8003eb6 <f_write+0x1e2>
			fp->sect = sect;
 8003e30:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	899e      	ldrh	r6, [r3, #12]
 8003e38:	69a0      	ldr	r0, [r4, #24]
 8003e3a:	fbb0 f3f6 	udiv	r3, r0, r6
 8003e3e:	fb06 0313 	mls	r3, r6, r3, r0
 8003e42:	1af6      	subs	r6, r6, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003e44:	42b5      	cmp	r5, r6
 8003e46:	d200      	bcs.n	8003e4a <f_write+0x176>
 8003e48:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003e4a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003e4e:	4632      	mov	r2, r6
 8003e50:	4639      	mov	r1, r7
 8003e52:	4418      	add	r0, r3
 8003e54:	f7fe fbb4 	bl	80025c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003e58:	7d23      	ldrb	r3, [r4, #20]
 8003e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e5e:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8003e60:	4437      	add	r7, r6
 8003e62:	69a3      	ldr	r3, [r4, #24]
 8003e64:	4433      	add	r3, r6
 8003e66:	61a3      	str	r3, [r4, #24]
 8003e68:	68e2      	ldr	r2, [r4, #12]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bf38      	it	cc
 8003e6e:	4613      	movcc	r3, r2
 8003e70:	60e3      	str	r3, [r4, #12]
 8003e72:	f8d8 3000 	ldr.w	r3, [r8]
 8003e76:	4433      	add	r3, r6
 8003e78:	f8c8 3000 	str.w	r3, [r8]
 8003e7c:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 8003e7e:	b35d      	cbz	r5, 8003ed8 <f_write+0x204>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003e80:	69a1      	ldr	r1, [r4, #24]
 8003e82:	9a03      	ldr	r2, [sp, #12]
 8003e84:	8996      	ldrh	r6, [r2, #12]
 8003e86:	fbb1 f3f6 	udiv	r3, r1, r6
 8003e8a:	fb06 1313 	mls	r3, r6, r3, r1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1d0      	bne.n	8003e34 <f_write+0x160>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003e92:	fbb1 f6f6 	udiv	r6, r1, r6
 8003e96:	8953      	ldrh	r3, [r2, #10]
 8003e98:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8003e9a:	401e      	ands	r6, r3
 8003e9c:	f47f af4c 	bne.w	8003d38 <f_write+0x64>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	f47f af37 	bne.w	8003d14 <f_write+0x40>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8003ea6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	f47f af39 	bne.w	8003d20 <f_write+0x4c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003eae:	9801      	ldr	r0, [sp, #4]
 8003eb0:	f7ff f967 	bl	8003182 <create_chain>
 8003eb4:	e734      	b.n	8003d20 <f_write+0x4c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	464a      	mov	r2, r9
 8003eba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003ebe:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003ec2:	f7fe fb3b 	bl	800253c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d0b2      	beq.n	8003e30 <f_write+0x15c>
					ABORT(fs, FR_DISK_ERR);
 8003eca:	f04f 0a01 	mov.w	sl, #1
 8003ece:	f884 a015 	strb.w	sl, [r4, #21]
 8003ed2:	f8cd a000 	str.w	sl, [sp]
 8003ed6:	e75a      	b.n	8003d8e <f_write+0xba>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8003ed8:	7d23      	ldrb	r3, [r4, #20]
 8003eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ede:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8003ee0:	e755      	b.n	8003d8e <f_write+0xba>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	e752      	b.n	8003d8e <f_write+0xba>

08003ee8 <putc_bfd>:
{
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	4604      	mov	r4, r0
 8003eee:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8003ef0:	290a      	cmp	r1, #10
 8003ef2:	d00d      	beq.n	8003f10 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 8003ef4:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db08      	blt.n	8003f0c <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 8003efa:	1c5e      	adds	r6, r3, #1
 8003efc:	4423      	add	r3, r4
 8003efe:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8003f00:	2e3c      	cmp	r6, #60	; 0x3c
 8003f02:	dc09      	bgt.n	8003f18 <putc_bfd+0x30>
	pb->idx = i;
 8003f04:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8003f06:	68a3      	ldr	r3, [r4, #8]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60a3      	str	r3, [r4, #8]
}
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8003f10:	210d      	movs	r1, #13
 8003f12:	f7ff ffe9 	bl	8003ee8 <putc_bfd>
 8003f16:	e7ed      	b.n	8003ef4 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8003f18:	4621      	mov	r1, r4
 8003f1a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8003f1e:	ab01      	add	r3, sp, #4
 8003f20:	4632      	mov	r2, r6
 8003f22:	f7ff fed7 	bl	8003cd4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	429e      	cmp	r6, r3
 8003f2a:	d002      	beq.n	8003f32 <putc_bfd+0x4a>
 8003f2c:	f04f 36ff 	mov.w	r6, #4294967295
 8003f30:	e7e8      	b.n	8003f04 <putc_bfd+0x1c>
 8003f32:	2600      	movs	r6, #0
 8003f34:	e7e6      	b.n	8003f04 <putc_bfd+0x1c>

08003f36 <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8003f36:	6842      	ldr	r2, [r0, #4]
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	db10      	blt.n	8003f5e <putc_flush+0x28>
{
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8003f42:	4601      	mov	r1, r0
 8003f44:	f851 0b0c 	ldr.w	r0, [r1], #12
 8003f48:	ab01      	add	r3, sp, #4
 8003f4a:	f7ff fec3 	bl	8003cd4 <f_write>
 8003f4e:	b948      	cbnz	r0, 8003f64 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8003f50:	6862      	ldr	r2, [r4, #4]
 8003f52:	9b01      	ldr	r3, [sp, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d108      	bne.n	8003f6a <putc_flush+0x34>
 8003f58:	68a0      	ldr	r0, [r4, #8]
}
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd10      	pop	{r4, pc}
	return EOF;
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f62:	4770      	bx	lr
	return EOF;
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	e7f7      	b.n	8003f5a <putc_flush+0x24>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	e7f4      	b.n	8003f5a <putc_flush+0x24>

08003f70 <f_sync>:
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003f76:	a901      	add	r1, sp, #4
 8003f78:	f7fe fd39 	bl	80029ee <validate>
	if (res == FR_OK) {
 8003f7c:	b970      	cbnz	r0, 8003f9c <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003f7e:	7d23      	ldrb	r3, [r4, #20]
 8003f80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f84:	d00a      	beq.n	8003f9c <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003f86:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f8a:	d109      	bne.n	8003fa0 <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 8003f8c:	f7fe fa9a 	bl	80024c4 <get_fattime>
 8003f90:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 8003f92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f94:	9801      	ldr	r0, [sp, #4]
 8003f96:	f7fe fd76 	bl	8002a86 <move_window>
				if (res == FR_OK) {
 8003f9a:	b178      	cbz	r0, 8003fbc <f_sync+0x4c>
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	6a22      	ldr	r2, [r4, #32]
 8003fa4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003fa8:	9801      	ldr	r0, [sp, #4]
 8003faa:	7840      	ldrb	r0, [r0, #1]
 8003fac:	f7fe fad2 	bl	8002554 <disk_write>
 8003fb0:	bb40      	cbnz	r0, 8004004 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003fb2:	7d23      	ldrb	r3, [r4, #20]
 8003fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb8:	7523      	strb	r3, [r4, #20]
 8003fba:	e7e7      	b.n	8003f8c <f_sync+0x1c>
					dir = fp->dir_ptr;
 8003fbc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003fbe:	7af3      	ldrb	r3, [r6, #11]
 8003fc0:	f043 0320 	orr.w	r3, r3, #32
 8003fc4:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003fc6:	68a2      	ldr	r2, [r4, #8]
 8003fc8:	4631      	mov	r1, r6
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	f7fe fc2c 	bl	8002828 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003fd0:	68e1      	ldr	r1, [r4, #12]
 8003fd2:	f106 001c 	add.w	r0, r6, #28
 8003fd6:	f7fe fae9 	bl	80025ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003fda:	4629      	mov	r1, r5
 8003fdc:	f106 0016 	add.w	r0, r6, #22
 8003fe0:	f7fe fae4 	bl	80025ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	f106 0012 	add.w	r0, r6, #18
 8003fea:	f7fe fadb 	bl	80025a4 <st_word>
					fs->wflag = 1;
 8003fee:	9b01      	ldr	r3, [sp, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003ff4:	9801      	ldr	r0, [sp, #4]
 8003ff6:	f7ff fa1d 	bl	8003434 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003ffa:	7d23      	ldrb	r3, [r4, #20]
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	7523      	strb	r3, [r4, #20]
 8004002:	e7cb      	b.n	8003f9c <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004004:	2001      	movs	r0, #1
 8004006:	e7c9      	b.n	8003f9c <f_sync+0x2c>

08004008 <f_close>:
{
 8004008:	b510      	push	{r4, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800400e:	f7ff ffaf 	bl	8003f70 <f_sync>
	if (res == FR_OK)
 8004012:	b108      	cbz	r0, 8004018 <f_close+0x10>
}
 8004014:	b002      	add	sp, #8
 8004016:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004018:	a901      	add	r1, sp, #4
 800401a:	4620      	mov	r0, r4
 800401c:	f7fe fce7 	bl	80029ee <validate>
		if (res == FR_OK) {
 8004020:	2800      	cmp	r0, #0
 8004022:	d1f7      	bne.n	8004014 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004024:	6920      	ldr	r0, [r4, #16]
 8004026:	f7fe fb8f 	bl	8002748 <dec_lock>
			if (res == FR_OK)
 800402a:	2800      	cmp	r0, #0
 800402c:	d1f2      	bne.n	8004014 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800402e:	6020      	str	r0, [r4, #0]
 8004030:	e7f0      	b.n	8004014 <f_close+0xc>

08004032 <f_getfree>:
{
 8004032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	9001      	str	r0, [sp, #4]
 800403a:	4688      	mov	r8, r1
 800403c:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	a907      	add	r1, sp, #28
 8004042:	a801      	add	r0, sp, #4
 8004044:	f7fe fd76 	bl	8002b34 <find_volume>
	if (res == FR_OK) {
 8004048:	4681      	mov	r9, r0
 800404a:	b940      	cbnz	r0, 800405e <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	69dd      	ldr	r5, [r3, #28]
 8004054:	1ea9      	subs	r1, r5, #2
 8004056:	428a      	cmp	r2, r1
 8004058:	d805      	bhi.n	8004066 <f_getfree+0x34>
			*nclst = fs->free_clst;
 800405a:	f8c8 2000 	str.w	r2, [r8]
}
 800405e:	4648      	mov	r0, r9
 8004060:	b009      	add	sp, #36	; 0x24
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8004066:	781e      	ldrb	r6, [r3, #0]
 8004068:	2e01      	cmp	r6, #1
 800406a:	d005      	beq.n	8004078 <f_getfree+0x46>
					clst = fs->n_fatent; sect = fs->fatbase;
 800406c:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
					i = 0; p = 0;
 8004070:	2400      	movs	r4, #0
 8004072:	4626      	mov	r6, r4
			nfree = 0;
 8004074:	4627      	mov	r7, r4
 8004076:	e02f      	b.n	80040d8 <f_getfree+0xa6>
				clst = 2; obj.fs = fs;
 8004078:	9302      	str	r3, [sp, #8]
 800407a:	2402      	movs	r4, #2
			nfree = 0;
 800407c:	2700      	movs	r7, #0
 800407e:	e004      	b.n	800408a <f_getfree+0x58>
				} while (++clst < fs->n_fatent);
 8004080:	3401      	adds	r4, #1
 8004082:	9b07      	ldr	r3, [sp, #28]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	42a3      	cmp	r3, r4
 8004088:	d935      	bls.n	80040f6 <f_getfree+0xc4>
					stat = get_fat(&obj, clst);
 800408a:	4621      	mov	r1, r4
 800408c:	a802      	add	r0, sp, #8
 800408e:	f7fe ff9a 	bl	8002fc6 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004092:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004096:	d02d      	beq.n	80040f4 <f_getfree+0xc2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004098:	2801      	cmp	r0, #1
 800409a:	d035      	beq.n	8004108 <f_getfree+0xd6>
					if (stat == 0) nfree++;
 800409c:	2800      	cmp	r0, #0
 800409e:	d1ef      	bne.n	8004080 <f_getfree+0x4e>
 80040a0:	3701      	adds	r7, #1
 80040a2:	e7ed      	b.n	8004080 <f_getfree+0x4e>
							res = move_window(fs, sect++);
 80040a4:	f10a 0b01 	add.w	fp, sl, #1
 80040a8:	4651      	mov	r1, sl
 80040aa:	9807      	ldr	r0, [sp, #28]
 80040ac:	f7fe fceb 	bl	8002a86 <move_window>
							if (res != FR_OK) break;
 80040b0:	4681      	mov	r9, r0
 80040b2:	bb00      	cbnz	r0, 80040f6 <f_getfree+0xc4>
							p = fs->win;
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	f103 0438 	add.w	r4, r3, #56	; 0x38
							i = SS(fs);
 80040ba:	899e      	ldrh	r6, [r3, #12]
							res = move_window(fs, sect++);
 80040bc:	46da      	mov	sl, fp
 80040be:	e00d      	b.n	80040dc <f_getfree+0xaa>
							if (ld_word(p) == 0) nfree++;
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7fe fa5f 	bl	8002584 <ld_word>
 80040c6:	b900      	cbnz	r0, 80040ca <f_getfree+0x98>
 80040c8:	3701      	adds	r7, #1
							p += 2; i -= 2;
 80040ca:	3402      	adds	r4, #2
 80040cc:	3e02      	subs	r6, #2
 80040ce:	e001      	b.n	80040d4 <f_getfree+0xa2>
							p += 4; i -= 4;
 80040d0:	3404      	adds	r4, #4
 80040d2:	3e04      	subs	r6, #4
					} while (--clst);
 80040d4:	3d01      	subs	r5, #1
 80040d6:	d00e      	beq.n	80040f6 <f_getfree+0xc4>
						if (i == 0) {
 80040d8:	2e00      	cmp	r6, #0
 80040da:	d0e3      	beq.n	80040a4 <f_getfree+0x72>
						if (fs->fs_type == FS_FAT16) {
 80040dc:	9b07      	ldr	r3, [sp, #28]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d0ed      	beq.n	80040c0 <f_getfree+0x8e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7fe fa52 	bl	800258e <ld_dword>
 80040ea:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80040ee:	d1ef      	bne.n	80040d0 <f_getfree+0x9e>
 80040f0:	3701      	adds	r7, #1
 80040f2:	e7ed      	b.n	80040d0 <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80040f4:	46b1      	mov	r9, r6
			*nclst = nfree;			/* Return the free clusters */
 80040f6:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80040fa:	9b07      	ldr	r3, [sp, #28]
 80040fc:	619f      	str	r7, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80040fe:	791a      	ldrb	r2, [r3, #4]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	711a      	strb	r2, [r3, #4]
 8004106:	e7aa      	b.n	800405e <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004108:	f04f 0902 	mov.w	r9, #2
 800410c:	e7f3      	b.n	80040f6 <f_getfree+0xc4>

0800410e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800410e:	b510      	push	{r4, lr}
 8004110:	b094      	sub	sp, #80	; 0x50
 8004112:	4604      	mov	r4, r0
	putbuff pb;


	putc_init(&pb, fp);
 8004114:	a801      	add	r0, sp, #4
 8004116:	f7fe fc65 	bl	80029e4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800411a:	7821      	ldrb	r1, [r4, #0]
 800411c:	b121      	cbz	r1, 8004128 <f_puts+0x1a>
 800411e:	3401      	adds	r4, #1
 8004120:	a801      	add	r0, sp, #4
 8004122:	f7ff fee1 	bl	8003ee8 <putc_bfd>
 8004126:	e7f8      	b.n	800411a <f_puts+0xc>
	return putc_flush(&pb);
 8004128:	a801      	add	r0, sp, #4
 800412a:	f7ff ff04 	bl	8003f36 <putc_flush>
}
 800412e:	b014      	add	sp, #80	; 0x50
 8004130:	bd10      	pop	{r4, pc}
	...

08004134 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <FATFS_LinkDriverEx+0x44>)
 8004136:	7a5b      	ldrb	r3, [r3, #9]
 8004138:	b9e3      	cbnz	r3, 8004174 <FATFS_LinkDriverEx+0x40>
{
 800413a:	b470      	push	{r4, r5, r6}
 800413c:	4604      	mov	r4, r0
 800413e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <FATFS_LinkDriverEx+0x44>)
 8004144:	7a5d      	ldrb	r5, [r3, #9]
 8004146:	b2ed      	uxtb	r5, r5
 8004148:	2600      	movs	r6, #0
 800414a:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800414c:	7a5d      	ldrb	r5, [r3, #9]
 800414e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004152:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004154:	7a5c      	ldrb	r4, [r3, #9]
 8004156:	441c      	add	r4, r3
 8004158:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800415a:	7a5a      	ldrb	r2, [r3, #9]
 800415c:	1c54      	adds	r4, r2, #1
 800415e:	b2e4      	uxtb	r4, r4
 8004160:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8004162:	3230      	adds	r2, #48	; 0x30
 8004164:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004166:	233a      	movs	r3, #58	; 0x3a
 8004168:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800416a:	232f      	movs	r3, #47	; 0x2f
 800416c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800416e:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8004170:	bc70      	pop	{r4, r5, r6}
 8004172:	4770      	bx	lr
  uint8_t ret = 1;
 8004174:	2001      	movs	r0, #1
}
 8004176:	4770      	bx	lr
 8004178:	2000026c 	.word	0x2000026c

0800417c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800417c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	f7ff ffd8 	bl	8004134 <FATFS_LinkDriverEx>
}
 8004184:	bd08      	pop	{r3, pc}
	...

08004188 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004188:	287f      	cmp	r0, #127	; 0x7f
 800418a:	d917      	bls.n	80041bc <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800418c:	b199      	cbz	r1, 80041b6 <ff_convert+0x2e>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800418e:	28ff      	cmp	r0, #255	; 0xff
 8004190:	d813      	bhi.n	80041ba <ff_convert+0x32>
 8004192:	3880      	subs	r0, #128	; 0x80
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <ff_convert+0x38>)
 8004196:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800419a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800419c:	3301      	adds	r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b7f      	cmp	r3, #127	; 0x7f
 80041a2:	d804      	bhi.n	80041ae <ff_convert+0x26>
				if (chr == Tbl[c]) break;
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <ff_convert+0x38>)
 80041a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80041aa:	4282      	cmp	r2, r0
 80041ac:	d1f6      	bne.n	800419c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
 80041ae:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80041b2:	b2c0      	uxtb	r0, r0
 80041b4:	4770      	bx	lr
			for (c = 0; c < 0x80; c++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	e7f2      	b.n	80041a0 <ff_convert+0x18>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80041ba:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	080043bc 	.word	0x080043bc

080041c4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80041c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80041c8:	d207      	bcs.n	80041da <ff_wtoupper+0x16>
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 80041cc:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d040      	beq.n	8004254 <ff_wtoupper+0x90>
 80041d2:	4290      	cmp	r0, r2
 80041d4:	d33e      	bcc.n	8004254 <ff_wtoupper+0x90>
{
 80041d6:	b4f0      	push	{r4, r5, r6, r7}
 80041d8:	e006      	b.n	80041e8 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <ff_wtoupper+0x98>)
 80041dc:	e7f6      	b.n	80041cc <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80041de:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 80041e0:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80041e2:	b1ca      	cbz	r2, 8004218 <ff_wtoupper+0x54>
 80041e4:	4290      	cmp	r0, r2
 80041e6:	d317      	bcc.n	8004218 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80041e8:	1d1d      	adds	r5, r3, #4
 80041ea:	885b      	ldrh	r3, [r3, #2]
 80041ec:	0a19      	lsrs	r1, r3, #8
 80041ee:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 80041f0:	189c      	adds	r4, r3, r2
 80041f2:	42a0      	cmp	r0, r4
 80041f4:	db04      	blt.n	8004200 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80041f6:	2900      	cmp	r1, #0
 80041f8:	d1f1      	bne.n	80041de <ff_wtoupper+0x1a>
 80041fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80041fe:	e7ef      	b.n	80041e0 <ff_wtoupper+0x1c>
			switch (cmd) {
 8004200:	2908      	cmp	r1, #8
 8004202:	d809      	bhi.n	8004218 <ff_wtoupper+0x54>
 8004204:	e8df f001 	tbb	[pc, r1]
 8004208:	13100a05 	.word	0x13100a05
 800420c:	1f1c1916 	.word	0x1f1c1916
 8004210:	22          	.byte	0x22
 8004211:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8004212:	1a86      	subs	r6, r0, r2
 8004214:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 8004218:	bcf0      	pop	{r4, r5, r6, r7}
 800421a:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800421c:	1a82      	subs	r2, r0, r2
 800421e:	f002 0301 	and.w	r3, r2, #1
 8004222:	1ac0      	subs	r0, r0, r3
 8004224:	b280      	uxth	r0, r0
 8004226:	e7f7      	b.n	8004218 <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 8004228:	3810      	subs	r0, #16
 800422a:	b280      	uxth	r0, r0
 800422c:	e7f4      	b.n	8004218 <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800422e:	3820      	subs	r0, #32
 8004230:	b280      	uxth	r0, r0
 8004232:	e7f1      	b.n	8004218 <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004234:	3830      	subs	r0, #48	; 0x30
 8004236:	b280      	uxth	r0, r0
 8004238:	e7ee      	b.n	8004218 <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800423a:	381a      	subs	r0, #26
 800423c:	b280      	uxth	r0, r0
 800423e:	e7eb      	b.n	8004218 <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 8004240:	3008      	adds	r0, #8
 8004242:	b280      	uxth	r0, r0
 8004244:	e7e8      	b.n	8004218 <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004246:	3850      	subs	r0, #80	; 0x50
 8004248:	b280      	uxth	r0, r0
 800424a:	e7e5      	b.n	8004218 <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800424c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8004250:	b280      	uxth	r0, r0
 8004252:	e7e1      	b.n	8004218 <ff_wtoupper+0x54>
}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	080044bc 	.word	0x080044bc
 800425c:	080046b0 	.word	0x080046b0

08004260 <__libc_init_array>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4d0d      	ldr	r5, [pc, #52]	; (8004298 <__libc_init_array+0x38>)
 8004264:	4c0d      	ldr	r4, [pc, #52]	; (800429c <__libc_init_array+0x3c>)
 8004266:	1b64      	subs	r4, r4, r5
 8004268:	10a4      	asrs	r4, r4, #2
 800426a:	2600      	movs	r6, #0
 800426c:	42a6      	cmp	r6, r4
 800426e:	d109      	bne.n	8004284 <__libc_init_array+0x24>
 8004270:	4d0b      	ldr	r5, [pc, #44]	; (80042a0 <__libc_init_array+0x40>)
 8004272:	4c0c      	ldr	r4, [pc, #48]	; (80042a4 <__libc_init_array+0x44>)
 8004274:	f000 f820 	bl	80042b8 <_init>
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	2600      	movs	r6, #0
 800427e:	42a6      	cmp	r6, r4
 8004280:	d105      	bne.n	800428e <__libc_init_array+0x2e>
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	f855 3b04 	ldr.w	r3, [r5], #4
 8004288:	4798      	blx	r3
 800428a:	3601      	adds	r6, #1
 800428c:	e7ee      	b.n	800426c <__libc_init_array+0xc>
 800428e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004292:	4798      	blx	r3
 8004294:	3601      	adds	r6, #1
 8004296:	e7f2      	b.n	800427e <__libc_init_array+0x1e>
 8004298:	08004774 	.word	0x08004774
 800429c:	08004774 	.word	0x08004774
 80042a0:	08004774 	.word	0x08004774
 80042a4:	08004778 	.word	0x08004778

080042a8 <memset>:
 80042a8:	4402      	add	r2, r0
 80042aa:	4603      	mov	r3, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
